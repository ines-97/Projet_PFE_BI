// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ami_assurances.date_sinistre_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Date_Sinistre Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Date_Sinistre implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Date_Sinistre";
	private final String projectName = "AMI_ASSURANCES";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Date_Sinistre.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Date_Sinistre.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_Date_Sinistre = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_Date_Sinistre = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String CAUSESINI;

		public String getCAUSESINI() {
			return this.CAUSESINI;
		}

		public String NATSINI;

		public String getNATSINI() {
			return this.NATSINI;
		}

		public String NATINT;

		public String getNATINT() {
			return this.NATINT;
		}

		public float IDINT;

		public float getIDINT() {
			return this.IDINT;
		}

		public String CODFORMU;

		public String getCODFORMU() {
			return this.CODFORMU;
		}

		public String CODE_ETAT;

		public String getCODE_ETAT() {
			return this.CODE_ETAT;
		}

		public float DATETASIN;

		public float getDATETASIN() {
			return this.DATETASIN;
		}

		public String CPOSTSINI;

		public String getCPOSTSINI() {
			return this.CPOSTSINI;
		}

		public String REGSINI;

		public String getREGSINI() {
			return this.REGSINI;
		}

		public String GOUVSINI;

		public String getGOUVSINI() {
			return this.GOUVSINI;
		}

		public float IDCAMTIER;

		public float getIDCAMTIER() {
			return this.IDCAMTIER;
		}

		public float CAS_IDA;

		public float getCAS_IDA() {
			return this.CAS_IDA;
		}

		public float DTOUVSNT;

		public float getDTOUVSNT() {
			return this.DTOUVSNT;
		}

		public java.util.Date DTCLTSNT;

		public java.util.Date getDTCLTSNT() {
			return this.DTCLTSNT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.NUMSNT == null) ? 0 : this.NUMSNT.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.NUMSNT == null) {
				if (other.NUMSNT != null)
					return false;

			} else if (!this.NUMSNT.equals(other.NUMSNT))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.NUMSNT = this.NUMSNT;
			other.CAUSESINI = this.CAUSESINI;
			other.NATSINI = this.NATSINI;
			other.NATINT = this.NATINT;
			other.IDINT = this.IDINT;
			other.CODFORMU = this.CODFORMU;
			other.CODE_ETAT = this.CODE_ETAT;
			other.DATETASIN = this.DATETASIN;
			other.CPOSTSINI = this.CPOSTSINI;
			other.REGSINI = this.REGSINI;
			other.GOUVSINI = this.GOUVSINI;
			other.IDCAMTIER = this.IDCAMTIER;
			other.CAS_IDA = this.CAS_IDA;
			other.DTOUVSNT = this.DTOUVSNT;
			other.DTCLTSNT = this.DTCLTSNT;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.NUMSNT = this.NUMSNT;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_Date_Sinistre.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_Date_Sinistre.length == 0) {
						commonByteArray_AMI_ASSURANCES_Date_Sinistre = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_Date_Sinistre = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_Date_Sinistre, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_Date_Sinistre, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_Date_Sinistre) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.CAUSESINI = readString(dis);

					this.NATSINI = readString(dis);

					this.NATINT = readString(dis);

					this.IDINT = dis.readFloat();

					this.CODFORMU = readString(dis);

					this.CODE_ETAT = readString(dis);

					this.DATETASIN = dis.readFloat();

					this.CPOSTSINI = readString(dis);

					this.REGSINI = readString(dis);

					this.GOUVSINI = readString(dis);

					this.IDCAMTIER = dis.readFloat();

					this.CAS_IDA = dis.readFloat();

					this.DTOUVSNT = dis.readFloat();

					this.DTCLTSNT = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.CAUSESINI, dos);

				// String

				writeString(this.NATSINI, dos);

				// String

				writeString(this.NATINT, dos);

				// float

				dos.writeFloat(this.IDINT);

				// String

				writeString(this.CODFORMU, dos);

				// String

				writeString(this.CODE_ETAT, dos);

				// float

				dos.writeFloat(this.DATETASIN);

				// String

				writeString(this.CPOSTSINI, dos);

				// String

				writeString(this.REGSINI, dos);

				// String

				writeString(this.GOUVSINI, dos);

				// float

				dos.writeFloat(this.IDCAMTIER);

				// float

				dos.writeFloat(this.CAS_IDA);

				// float

				dos.writeFloat(this.DTOUVSNT);

				// java.util.Date

				writeDate(this.DTCLTSNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",CAUSESINI=" + CAUSESINI);
			sb.append(",NATSINI=" + NATSINI);
			sb.append(",NATINT=" + NATINT);
			sb.append(",IDINT=" + String.valueOf(IDINT));
			sb.append(",CODFORMU=" + CODFORMU);
			sb.append(",CODE_ETAT=" + CODE_ETAT);
			sb.append(",DATETASIN=" + String.valueOf(DATETASIN));
			sb.append(",CPOSTSINI=" + CPOSTSINI);
			sb.append(",REGSINI=" + REGSINI);
			sb.append(",GOUVSINI=" + GOUVSINI);
			sb.append(",IDCAMTIER=" + String.valueOf(IDCAMTIER));
			sb.append(",CAS_IDA=" + String.valueOf(CAS_IDA));
			sb.append(",DTOUVSNT=" + String.valueOf(DTOUVSNT));
			sb.append(",DTCLTSNT=" + String.valueOf(DTCLTSNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NUMSNT, other.NUMSNT);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_Date_Sinistre = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_Date_Sinistre = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String CAUSESINI;

		public String getCAUSESINI() {
			return this.CAUSESINI;
		}

		public String NATSINI;

		public String getNATSINI() {
			return this.NATSINI;
		}

		public String NATINT;

		public String getNATINT() {
			return this.NATINT;
		}

		public float IDINT;

		public float getIDINT() {
			return this.IDINT;
		}

		public String CODFORMU;

		public String getCODFORMU() {
			return this.CODFORMU;
		}

		public String CODE_ETAT;

		public String getCODE_ETAT() {
			return this.CODE_ETAT;
		}

		public float DATETASIN;

		public float getDATETASIN() {
			return this.DATETASIN;
		}

		public String CPOSTSINI;

		public String getCPOSTSINI() {
			return this.CPOSTSINI;
		}

		public String REGSINI;

		public String getREGSINI() {
			return this.REGSINI;
		}

		public String GOUVSINI;

		public String getGOUVSINI() {
			return this.GOUVSINI;
		}

		public float IDCAMTIER;

		public float getIDCAMTIER() {
			return this.IDCAMTIER;
		}

		public float CAS_IDA;

		public float getCAS_IDA() {
			return this.CAS_IDA;
		}

		public float DTOUVSNT;

		public float getDTOUVSNT() {
			return this.DTOUVSNT;
		}

		public java.util.Date DTCLTSNT;

		public java.util.Date getDTCLTSNT() {
			return this.DTCLTSNT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.NUMSNT == null) ? 0 : this.NUMSNT.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.NUMSNT == null) {
				if (other.NUMSNT != null)
					return false;

			} else if (!this.NUMSNT.equals(other.NUMSNT))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.NUMSNT = this.NUMSNT;
			other.CAUSESINI = this.CAUSESINI;
			other.NATSINI = this.NATSINI;
			other.NATINT = this.NATINT;
			other.IDINT = this.IDINT;
			other.CODFORMU = this.CODFORMU;
			other.CODE_ETAT = this.CODE_ETAT;
			other.DATETASIN = this.DATETASIN;
			other.CPOSTSINI = this.CPOSTSINI;
			other.REGSINI = this.REGSINI;
			other.GOUVSINI = this.GOUVSINI;
			other.IDCAMTIER = this.IDCAMTIER;
			other.CAS_IDA = this.CAS_IDA;
			other.DTOUVSNT = this.DTOUVSNT;
			other.DTCLTSNT = this.DTCLTSNT;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.NUMSNT = this.NUMSNT;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_Date_Sinistre.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_Date_Sinistre.length == 0) {
						commonByteArray_AMI_ASSURANCES_Date_Sinistre = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_Date_Sinistre = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_Date_Sinistre, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_Date_Sinistre, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_Date_Sinistre) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.CAUSESINI = readString(dis);

					this.NATSINI = readString(dis);

					this.NATINT = readString(dis);

					this.IDINT = dis.readFloat();

					this.CODFORMU = readString(dis);

					this.CODE_ETAT = readString(dis);

					this.DATETASIN = dis.readFloat();

					this.CPOSTSINI = readString(dis);

					this.REGSINI = readString(dis);

					this.GOUVSINI = readString(dis);

					this.IDCAMTIER = dis.readFloat();

					this.CAS_IDA = dis.readFloat();

					this.DTOUVSNT = dis.readFloat();

					this.DTCLTSNT = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.CAUSESINI, dos);

				// String

				writeString(this.NATSINI, dos);

				// String

				writeString(this.NATINT, dos);

				// float

				dos.writeFloat(this.IDINT);

				// String

				writeString(this.CODFORMU, dos);

				// String

				writeString(this.CODE_ETAT, dos);

				// float

				dos.writeFloat(this.DATETASIN);

				// String

				writeString(this.CPOSTSINI, dos);

				// String

				writeString(this.REGSINI, dos);

				// String

				writeString(this.GOUVSINI, dos);

				// float

				dos.writeFloat(this.IDCAMTIER);

				// float

				dos.writeFloat(this.CAS_IDA);

				// float

				dos.writeFloat(this.DTOUVSNT);

				// java.util.Date

				writeDate(this.DTCLTSNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",CAUSESINI=" + CAUSESINI);
			sb.append(",NATSINI=" + NATSINI);
			sb.append(",NATINT=" + NATINT);
			sb.append(",IDINT=" + String.valueOf(IDINT));
			sb.append(",CODFORMU=" + CODFORMU);
			sb.append(",CODE_ETAT=" + CODE_ETAT);
			sb.append(",DATETASIN=" + String.valueOf(DATETASIN));
			sb.append(",CPOSTSINI=" + CPOSTSINI);
			sb.append(",REGSINI=" + REGSINI);
			sb.append(",GOUVSINI=" + GOUVSINI);
			sb.append(",IDCAMTIER=" + String.valueOf(IDCAMTIER));
			sb.append(",CAS_IDA=" + String.valueOf(CAS_IDA));
			sb.append(",DTOUVSNT=" + String.valueOf(DTOUVSNT));
			sb.append(",DTCLTSNT=" + String.valueOf(DTCLTSNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NUMSNT, other.NUMSNT);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_Date_Sinistre = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_Date_Sinistre = new byte[0];

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String CAUSESINI;

		public String getCAUSESINI() {
			return this.CAUSESINI;
		}

		public String NATSINI;

		public String getNATSINI() {
			return this.NATSINI;
		}

		public float SOUNATSIN;

		public float getSOUNATSIN() {
			return this.SOUNATSIN;
		}

		public float DTSURV;

		public float getDTSURV() {
			return this.DTSURV;
		}

		public String NUMCNT;

		public String getNUMCNT() {
			return this.NUMCNT;
		}

		public float NUMAVT;

		public float getNUMAVT() {
			return this.NUMAVT;
		}

		public float NUMMAJ;

		public float getNUMMAJ() {
			return this.NUMMAJ;
		}

		public float NUMRISQ;

		public float getNUMRISQ() {
			return this.NUMRISQ;
		}

		public String NATCLT;

		public String getNATCLT() {
			return this.NATCLT;
		}

		public float IDCLT;

		public float getIDCLT() {
			return this.IDCLT;
		}

		public String NATINT;

		public String getNATINT() {
			return this.NATINT;
		}

		public float IDINT;

		public float getIDINT() {
			return this.IDINT;
		}

		public float IDDELEGA;

		public float getIDDELEGA() {
			return this.IDDELEGA;
		}

		public String CODFAM;

		public String getCODFAM() {
			return this.CODFAM;
		}

		public String CODPROD;

		public String getCODPROD() {
			return this.CODPROD;
		}

		public String CODFORMU;

		public String getCODFORMU() {
			return this.CODFORMU;
		}

		public float DEBEFFET;

		public float getDEBEFFET() {
			return this.DEBEFFET;
		}

		public float FINEFFET;

		public float getFINEFFET() {
			return this.FINEFFET;
		}

		public String IMMAT;

		public String getIMMAT() {
			return this.IMMAT;
		}

		public String REFEXTERN;

		public String getREFEXTERN() {
			return this.REFEXTERN;
		}

		public float DTDECSNT;

		public float getDTDECSNT() {
			return this.DTDECSNT;
		}

		public String INDFORCAG;

		public String getINDFORCAG() {
			return this.INDFORCAG;
		}

		public String CODE_ETAT;

		public String getCODE_ETAT() {
			return this.CODE_ETAT;
		}

		public float DATETASIN;

		public float getDATETASIN() {
			return this.DATETASIN;
		}

		public String TYPEPAVE;

		public String getTYPEPAVE() {
			return this.TYPEPAVE;
		}

		public String NOMCONDUC;

		public String getNOMCONDUC() {
			return this.NOMCONDUC;
		}

		public float DATNAICON;

		public float getDATNAICON() {
			return this.DATNAICON;
		}

		public String NUMPERMIS;

		public String getNUMPERMIS() {
			return this.NUMPERMIS;
		}

		public String CATEGPERM;

		public String getCATEGPERM() {
			return this.CATEGPERM;
		}

		public float DATEPERMI;

		public float getDATEPERMI() {
			return this.DATEPERMI;
		}

		public String RUE;

		public String getRUE() {
			return this.RUE;
		}

		public String CPOSTSINI;

		public String getCPOSTSINI() {
			return this.CPOSTSINI;
		}

		public String CITESINI;

		public String getCITESINI() {
			return this.CITESINI;
		}

		public String REGSINI;

		public String getREGSINI() {
			return this.REGSINI;
		}

		public String GOUVSINI;

		public String getGOUVSINI() {
			return this.GOUVSINI;
		}

		public String NATEXPERT;

		public String getNATEXPERT() {
			return this.NATEXPERT;
		}

		public float IDEXPERT;

		public float getIDEXPERT() {
			return this.IDEXPERT;
		}

		public String NOMTIERS;

		public String getNOMTIERS() {
			return this.NOMTIERS;
		}

		public String IMVEHTIER;

		public String getIMVEHTIER() {
			return this.IMVEHTIER;
		}

		public String NUMCNTTIE;

		public String getNUMCNTTIE() {
			return this.NUMCNTTIE;
		}

		public String NUMSNTTIE;

		public String getNUMSNTTIE() {
			return this.NUMSNTTIE;
		}

		public float CODPOSTIE;

		public float getCODPOSTIE() {
			return this.CODPOSTIE;
		}

		public String NATCAMTIE;

		public String getNATCAMTIE() {
			return this.NATCAMTIE;
		}

		public float IDCAMTIER;

		public float getIDCAMTIER() {
			return this.IDCAMTIER;
		}

		public float CAS_IDA;

		public float getCAS_IDA() {
			return this.CAS_IDA;
		}

		public float RESPIDA;

		public float getRESPIDA() {
			return this.RESPIDA;
		}

		public float DTOUVSNT;

		public float getDTOUVSNT() {
			return this.DTOUVSNT;
		}

		public float DTCLTSNT;

		public float getDTCLTSNT() {
			return this.DTCLTSNT;
		}

		public float DTREOUSNT;

		public float getDTREOUSNT() {
			return this.DTREOUSNT;
		}

		public String COASSUR;

		public String getCOASSUR() {
			return this.COASSUR;
		}

		public String REASSUR;

		public String getREASSUR() {
			return this.REASSUR;
		}

		public String RESPSNT;

		public String getRESPSNT() {
			return this.RESPSNT;
		}

		public float TAUX;

		public float getTAUX() {
			return this.TAUX;
		}

		public float DPECSIN;

		public float getDPECSIN() {
			return this.DPECSIN;
		}

		public String GESTIOSIN;

		public String getGESTIOSIN() {
			return this.GESTIOSIN;
		}

		public float HEURESINI;

		public float getHEURESINI() {
			return this.HEURESINI;
		}

		public String SOURCDEC;

		public String getSOURCDEC() {
			return this.SOURCDEC;
		}

		public String DDETRANSA;

		public String getDDETRANSA() {
			return this.DDETRANSA;
		}

		public BigDecimal UPDATE_IDENT;

		public BigDecimal getUPDATE_IDENT() {
			return this.UPDATE_IDENT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_Date_Sinistre.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_Date_Sinistre.length == 0) {
						commonByteArray_AMI_ASSURANCES_Date_Sinistre = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_Date_Sinistre = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_Date_Sinistre, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_Date_Sinistre, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_Date_Sinistre) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.CAUSESINI = readString(dis);

					this.NATSINI = readString(dis);

					this.SOUNATSIN = dis.readFloat();

					this.DTSURV = dis.readFloat();

					this.NUMCNT = readString(dis);

					this.NUMAVT = dis.readFloat();

					this.NUMMAJ = dis.readFloat();

					this.NUMRISQ = dis.readFloat();

					this.NATCLT = readString(dis);

					this.IDCLT = dis.readFloat();

					this.NATINT = readString(dis);

					this.IDINT = dis.readFloat();

					this.IDDELEGA = dis.readFloat();

					this.CODFAM = readString(dis);

					this.CODPROD = readString(dis);

					this.CODFORMU = readString(dis);

					this.DEBEFFET = dis.readFloat();

					this.FINEFFET = dis.readFloat();

					this.IMMAT = readString(dis);

					this.REFEXTERN = readString(dis);

					this.DTDECSNT = dis.readFloat();

					this.INDFORCAG = readString(dis);

					this.CODE_ETAT = readString(dis);

					this.DATETASIN = dis.readFloat();

					this.TYPEPAVE = readString(dis);

					this.NOMCONDUC = readString(dis);

					this.DATNAICON = dis.readFloat();

					this.NUMPERMIS = readString(dis);

					this.CATEGPERM = readString(dis);

					this.DATEPERMI = dis.readFloat();

					this.RUE = readString(dis);

					this.CPOSTSINI = readString(dis);

					this.CITESINI = readString(dis);

					this.REGSINI = readString(dis);

					this.GOUVSINI = readString(dis);

					this.NATEXPERT = readString(dis);

					this.IDEXPERT = dis.readFloat();

					this.NOMTIERS = readString(dis);

					this.IMVEHTIER = readString(dis);

					this.NUMCNTTIE = readString(dis);

					this.NUMSNTTIE = readString(dis);

					this.CODPOSTIE = dis.readFloat();

					this.NATCAMTIE = readString(dis);

					this.IDCAMTIER = dis.readFloat();

					this.CAS_IDA = dis.readFloat();

					this.RESPIDA = dis.readFloat();

					this.DTOUVSNT = dis.readFloat();

					this.DTCLTSNT = dis.readFloat();

					this.DTREOUSNT = dis.readFloat();

					this.COASSUR = readString(dis);

					this.REASSUR = readString(dis);

					this.RESPSNT = readString(dis);

					this.TAUX = dis.readFloat();

					this.DPECSIN = dis.readFloat();

					this.GESTIOSIN = readString(dis);

					this.HEURESINI = dis.readFloat();

					this.SOURCDEC = readString(dis);

					this.DDETRANSA = readString(dis);

					this.UPDATE_IDENT = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.CAUSESINI, dos);

				// String

				writeString(this.NATSINI, dos);

				// float

				dos.writeFloat(this.SOUNATSIN);

				// float

				dos.writeFloat(this.DTSURV);

				// String

				writeString(this.NUMCNT, dos);

				// float

				dos.writeFloat(this.NUMAVT);

				// float

				dos.writeFloat(this.NUMMAJ);

				// float

				dos.writeFloat(this.NUMRISQ);

				// String

				writeString(this.NATCLT, dos);

				// float

				dos.writeFloat(this.IDCLT);

				// String

				writeString(this.NATINT, dos);

				// float

				dos.writeFloat(this.IDINT);

				// float

				dos.writeFloat(this.IDDELEGA);

				// String

				writeString(this.CODFAM, dos);

				// String

				writeString(this.CODPROD, dos);

				// String

				writeString(this.CODFORMU, dos);

				// float

				dos.writeFloat(this.DEBEFFET);

				// float

				dos.writeFloat(this.FINEFFET);

				// String

				writeString(this.IMMAT, dos);

				// String

				writeString(this.REFEXTERN, dos);

				// float

				dos.writeFloat(this.DTDECSNT);

				// String

				writeString(this.INDFORCAG, dos);

				// String

				writeString(this.CODE_ETAT, dos);

				// float

				dos.writeFloat(this.DATETASIN);

				// String

				writeString(this.TYPEPAVE, dos);

				// String

				writeString(this.NOMCONDUC, dos);

				// float

				dos.writeFloat(this.DATNAICON);

				// String

				writeString(this.NUMPERMIS, dos);

				// String

				writeString(this.CATEGPERM, dos);

				// float

				dos.writeFloat(this.DATEPERMI);

				// String

				writeString(this.RUE, dos);

				// String

				writeString(this.CPOSTSINI, dos);

				// String

				writeString(this.CITESINI, dos);

				// String

				writeString(this.REGSINI, dos);

				// String

				writeString(this.GOUVSINI, dos);

				// String

				writeString(this.NATEXPERT, dos);

				// float

				dos.writeFloat(this.IDEXPERT);

				// String

				writeString(this.NOMTIERS, dos);

				// String

				writeString(this.IMVEHTIER, dos);

				// String

				writeString(this.NUMCNTTIE, dos);

				// String

				writeString(this.NUMSNTTIE, dos);

				// float

				dos.writeFloat(this.CODPOSTIE);

				// String

				writeString(this.NATCAMTIE, dos);

				// float

				dos.writeFloat(this.IDCAMTIER);

				// float

				dos.writeFloat(this.CAS_IDA);

				// float

				dos.writeFloat(this.RESPIDA);

				// float

				dos.writeFloat(this.DTOUVSNT);

				// float

				dos.writeFloat(this.DTCLTSNT);

				// float

				dos.writeFloat(this.DTREOUSNT);

				// String

				writeString(this.COASSUR, dos);

				// String

				writeString(this.REASSUR, dos);

				// String

				writeString(this.RESPSNT, dos);

				// float

				dos.writeFloat(this.TAUX);

				// float

				dos.writeFloat(this.DPECSIN);

				// String

				writeString(this.GESTIOSIN, dos);

				// float

				dos.writeFloat(this.HEURESINI);

				// String

				writeString(this.SOURCDEC, dos);

				// String

				writeString(this.DDETRANSA, dos);

				// BigDecimal

				dos.writeObject(this.UPDATE_IDENT);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",CAUSESINI=" + CAUSESINI);
			sb.append(",NATSINI=" + NATSINI);
			sb.append(",SOUNATSIN=" + String.valueOf(SOUNATSIN));
			sb.append(",DTSURV=" + String.valueOf(DTSURV));
			sb.append(",NUMCNT=" + NUMCNT);
			sb.append(",NUMAVT=" + String.valueOf(NUMAVT));
			sb.append(",NUMMAJ=" + String.valueOf(NUMMAJ));
			sb.append(",NUMRISQ=" + String.valueOf(NUMRISQ));
			sb.append(",NATCLT=" + NATCLT);
			sb.append(",IDCLT=" + String.valueOf(IDCLT));
			sb.append(",NATINT=" + NATINT);
			sb.append(",IDINT=" + String.valueOf(IDINT));
			sb.append(",IDDELEGA=" + String.valueOf(IDDELEGA));
			sb.append(",CODFAM=" + CODFAM);
			sb.append(",CODPROD=" + CODPROD);
			sb.append(",CODFORMU=" + CODFORMU);
			sb.append(",DEBEFFET=" + String.valueOf(DEBEFFET));
			sb.append(",FINEFFET=" + String.valueOf(FINEFFET));
			sb.append(",IMMAT=" + IMMAT);
			sb.append(",REFEXTERN=" + REFEXTERN);
			sb.append(",DTDECSNT=" + String.valueOf(DTDECSNT));
			sb.append(",INDFORCAG=" + INDFORCAG);
			sb.append(",CODE_ETAT=" + CODE_ETAT);
			sb.append(",DATETASIN=" + String.valueOf(DATETASIN));
			sb.append(",TYPEPAVE=" + TYPEPAVE);
			sb.append(",NOMCONDUC=" + NOMCONDUC);
			sb.append(",DATNAICON=" + String.valueOf(DATNAICON));
			sb.append(",NUMPERMIS=" + NUMPERMIS);
			sb.append(",CATEGPERM=" + CATEGPERM);
			sb.append(",DATEPERMI=" + String.valueOf(DATEPERMI));
			sb.append(",RUE=" + RUE);
			sb.append(",CPOSTSINI=" + CPOSTSINI);
			sb.append(",CITESINI=" + CITESINI);
			sb.append(",REGSINI=" + REGSINI);
			sb.append(",GOUVSINI=" + GOUVSINI);
			sb.append(",NATEXPERT=" + NATEXPERT);
			sb.append(",IDEXPERT=" + String.valueOf(IDEXPERT));
			sb.append(",NOMTIERS=" + NOMTIERS);
			sb.append(",IMVEHTIER=" + IMVEHTIER);
			sb.append(",NUMCNTTIE=" + NUMCNTTIE);
			sb.append(",NUMSNTTIE=" + NUMSNTTIE);
			sb.append(",CODPOSTIE=" + String.valueOf(CODPOSTIE));
			sb.append(",NATCAMTIE=" + NATCAMTIE);
			sb.append(",IDCAMTIER=" + String.valueOf(IDCAMTIER));
			sb.append(",CAS_IDA=" + String.valueOf(CAS_IDA));
			sb.append(",RESPIDA=" + String.valueOf(RESPIDA));
			sb.append(",DTOUVSNT=" + String.valueOf(DTOUVSNT));
			sb.append(",DTCLTSNT=" + String.valueOf(DTCLTSNT));
			sb.append(",DTREOUSNT=" + String.valueOf(DTREOUSNT));
			sb.append(",COASSUR=" + COASSUR);
			sb.append(",REASSUR=" + REASSUR);
			sb.append(",RESPSNT=" + RESPSNT);
			sb.append(",TAUX=" + String.valueOf(TAUX));
			sb.append(",DPECSIN=" + String.valueOf(DPECSIN));
			sb.append(",GESTIOSIN=" + GESTIOSIN);
			sb.append(",HEURESINI=" + String.valueOf(HEURESINI));
			sb.append(",SOURCDEC=" + SOURCDEC);
			sb.append(",DDETRANSA=" + DDETRANSA);
			sb.append(",UPDATE_IDENT=" + String.valueOf(UPDATE_IDENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row5Struct row5 = new row5Struct();
				row5Struct row4 = row5;

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = "";

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = ("Sinistre");
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("Sinistre");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_2 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "AMI_Assurances";
				dbUser_tDBOutput_2 = "postgres";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:pm+ThvMh8uYD3xSHdLls3scdNENLFO3kLBdJNMcW5UE6krjO4oyryw==");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2,
						dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
				boolean whetherExist_tDBOutput_2 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null,
						new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_2 = "public";
					if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_2 = conn_tDBOutput_2.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_2 = stmtSchema_tDBOutput_2
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_2.next()) {
								defaultSchema_tDBOutput_2 = rsSchema_tDBOutput_2.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_2.next()) {
						String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
						String schema_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_SCHEM");
						if (table_tDBOutput_2.equals(("Sinistre")) && (schema_tDBOutput_2.equals(dbschema_tDBOutput_2)
								|| ((dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0)
										&& defaultSchema_tDBOutput_2.equals(schema_tDBOutput_2)))) {
							whetherExist_tDBOutput_2 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
						stmtDrop_tDBOutput_2.execute("DROP TABLE \"" + tableName_tDBOutput_2 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2
							+ "\"(\"NUMSNT\" VARCHAR(255)   not null ,\"CAUSESINI\" VARCHAR(255)   not null ,\"NATSINI\" VARCHAR(255)   not null ,\"NATINT\" VARCHAR(255)   not null ,\"IDINT\" NUMERIC(10,0)   not null ,\"CODFORMU\" VARCHAR(255)   not null ,\"CODE_ETAT\" VARCHAR(255)   not null ,\"DATETASIN\" NUMERIC(8,0)   not null ,\"CPOSTSINI\" VARCHAR(255)   not null ,\"REGSINI\" VARCHAR(255)   not null ,\"GOUVSINI\" VARCHAR(12)   not null ,\"IDCAMTIER\" NUMERIC(10,0)   not null ,\"CAS_IDA\" NUMERIC(2,0)   not null ,\"DTOUVSNT\" NUMERIC(8,0)   not null ,\"DTCLTSNT\" TIMESTAMP(10)   not null ,primary key(\"NUMSNT\"))");
				}
				String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2
						+ "\" (\"NUMSNT\",\"CAUSESINI\",\"NATSINI\",\"NATINT\",\"IDINT\",\"CODFORMU\",\"CODE_ETAT\",\"DATETASIN\",\"CPOSTSINI\",\"REGSINI\",\"GOUVSINI\",\"IDCAMTIER\",\"CAS_IDA\",\"DTOUVSNT\",\"DTCLTSNT\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
					int var1;
					String var2;
					String var3;
					String var4;
					int var5;
					String var6;
					java.util.Date var7;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				row5Struct row5_tmp = new row5Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "STGPFE01";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:EHKRdHjEwSQgUqEpf67YxmDr+WOUOJqhr+aU3x72QyRdPf8=");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  SITB01.NUMSNT, \n  SITB01.CAUSESINI, \n  SITB01.NATSINI, \n  SITB01.SOUNATSIN, \n  SITB01.DTSURV, \n  SITB01.NUMCN"
						+ "T, \n  SITB01.NUMAVT, \n  SITB01.NUMMAJ, \n  SITB01.NUMRISQ, \n  SITB01.NATCLT, \n  SITB01.IDCLT, \n  SITB01.NATINT, \n  SITB01"
						+ ".IDINT, \n  SITB01.IDDELEGA, \n  SITB01.CODFAM, \n  SITB01.CODPROD, \n  SITB01.CODFORMU, \n  SITB01.DEBEFFET, \n  SITB01.FINEF"
						+ "FET, \n  SITB01.IMMAT, \n  SITB01.REFEXTERN, \n  SITB01.DTDECSNT, \n  SITB01.INDFORCAG, \n  SITB01.CODE_ETAT, \n  SITB01.DATET"
						+ "ASIN, \n  SITB01.TYPEPAVE, \n  SITB01.NOMCONDUC, \n  SITB01.DATNAICON, \n  SITB01.NUMPERMIS, \n  SITB01.CATEGPERM, \n  SITB01."
						+ "DATEPERMI, \n  SITB01.RUE, \n  SITB01.CPOSTSINI, \n  SITB01.CITESINI, \n  SITB01.REGSINI, \n  SITB01.GOUVSINI, \n  SITB01.NATE"
						+ "XPERT, \n  SITB01.IDEXPERT, \n  SITB01.NOMTIERS, \n  SITB01.IMVEHTIER, \n  SITB01.NUMCNTTIE, \n  SITB01.NUMSNTTIE, \n  SITB01."
						+ "CODPOSTIE, \n  SITB01.NATCAMTIE, \n  SITB01.IDCAMTIER, \n  SITB01.CAS_IDA, \n  SITB01.RESPIDA, \n  SITB01.DTOUVSNT, \n  SITB01"
						+ ".DTCLTSNT, \n  SITB01.DTREOUSNT, \n  SITB01.COASSUR, \n  SITB01.REASSUR, \n  SITB01.RESPSNT, \n  SITB01.TAUX, \n  SITB01.DPECS"
						+ "IN, \n  SITB01.GESTIOSIN, \n  SITB01.HEURESINI, \n  SITB01.SOURCDEC, \n  SITB01.DDETRANSA, \n  SITB01.UPDATE_IDENT\nFROM SITB0"
						+ "1";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row3.NUMSNT = null;
						} else {

							row3.NUMSNT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row3.CAUSESINI = null;
						} else {

							row3.CAUSESINI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row3.NATSINI = null;
						} else {

							row3.NATSINI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row3.SOUNATSIN = 0;
						} else {

							row3.SOUNATSIN = rs_tDBInput_2.getFloat(4);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row3.DTSURV = 0;
						} else {

							row3.DTSURV = rs_tDBInput_2.getFloat(5);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row3.NUMCNT = null;
						} else {

							row3.NUMCNT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row3.NUMAVT = 0;
						} else {

							row3.NUMAVT = rs_tDBInput_2.getFloat(7);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row3.NUMMAJ = 0;
						} else {

							row3.NUMMAJ = rs_tDBInput_2.getFloat(8);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row3.NUMRISQ = 0;
						} else {

							row3.NUMRISQ = rs_tDBInput_2.getFloat(9);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row3.NATCLT = null;
						} else {

							row3.NATCLT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row3.IDCLT = 0;
						} else {

							row3.IDCLT = rs_tDBInput_2.getFloat(11);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row3.NATINT = null;
						} else {

							row3.NATINT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row3.IDINT = 0;
						} else {

							row3.IDINT = rs_tDBInput_2.getFloat(13);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row3.IDDELEGA = 0;
						} else {

							row3.IDDELEGA = rs_tDBInput_2.getFloat(14);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row3.CODFAM = null;
						} else {

							row3.CODFAM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, false);
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row3.CODPROD = null;
						} else {

							row3.CODPROD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, false);
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row3.CODFORMU = null;
						} else {

							row3.CODFORMU = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, false);
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row3.DEBEFFET = 0;
						} else {

							row3.DEBEFFET = rs_tDBInput_2.getFloat(18);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row3.FINEFFET = 0;
						} else {

							row3.FINEFFET = rs_tDBInput_2.getFloat(19);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row3.IMMAT = null;
						} else {

							row3.IMMAT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, false);
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row3.REFEXTERN = null;
						} else {

							row3.REFEXTERN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 21, false);
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row3.DTDECSNT = 0;
						} else {

							row3.DTDECSNT = rs_tDBInput_2.getFloat(22);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row3.INDFORCAG = null;
						} else {

							row3.INDFORCAG = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, false);
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row3.CODE_ETAT = null;
						} else {

							row3.CODE_ETAT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 24, false);
						}
						if (colQtyInRs_tDBInput_2 < 25) {
							row3.DATETASIN = 0;
						} else {

							row3.DATETASIN = rs_tDBInput_2.getFloat(25);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 26) {
							row3.TYPEPAVE = null;
						} else {

							row3.TYPEPAVE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 26, false);
						}
						if (colQtyInRs_tDBInput_2 < 27) {
							row3.NOMCONDUC = null;
						} else {

							row3.NOMCONDUC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 27, false);
						}
						if (colQtyInRs_tDBInput_2 < 28) {
							row3.DATNAICON = 0;
						} else {

							row3.DATNAICON = rs_tDBInput_2.getFloat(28);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 29) {
							row3.NUMPERMIS = null;
						} else {

							row3.NUMPERMIS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 29, false);
						}
						if (colQtyInRs_tDBInput_2 < 30) {
							row3.CATEGPERM = null;
						} else {

							row3.CATEGPERM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 30, false);
						}
						if (colQtyInRs_tDBInput_2 < 31) {
							row3.DATEPERMI = 0;
						} else {

							row3.DATEPERMI = rs_tDBInput_2.getFloat(31);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 32) {
							row3.RUE = null;
						} else {

							row3.RUE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 32, false);
						}
						if (colQtyInRs_tDBInput_2 < 33) {
							row3.CPOSTSINI = null;
						} else {

							row3.CPOSTSINI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 33, false);
						}
						if (colQtyInRs_tDBInput_2 < 34) {
							row3.CITESINI = null;
						} else {

							row3.CITESINI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 34, false);
						}
						if (colQtyInRs_tDBInput_2 < 35) {
							row3.REGSINI = null;
						} else {

							row3.REGSINI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 35, false);
						}
						if (colQtyInRs_tDBInput_2 < 36) {
							row3.GOUVSINI = null;
						} else {

							row3.GOUVSINI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 36, false);
						}
						if (colQtyInRs_tDBInput_2 < 37) {
							row3.NATEXPERT = null;
						} else {

							row3.NATEXPERT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 37, false);
						}
						if (colQtyInRs_tDBInput_2 < 38) {
							row3.IDEXPERT = 0;
						} else {

							row3.IDEXPERT = rs_tDBInput_2.getFloat(38);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 39) {
							row3.NOMTIERS = null;
						} else {

							row3.NOMTIERS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 39, false);
						}
						if (colQtyInRs_tDBInput_2 < 40) {
							row3.IMVEHTIER = null;
						} else {

							row3.IMVEHTIER = routines.system.JDBCUtil.getString(rs_tDBInput_2, 40, false);
						}
						if (colQtyInRs_tDBInput_2 < 41) {
							row3.NUMCNTTIE = null;
						} else {

							row3.NUMCNTTIE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 41, false);
						}
						if (colQtyInRs_tDBInput_2 < 42) {
							row3.NUMSNTTIE = null;
						} else {

							row3.NUMSNTTIE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 42, false);
						}
						if (colQtyInRs_tDBInput_2 < 43) {
							row3.CODPOSTIE = 0;
						} else {

							row3.CODPOSTIE = rs_tDBInput_2.getFloat(43);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 44) {
							row3.NATCAMTIE = null;
						} else {

							row3.NATCAMTIE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 44, false);
						}
						if (colQtyInRs_tDBInput_2 < 45) {
							row3.IDCAMTIER = 0;
						} else {

							row3.IDCAMTIER = rs_tDBInput_2.getFloat(45);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 46) {
							row3.CAS_IDA = 0;
						} else {

							row3.CAS_IDA = rs_tDBInput_2.getFloat(46);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 47) {
							row3.RESPIDA = 0;
						} else {

							row3.RESPIDA = rs_tDBInput_2.getFloat(47);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 48) {
							row3.DTOUVSNT = 0;
						} else {

							row3.DTOUVSNT = rs_tDBInput_2.getFloat(48);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 49) {
							row3.DTCLTSNT = 0;
						} else {

							row3.DTCLTSNT = rs_tDBInput_2.getFloat(49);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 50) {
							row3.DTREOUSNT = 0;
						} else {

							row3.DTREOUSNT = rs_tDBInput_2.getFloat(50);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 51) {
							row3.COASSUR = null;
						} else {

							row3.COASSUR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 51, false);
						}
						if (colQtyInRs_tDBInput_2 < 52) {
							row3.REASSUR = null;
						} else {

							row3.REASSUR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 52, false);
						}
						if (colQtyInRs_tDBInput_2 < 53) {
							row3.RESPSNT = null;
						} else {

							row3.RESPSNT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 53, false);
						}
						if (colQtyInRs_tDBInput_2 < 54) {
							row3.TAUX = 0;
						} else {

							row3.TAUX = rs_tDBInput_2.getFloat(54);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 55) {
							row3.DPECSIN = 0;
						} else {

							row3.DPECSIN = rs_tDBInput_2.getFloat(55);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 56) {
							row3.GESTIOSIN = null;
						} else {

							row3.GESTIOSIN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 56, false);
						}
						if (colQtyInRs_tDBInput_2 < 57) {
							row3.HEURESINI = 0;
						} else {

							row3.HEURESINI = rs_tDBInput_2.getFloat(57);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 58) {
							row3.SOURCDEC = null;
						} else {

							row3.SOURCDEC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 58, false);
						}
						if (colQtyInRs_tDBInput_2 < 59) {
							row3.DDETRANSA = null;
						} else {

							row3.DDETRANSA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 59, false);
						}
						if (colQtyInRs_tDBInput_2 < 60) {
							row3.UPDATE_IDENT = null;
						} else {

							row3.UPDATE_IDENT = rs_tDBInput_2.getBigDecimal(60);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;
							Var.var1 = (int) row3.DTOUVSNT;
							Var.var2 = Var.var1 + "";
							Var.var3 = StringHandling.EREPLACE(Var.var2, " ", "");
							Var.var4 = Var.var3.equals("") ? null : Var.var3;
							Var.var5 = Var.var4.equals(null ? null : StringHandling.LEN(Var.var4));
							Var.var6 = Var.var5.equals(null ? null : (Var.var5 != 8 ? null : Var.var4));
							Var.var7 = Var.var6.equals(null ? null : TalendDate.parseDate("yyyy-MM-dd", Var.var6));// ###############################
							// ###############################
							// # Output tables

							row5 = null;

// # Output table : 'row5'
							row5_tmp.NUMSNT = row3.NUMSNT;
							row5_tmp.CAUSESINI = row3.CAUSESINI;
							row5_tmp.NATSINI = row3.NATSINI;
							row5_tmp.NATINT = row3.NATINT;
							row5_tmp.IDINT = row3.IDINT;
							row5_tmp.CODFORMU = row3.CODFORMU;
							row5_tmp.CODE_ETAT = row3.CODE_ETAT;
							row5_tmp.DATETASIN = row3.DATETASIN;
							row5_tmp.CPOSTSINI = row3.CPOSTSINI;
							row5_tmp.REGSINI = row3.REGSINI;
							row5_tmp.GOUVSINI = row3.GOUVSINI;
							row5_tmp.IDCAMTIER = row3.IDCAMTIER;
							row5_tmp.CAS_IDA = row3.CAS_IDA;
							row5_tmp.DTOUVSNT = row3.DTOUVSNT;
							row5_tmp.DTCLTSNT = Var.var7;
							row5 = row5_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tLogRow_2 main ] start
							 */

							currentComponent = "tLogRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
							}

///////////////////////		

							strBuffer_tLogRow_2 = new StringBuilder();

							if (row5.NUMSNT != null) { //

								strBuffer_tLogRow_2.append(String.valueOf(row5.NUMSNT));

							} //

							strBuffer_tLogRow_2.append("|");

							if (row5.CAUSESINI != null) { //

								strBuffer_tLogRow_2.append(String.valueOf(row5.CAUSESINI));

							} //

							strBuffer_tLogRow_2.append("|");

							if (row5.NATSINI != null) { //

								strBuffer_tLogRow_2.append(String.valueOf(row5.NATSINI));

							} //

							strBuffer_tLogRow_2.append("|");

							if (row5.NATINT != null) { //

								strBuffer_tLogRow_2.append(String.valueOf(row5.NATINT));

							} //

							strBuffer_tLogRow_2.append("|");

							strBuffer_tLogRow_2.append(FormatterUtils.formatUnwithE(row5.IDINT));

							strBuffer_tLogRow_2.append("|");

							if (row5.CODFORMU != null) { //

								strBuffer_tLogRow_2.append(String.valueOf(row5.CODFORMU));

							} //

							strBuffer_tLogRow_2.append("|");

							if (row5.CODE_ETAT != null) { //

								strBuffer_tLogRow_2.append(String.valueOf(row5.CODE_ETAT));

							} //

							strBuffer_tLogRow_2.append("|");

							strBuffer_tLogRow_2.append(FormatterUtils.formatUnwithE(row5.DATETASIN));

							strBuffer_tLogRow_2.append("|");

							if (row5.CPOSTSINI != null) { //

								strBuffer_tLogRow_2.append(String.valueOf(row5.CPOSTSINI));

							} //

							strBuffer_tLogRow_2.append("|");

							if (row5.REGSINI != null) { //

								strBuffer_tLogRow_2.append(String.valueOf(row5.REGSINI));

							} //

							strBuffer_tLogRow_2.append("|");

							if (row5.GOUVSINI != null) { //

								strBuffer_tLogRow_2.append(String.valueOf(row5.GOUVSINI));

							} //

							strBuffer_tLogRow_2.append("|");

							strBuffer_tLogRow_2.append(FormatterUtils.formatUnwithE(row5.IDCAMTIER));

							strBuffer_tLogRow_2.append("|");

							strBuffer_tLogRow_2.append(FormatterUtils.formatUnwithE(row5.CAS_IDA));

							strBuffer_tLogRow_2.append("|");

							strBuffer_tLogRow_2.append(FormatterUtils.formatUnwithE(row5.DTOUVSNT));

							strBuffer_tLogRow_2.append("|");

							if (row5.DTCLTSNT != null) { //

								strBuffer_tLogRow_2.append(FormatterUtils.format_Date(row5.DTCLTSNT, "yyyy-MM-dd"));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_2 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(System.out));
								globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
							}
							consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
							consoleOut_tLogRow_2.flush();
							nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

							row4 = row5;

							tos_count_tLogRow_2++;

							/**
							 * [tLogRow_2 main ] stop
							 */

							/**
							 * [tLogRow_2 process_data_begin ] start
							 */

							currentComponent = "tLogRow_2";

							/**
							 * [tLogRow_2 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_2 main ] start
							 */

							currentComponent = "tDBOutput_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
							}

							whetherReject_tDBOutput_2 = false;
							if (row4.NUMSNT == null) {
								pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(1, row4.NUMSNT);
							}

							if (row4.CAUSESINI == null) {
								pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(2, row4.CAUSESINI);
							}

							if (row4.NATSINI == null) {
								pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(3, row4.NATSINI);
							}

							if (row4.NATINT == null) {
								pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(4, row4.NATINT);
							}

							pstmt_tDBOutput_2.setFloat(5, row4.IDINT);

							if (row4.CODFORMU == null) {
								pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(6, row4.CODFORMU);
							}

							if (row4.CODE_ETAT == null) {
								pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(7, row4.CODE_ETAT);
							}

							pstmt_tDBOutput_2.setFloat(8, row4.DATETASIN);

							if (row4.CPOSTSINI == null) {
								pstmt_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(9, row4.CPOSTSINI);
							}

							if (row4.REGSINI == null) {
								pstmt_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(10, row4.REGSINI);
							}

							if (row4.GOUVSINI == null) {
								pstmt_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(11, row4.GOUVSINI);
							}

							pstmt_tDBOutput_2.setFloat(12, row4.IDCAMTIER);

							pstmt_tDBOutput_2.setFloat(13, row4.CAS_IDA);

							pstmt_tDBOutput_2.setFloat(14, row4.DTOUVSNT);

							if (row4.DTCLTSNT != null) {
								pstmt_tDBOutput_2.setTimestamp(15, new java.sql.Timestamp(row4.DTCLTSNT.getTime()));
							} else {
								pstmt_tDBOutput_2.setNull(15, java.sql.Types.TIMESTAMP);
							}

							pstmt_tDBOutput_2.addBatch();
							nb_line_tDBOutput_2++;

							batchSizeCounter_tDBOutput_2++;

							if ((batchSize_tDBOutput_2 > 0)
									&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
								try {
									int countSum_tDBOutput_2 = 0;

									for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									batchSizeCounter_tDBOutput_2 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
									java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
											sqle_tDBOutput_2 = null;
									String errormessage_tDBOutput_2;
									if (ne_tDBOutput_2 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_2 = new java.sql.SQLException(
												e_tDBOutput_2.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_2.getMessage(),
												ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
												ne_tDBOutput_2);
										errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
									} else {
										errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
									}

									int countSum_tDBOutput_2 = 0;
									for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									System.err.println(errormessage_tDBOutput_2);

								}
							}

							commitCounter_tDBOutput_2++;
							if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
								if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
									try {
										int countSum_tDBOutput_2 = 0;

										for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
											countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
													: countEach_tDBOutput_2);
										}

										insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

										batchSizeCounter_tDBOutput_2 = 0;
									} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
										java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
												sqle_tDBOutput_2 = null;
										String errormessage_tDBOutput_2;
										if (ne_tDBOutput_2 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_2 = new java.sql.SQLException(
													e_tDBOutput_2.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_2.getMessage(),
													ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
													ne_tDBOutput_2);
											errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
										} else {
											errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
										}

										int countSum_tDBOutput_2 = 0;
										for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
											countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
													: countEach_tDBOutput_2);
										}

										insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

										System.err.println(errormessage_tDBOutput_2);

									}
								}
								conn_tDBOutput_2.commit();

								commitCounter_tDBOutput_2 = 0;
							}

							tos_count_tDBOutput_2++;

							/**
							 * [tDBOutput_2 main ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_end ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_end ] stop
							 */

							/**
							 * [tLogRow_2 process_data_end ] start
							 */

							currentComponent = "tLogRow_2";

							/**
							 * [tLogRow_2 process_data_end ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				conn_tDBOutput_2.commit();

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Date_Sinistre Date_SinistreClass = new Date_Sinistre();

		int exitCode = Date_SinistreClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Date_Sinistre.class.getClassLoader()
					.getResourceAsStream("ami_assurances/date_sinistre_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Date_Sinistre.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_2) {
			globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

			e_tDBInput_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Date_Sinistre");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 110860 characters generated by Talend Open Studio for Data Integration on the
 * 5 avril 2022 à 13:18:21 GMT+01:00
 ************************************************************************************************/