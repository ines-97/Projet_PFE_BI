// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package ami_assurances_1.table_prime2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: TAble_Prime2 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class TAble_Prime2 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "TAble_Prime2";
	private final String projectName = "AMI_ASSURANCES_1";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				TAble_Prime2.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(TAble_Prime2.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal NUMQUITT;

				public BigDecimal getNUMQUITT () {
					return this.NUMQUITT;
				}
				
			    public String NUMCNT;

				public String getNUMCNT () {
					return this.NUMCNT;
				}
				
			    public float NUMAVT;

				public float getNUMAVT () {
					return this.NUMAVT;
				}
				
			    public float NUMMAJ;

				public float getNUMMAJ () {
					return this.NUMMAJ;
				}
				
			    public String TYPEEMMIS;

				public String getTYPEEMMIS () {
					return this.TYPEEMMIS;
				}
				
			    public String CODPROD;

				public String getCODPROD () {
					return this.CODPROD;
				}
				
			    public String CODFORMU;

				public String getCODFORMU () {
					return this.CODFORMU;
				}
				
			    public String NATINT;

				public String getNATINT () {
					return this.NATINT;
				}
				
			    public float IDINT;

				public float getIDINT () {
					return this.IDINT;
				}
				
			    public String STATQUIT;

				public String getSTATQUIT () {
					return this.STATQUIT;
				}
				
			    public String STADECTX;

				public String getSTADECTX () {
					return this.STADECTX;
				}
				
			    public java.util.Date DATEEMISS;

				public java.util.Date getDATEEMISS () {
					return this.DATEEMISS;
				}
				
			    public java.util.Date DATEANNUL;

				public java.util.Date getDATEANNUL () {
					return this.DATEANNUL;
				}
				
			    public float MNTPRNET;

				public float getMNTPRNET () {
					return this.MNTPRNET;
				}
				
			    public float MNTPRGRNT;

				public float getMNTPRGRNT () {
					return this.MNTPRGRNT;
				}
				
			    public float MNTPRASSI;

				public float getMNTPRASSI () {
					return this.MNTPRASSI;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NUMQUITT == null) ? 0 : this.NUMQUITT.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.NUMQUITT == null) {
							if (other.NUMQUITT != null)
								return false;
						
						} else if (!this.NUMQUITT.equals(other.NUMQUITT))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.NUMQUITT = this.NUMQUITT;
	            other.NUMCNT = this.NUMCNT;
	            other.NUMAVT = this.NUMAVT;
	            other.NUMMAJ = this.NUMMAJ;
	            other.TYPEEMMIS = this.TYPEEMMIS;
	            other.CODPROD = this.CODPROD;
	            other.CODFORMU = this.CODFORMU;
	            other.NATINT = this.NATINT;
	            other.IDINT = this.IDINT;
	            other.STATQUIT = this.STATQUIT;
	            other.STADECTX = this.STADECTX;
	            other.DATEEMISS = this.DATEEMISS;
	            other.DATEANNUL = this.DATEANNUL;
	            other.MNTPRNET = this.MNTPRNET;
	            other.MNTPRGRNT = this.MNTPRGRNT;
	            other.MNTPRASSI = this.MNTPRASSI;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.NUMQUITT = this.NUMQUITT;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_TAble_Prime2.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_TAble_Prime2.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_TAble_Prime2, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_TAble_Prime2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2) {

        	try {

        		int length = 0;
		
						this.NUMQUITT = (BigDecimal) dis.readObject();
					
					this.NUMCNT = readString(dis);
					
			        this.NUMAVT = dis.readFloat();
					
			        this.NUMMAJ = dis.readFloat();
					
					this.TYPEEMMIS = readString(dis);
					
					this.CODPROD = readString(dis);
					
					this.CODFORMU = readString(dis);
					
					this.NATINT = readString(dis);
					
			        this.IDINT = dis.readFloat();
					
					this.STATQUIT = readString(dis);
					
					this.STADECTX = readString(dis);
					
					this.DATEEMISS = readDate(dis);
					
					this.DATEANNUL = readDate(dis);
					
			        this.MNTPRNET = dis.readFloat();
					
			        this.MNTPRGRNT = dis.readFloat();
					
			        this.MNTPRASSI = dis.readFloat();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.NUMQUITT);
					
					// String
				
						writeString(this.NUMCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.NUMAVT);
					
					// float
				
		            	dos.writeFloat(this.NUMMAJ);
					
					// String
				
						writeString(this.TYPEEMMIS,dos);
					
					// String
				
						writeString(this.CODPROD,dos);
					
					// String
				
						writeString(this.CODFORMU,dos);
					
					// String
				
						writeString(this.NATINT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDINT);
					
					// String
				
						writeString(this.STATQUIT,dos);
					
					// String
				
						writeString(this.STADECTX,dos);
					
					// java.util.Date
				
						writeDate(this.DATEEMISS,dos);
					
					// java.util.Date
				
						writeDate(this.DATEANNUL,dos);
					
					// float
				
		            	dos.writeFloat(this.MNTPRNET);
					
					// float
				
		            	dos.writeFloat(this.MNTPRGRNT);
					
					// float
				
		            	dos.writeFloat(this.MNTPRASSI);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMQUITT="+String.valueOf(NUMQUITT));
		sb.append(",NUMCNT="+NUMCNT);
		sb.append(",NUMAVT="+String.valueOf(NUMAVT));
		sb.append(",NUMMAJ="+String.valueOf(NUMMAJ));
		sb.append(",TYPEEMMIS="+TYPEEMMIS);
		sb.append(",CODPROD="+CODPROD);
		sb.append(",CODFORMU="+CODFORMU);
		sb.append(",NATINT="+NATINT);
		sb.append(",IDINT="+String.valueOf(IDINT));
		sb.append(",STATQUIT="+STATQUIT);
		sb.append(",STADECTX="+STADECTX);
		sb.append(",DATEEMISS="+String.valueOf(DATEEMISS));
		sb.append(",DATEANNUL="+String.valueOf(DATEANNUL));
		sb.append(",MNTPRNET="+String.valueOf(MNTPRNET));
		sb.append(",MNTPRGRNT="+String.valueOf(MNTPRGRNT));
		sb.append(",MNTPRASSI="+String.valueOf(MNTPRASSI));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NUMQUITT, other.NUMQUITT);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];

	
			    public BigDecimal NUMQUITT;

				public BigDecimal getNUMQUITT () {
					return this.NUMQUITT;
				}
				
			    public String NUMCNT;

				public String getNUMCNT () {
					return this.NUMCNT;
				}
				
			    public float NUMAVT;

				public float getNUMAVT () {
					return this.NUMAVT;
				}
				
			    public float NUMMAJ;

				public float getNUMMAJ () {
					return this.NUMMAJ;
				}
				
			    public String CODORSYS;

				public String getCODORSYS () {
					return this.CODORSYS;
				}
				
			    public float DATECREA;

				public float getDATECREA () {
					return this.DATECREA;
				}
				
			    public String TYPEEMMIS;

				public String getTYPEEMMIS () {
					return this.TYPEEMMIS;
				}
				
			    public String CODAVT;

				public String getCODAVT () {
					return this.CODAVT;
				}
				
			    public String CODFAM;

				public String getCODFAM () {
					return this.CODFAM;
				}
				
			    public String CODPROD;

				public String getCODPROD () {
					return this.CODPROD;
				}
				
			    public String CODFORMU;

				public String getCODFORMU () {
					return this.CODFORMU;
				}
				
			    public String CODEDEVIS;

				public String getCODEDEVIS () {
					return this.CODEDEVIS;
				}
				
			    public float ECHANNIV;

				public float getECHANNIV () {
					return this.ECHANNIV;
				}
				
			    public String FRACT;

				public String getFRACT () {
					return this.FRACT;
				}
				
			    public String NATCLT;

				public String getNATCLT () {
					return this.NATCLT;
				}
				
			    public float IDCLT;

				public float getIDCLT () {
					return this.IDCLT;
				}
				
			    public String NOMREDCL;

				public String getNOMREDCL () {
					return this.NOMREDCL;
				}
				
			    public float ADRCORES;

				public float getADRCORES () {
					return this.ADRCORES;
				}
				
			    public String NATINT;

				public String getNATINT () {
					return this.NATINT;
				}
				
			    public float IDINT;

				public float getIDINT () {
					return this.IDINT;
				}
				
			    public float IDDELEGA;

				public float getIDDELEGA () {
					return this.IDDELEGA;
				}
				
			    public String CODECONFI;

				public String getCODECONFI () {
					return this.CODECONFI;
				}
				
			    public String CODECOASS;

				public String getCODECOASS () {
					return this.CODECOASS;
				}
				
			    public String CODEREASS;

				public String getCODEREASS () {
					return this.CODEREASS;
				}
				
			    public String STATQUIT;

				public String getSTATQUIT () {
					return this.STATQUIT;
				}
				
			    public String STADECTX;

				public String getSTADECTX () {
					return this.STADECTX;
				}
				
			    public String DATEEMISS;

				public String getDATEEMISS () {
					return this.DATEEMISS;
				}
				
			    public float DEBEFFQUI;

				public float getDEBEFFQUI () {
					return this.DEBEFFQUI;
				}
				
			    public float FINEFFQUI;

				public float getFINEFFQUI () {
					return this.FINEFFQUI;
				}
				
			    public String DATEANNUL;

				public String getDATEANNUL () {
					return this.DATEANNUL;
				}
				
			    public float DATEPAIEM;

				public float getDATEPAIEM () {
					return this.DATEPAIEM;
				}
				
			    public String MOTIFANNU;

				public String getMOTIFANNU () {
					return this.MOTIFANNU;
				}
				
			    public float MNTPRNET;

				public float getMNTPRNET () {
					return this.MNTPRNET;
				}
				
			    public float MNTACCESS;

				public float getMNTACCESS () {
					return this.MNTACCESS;
				}
				
			    public float MNTFRAPPE;

				public float getMNTFRAPPE () {
					return this.MNTFRAPPE;
				}
				
			    public float MNTPRASSI;

				public float getMNTPRASSI () {
					return this.MNTPRASSI;
				}
				
			    public float MNTCOMMIS;

				public float getMNTCOMMIS () {
					return this.MNTCOMMIS;
				}
				
			    public float MNTTAXE;

				public float getMNTTAXE () {
					return this.MNTTAXE;
				}
				
			    public float TTCOMPTAX;

				public float getTTCOMPTAX () {
					return this.TTCOMPTAX;
				}
				
			    public float COMPTAXE1;

				public float getCOMPTAXE1 () {
					return this.COMPTAXE1;
				}
				
			    public float COMPTAXE2;

				public float getCOMPTAXE2 () {
					return this.COMPTAXE2;
				}
				
			    public float COMPTAXE3;

				public float getCOMPTAXE3 () {
					return this.COMPTAXE3;
				}
				
			    public float MNTPRIMET;

				public float getMNTPRIMET () {
					return this.MNTPRIMET;
				}
				
			    public float MNTNETREG;

				public float getMNTNETREG () {
					return this.MNTNETREG;
				}
				
			    public float MNTACOMPT;

				public float getMNTACOMPT () {
					return this.MNTACOMPT;
				}
				
			    public float MNTCOMPAY;

				public float getMNTCOMPAY () {
					return this.MNTCOMPAY;
				}
				
			    public float DATEPREVE;

				public float getDATEPREVE () {
					return this.DATEPREVE;
				}
				
			    public String INDPOLY;

				public String getINDPOLY () {
					return this.INDPOLY;
				}
				
			    public String INSERTFC;

				public String getINSERTFC () {
					return this.INSERTFC;
				}
				
			    public String GESTIONAI;

				public String getGESTIONAI () {
					return this.GESTIONAI;
				}
				
			    public String GESTANNUL;

				public String getGESTANNUL () {
					return this.GESTANNUL;
				}
				
			    public float MNTPRGRNT;

				public float getMNTPRGRNT () {
					return this.MNTPRGRNT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_TAble_Prime2.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_TAble_Prime2.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_TAble_Prime2, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_TAble_Prime2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2) {

        	try {

        		int length = 0;
		
						this.NUMQUITT = (BigDecimal) dis.readObject();
					
					this.NUMCNT = readString(dis);
					
			        this.NUMAVT = dis.readFloat();
					
			        this.NUMMAJ = dis.readFloat();
					
					this.CODORSYS = readString(dis);
					
			        this.DATECREA = dis.readFloat();
					
					this.TYPEEMMIS = readString(dis);
					
					this.CODAVT = readString(dis);
					
					this.CODFAM = readString(dis);
					
					this.CODPROD = readString(dis);
					
					this.CODFORMU = readString(dis);
					
					this.CODEDEVIS = readString(dis);
					
			        this.ECHANNIV = dis.readFloat();
					
					this.FRACT = readString(dis);
					
					this.NATCLT = readString(dis);
					
			        this.IDCLT = dis.readFloat();
					
					this.NOMREDCL = readString(dis);
					
			        this.ADRCORES = dis.readFloat();
					
					this.NATINT = readString(dis);
					
			        this.IDINT = dis.readFloat();
					
			        this.IDDELEGA = dis.readFloat();
					
					this.CODECONFI = readString(dis);
					
					this.CODECOASS = readString(dis);
					
					this.CODEREASS = readString(dis);
					
					this.STATQUIT = readString(dis);
					
					this.STADECTX = readString(dis);
					
					this.DATEEMISS = readString(dis);
					
			        this.DEBEFFQUI = dis.readFloat();
					
			        this.FINEFFQUI = dis.readFloat();
					
					this.DATEANNUL = readString(dis);
					
			        this.DATEPAIEM = dis.readFloat();
					
					this.MOTIFANNU = readString(dis);
					
			        this.MNTPRNET = dis.readFloat();
					
			        this.MNTACCESS = dis.readFloat();
					
			        this.MNTFRAPPE = dis.readFloat();
					
			        this.MNTPRASSI = dis.readFloat();
					
			        this.MNTCOMMIS = dis.readFloat();
					
			        this.MNTTAXE = dis.readFloat();
					
			        this.TTCOMPTAX = dis.readFloat();
					
			        this.COMPTAXE1 = dis.readFloat();
					
			        this.COMPTAXE2 = dis.readFloat();
					
			        this.COMPTAXE3 = dis.readFloat();
					
			        this.MNTPRIMET = dis.readFloat();
					
			        this.MNTNETREG = dis.readFloat();
					
			        this.MNTACOMPT = dis.readFloat();
					
			        this.MNTCOMPAY = dis.readFloat();
					
			        this.DATEPREVE = dis.readFloat();
					
					this.INDPOLY = readString(dis);
					
					this.INSERTFC = readString(dis);
					
					this.GESTIONAI = readString(dis);
					
					this.GESTANNUL = readString(dis);
					
			        this.MNTPRGRNT = dis.readFloat();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.NUMQUITT);
					
					// String
				
						writeString(this.NUMCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.NUMAVT);
					
					// float
				
		            	dos.writeFloat(this.NUMMAJ);
					
					// String
				
						writeString(this.CODORSYS,dos);
					
					// float
				
		            	dos.writeFloat(this.DATECREA);
					
					// String
				
						writeString(this.TYPEEMMIS,dos);
					
					// String
				
						writeString(this.CODAVT,dos);
					
					// String
				
						writeString(this.CODFAM,dos);
					
					// String
				
						writeString(this.CODPROD,dos);
					
					// String
				
						writeString(this.CODFORMU,dos);
					
					// String
				
						writeString(this.CODEDEVIS,dos);
					
					// float
				
		            	dos.writeFloat(this.ECHANNIV);
					
					// String
				
						writeString(this.FRACT,dos);
					
					// String
				
						writeString(this.NATCLT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDCLT);
					
					// String
				
						writeString(this.NOMREDCL,dos);
					
					// float
				
		            	dos.writeFloat(this.ADRCORES);
					
					// String
				
						writeString(this.NATINT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDINT);
					
					// float
				
		            	dos.writeFloat(this.IDDELEGA);
					
					// String
				
						writeString(this.CODECONFI,dos);
					
					// String
				
						writeString(this.CODECOASS,dos);
					
					// String
				
						writeString(this.CODEREASS,dos);
					
					// String
				
						writeString(this.STATQUIT,dos);
					
					// String
				
						writeString(this.STADECTX,dos);
					
					// String
				
						writeString(this.DATEEMISS,dos);
					
					// float
				
		            	dos.writeFloat(this.DEBEFFQUI);
					
					// float
				
		            	dos.writeFloat(this.FINEFFQUI);
					
					// String
				
						writeString(this.DATEANNUL,dos);
					
					// float
				
		            	dos.writeFloat(this.DATEPAIEM);
					
					// String
				
						writeString(this.MOTIFANNU,dos);
					
					// float
				
		            	dos.writeFloat(this.MNTPRNET);
					
					// float
				
		            	dos.writeFloat(this.MNTACCESS);
					
					// float
				
		            	dos.writeFloat(this.MNTFRAPPE);
					
					// float
				
		            	dos.writeFloat(this.MNTPRASSI);
					
					// float
				
		            	dos.writeFloat(this.MNTCOMMIS);
					
					// float
				
		            	dos.writeFloat(this.MNTTAXE);
					
					// float
				
		            	dos.writeFloat(this.TTCOMPTAX);
					
					// float
				
		            	dos.writeFloat(this.COMPTAXE1);
					
					// float
				
		            	dos.writeFloat(this.COMPTAXE2);
					
					// float
				
		            	dos.writeFloat(this.COMPTAXE3);
					
					// float
				
		            	dos.writeFloat(this.MNTPRIMET);
					
					// float
				
		            	dos.writeFloat(this.MNTNETREG);
					
					// float
				
		            	dos.writeFloat(this.MNTACOMPT);
					
					// float
				
		            	dos.writeFloat(this.MNTCOMPAY);
					
					// float
				
		            	dos.writeFloat(this.DATEPREVE);
					
					// String
				
						writeString(this.INDPOLY,dos);
					
					// String
				
						writeString(this.INSERTFC,dos);
					
					// String
				
						writeString(this.GESTIONAI,dos);
					
					// String
				
						writeString(this.GESTANNUL,dos);
					
					// float
				
		            	dos.writeFloat(this.MNTPRGRNT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMQUITT="+String.valueOf(NUMQUITT));
		sb.append(",NUMCNT="+NUMCNT);
		sb.append(",NUMAVT="+String.valueOf(NUMAVT));
		sb.append(",NUMMAJ="+String.valueOf(NUMMAJ));
		sb.append(",CODORSYS="+CODORSYS);
		sb.append(",DATECREA="+String.valueOf(DATECREA));
		sb.append(",TYPEEMMIS="+TYPEEMMIS);
		sb.append(",CODAVT="+CODAVT);
		sb.append(",CODFAM="+CODFAM);
		sb.append(",CODPROD="+CODPROD);
		sb.append(",CODFORMU="+CODFORMU);
		sb.append(",CODEDEVIS="+CODEDEVIS);
		sb.append(",ECHANNIV="+String.valueOf(ECHANNIV));
		sb.append(",FRACT="+FRACT);
		sb.append(",NATCLT="+NATCLT);
		sb.append(",IDCLT="+String.valueOf(IDCLT));
		sb.append(",NOMREDCL="+NOMREDCL);
		sb.append(",ADRCORES="+String.valueOf(ADRCORES));
		sb.append(",NATINT="+NATINT);
		sb.append(",IDINT="+String.valueOf(IDINT));
		sb.append(",IDDELEGA="+String.valueOf(IDDELEGA));
		sb.append(",CODECONFI="+CODECONFI);
		sb.append(",CODECOASS="+CODECOASS);
		sb.append(",CODEREASS="+CODEREASS);
		sb.append(",STATQUIT="+STATQUIT);
		sb.append(",STADECTX="+STADECTX);
		sb.append(",DATEEMISS="+DATEEMISS);
		sb.append(",DEBEFFQUI="+String.valueOf(DEBEFFQUI));
		sb.append(",FINEFFQUI="+String.valueOf(FINEFFQUI));
		sb.append(",DATEANNUL="+DATEANNUL);
		sb.append(",DATEPAIEM="+String.valueOf(DATEPAIEM));
		sb.append(",MOTIFANNU="+MOTIFANNU);
		sb.append(",MNTPRNET="+String.valueOf(MNTPRNET));
		sb.append(",MNTACCESS="+String.valueOf(MNTACCESS));
		sb.append(",MNTFRAPPE="+String.valueOf(MNTFRAPPE));
		sb.append(",MNTPRASSI="+String.valueOf(MNTPRASSI));
		sb.append(",MNTCOMMIS="+String.valueOf(MNTCOMMIS));
		sb.append(",MNTTAXE="+String.valueOf(MNTTAXE));
		sb.append(",TTCOMPTAX="+String.valueOf(TTCOMPTAX));
		sb.append(",COMPTAXE1="+String.valueOf(COMPTAXE1));
		sb.append(",COMPTAXE2="+String.valueOf(COMPTAXE2));
		sb.append(",COMPTAXE3="+String.valueOf(COMPTAXE3));
		sb.append(",MNTPRIMET="+String.valueOf(MNTPRIMET));
		sb.append(",MNTNETREG="+String.valueOf(MNTNETREG));
		sb.append(",MNTACOMPT="+String.valueOf(MNTACOMPT));
		sb.append(",MNTCOMPAY="+String.valueOf(MNTCOMPAY));
		sb.append(",DATEPREVE="+String.valueOf(DATEPREVE));
		sb.append(",INDPOLY="+INDPOLY);
		sb.append(",INSERTFC="+INSERTFC);
		sb.append(",GESTIONAI="+GESTIONAI);
		sb.append(",GESTANNUL="+GESTANNUL);
		sb.append(",MNTPRGRNT="+String.valueOf(MNTPRGRNT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal NUMQUITT;

				public BigDecimal getNUMQUITT () {
					return this.NUMQUITT;
				}
				
			    public String NUMCNT;

				public String getNUMCNT () {
					return this.NUMCNT;
				}
				
			    public float NUMAVT;

				public float getNUMAVT () {
					return this.NUMAVT;
				}
				
			    public float NUMMAJ;

				public float getNUMMAJ () {
					return this.NUMMAJ;
				}
				
			    public String CODORSYS;

				public String getCODORSYS () {
					return this.CODORSYS;
				}
				
			    public float DATECREA;

				public float getDATECREA () {
					return this.DATECREA;
				}
				
			    public String TYPEEMMIS;

				public String getTYPEEMMIS () {
					return this.TYPEEMMIS;
				}
				
			    public String CODAVT;

				public String getCODAVT () {
					return this.CODAVT;
				}
				
			    public String CODFAM;

				public String getCODFAM () {
					return this.CODFAM;
				}
				
			    public String CODPROD;

				public String getCODPROD () {
					return this.CODPROD;
				}
				
			    public String CODFORMU;

				public String getCODFORMU () {
					return this.CODFORMU;
				}
				
			    public String CODEDEVIS;

				public String getCODEDEVIS () {
					return this.CODEDEVIS;
				}
				
			    public float ECHANNIV;

				public float getECHANNIV () {
					return this.ECHANNIV;
				}
				
			    public String FRACT;

				public String getFRACT () {
					return this.FRACT;
				}
				
			    public String NATCLT;

				public String getNATCLT () {
					return this.NATCLT;
				}
				
			    public float IDCLT;

				public float getIDCLT () {
					return this.IDCLT;
				}
				
			    public String NOMREDCL;

				public String getNOMREDCL () {
					return this.NOMREDCL;
				}
				
			    public float ADRCORES;

				public float getADRCORES () {
					return this.ADRCORES;
				}
				
			    public String NATINT;

				public String getNATINT () {
					return this.NATINT;
				}
				
			    public float IDINT;

				public float getIDINT () {
					return this.IDINT;
				}
				
			    public float IDDELEGA;

				public float getIDDELEGA () {
					return this.IDDELEGA;
				}
				
			    public String CODECONFI;

				public String getCODECONFI () {
					return this.CODECONFI;
				}
				
			    public String CODECOASS;

				public String getCODECOASS () {
					return this.CODECOASS;
				}
				
			    public String CODEREASS;

				public String getCODEREASS () {
					return this.CODEREASS;
				}
				
			    public String STATQUIT;

				public String getSTATQUIT () {
					return this.STATQUIT;
				}
				
			    public String STADECTX;

				public String getSTADECTX () {
					return this.STADECTX;
				}
				
			    public String DATEEMISS;

				public String getDATEEMISS () {
					return this.DATEEMISS;
				}
				
			    public float DEBEFFQUI;

				public float getDEBEFFQUI () {
					return this.DEBEFFQUI;
				}
				
			    public float FINEFFQUI;

				public float getFINEFFQUI () {
					return this.FINEFFQUI;
				}
				
			    public String DATEANNUL;

				public String getDATEANNUL () {
					return this.DATEANNUL;
				}
				
			    public float DATEPAIEM;

				public float getDATEPAIEM () {
					return this.DATEPAIEM;
				}
				
			    public String MOTIFANNU;

				public String getMOTIFANNU () {
					return this.MOTIFANNU;
				}
				
			    public float MNTPRNET;

				public float getMNTPRNET () {
					return this.MNTPRNET;
				}
				
			    public float MNTACCESS;

				public float getMNTACCESS () {
					return this.MNTACCESS;
				}
				
			    public float MNTFRAPPE;

				public float getMNTFRAPPE () {
					return this.MNTFRAPPE;
				}
				
			    public float MNTPRASSI;

				public float getMNTPRASSI () {
					return this.MNTPRASSI;
				}
				
			    public float MNTCOMMIS;

				public float getMNTCOMMIS () {
					return this.MNTCOMMIS;
				}
				
			    public float MNTTAXE;

				public float getMNTTAXE () {
					return this.MNTTAXE;
				}
				
			    public float TTCOMPTAX;

				public float getTTCOMPTAX () {
					return this.TTCOMPTAX;
				}
				
			    public float COMPTAXE1;

				public float getCOMPTAXE1 () {
					return this.COMPTAXE1;
				}
				
			    public float COMPTAXE2;

				public float getCOMPTAXE2 () {
					return this.COMPTAXE2;
				}
				
			    public float COMPTAXE3;

				public float getCOMPTAXE3 () {
					return this.COMPTAXE3;
				}
				
			    public float MNTPRIMET;

				public float getMNTPRIMET () {
					return this.MNTPRIMET;
				}
				
			    public float MNTNETREG;

				public float getMNTNETREG () {
					return this.MNTNETREG;
				}
				
			    public float MNTACOMPT;

				public float getMNTACOMPT () {
					return this.MNTACOMPT;
				}
				
			    public float MNTCOMPAY;

				public float getMNTCOMPAY () {
					return this.MNTCOMPAY;
				}
				
			    public float DATEPREVE;

				public float getDATEPREVE () {
					return this.DATEPREVE;
				}
				
			    public String INDPOLY;

				public String getINDPOLY () {
					return this.INDPOLY;
				}
				
			    public String INSERTFC;

				public String getINSERTFC () {
					return this.INSERTFC;
				}
				
			    public String GESTIONAI;

				public String getGESTIONAI () {
					return this.GESTIONAI;
				}
				
			    public String GESTANNUL;

				public String getGESTANNUL () {
					return this.GESTANNUL;
				}
				
			    public BigDecimal UPDATE_IDENT;

				public BigDecimal getUPDATE_IDENT () {
					return this.UPDATE_IDENT;
				}
				
			    public float MNTPRGRNT;

				public float getMNTPRGRNT () {
					return this.MNTPRGRNT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NUMQUITT == null) ? 0 : this.NUMQUITT.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.NUMQUITT == null) {
							if (other.NUMQUITT != null)
								return false;
						
						} else if (!this.NUMQUITT.equals(other.NUMQUITT))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.NUMQUITT = this.NUMQUITT;
	            other.NUMCNT = this.NUMCNT;
	            other.NUMAVT = this.NUMAVT;
	            other.NUMMAJ = this.NUMMAJ;
	            other.CODORSYS = this.CODORSYS;
	            other.DATECREA = this.DATECREA;
	            other.TYPEEMMIS = this.TYPEEMMIS;
	            other.CODAVT = this.CODAVT;
	            other.CODFAM = this.CODFAM;
	            other.CODPROD = this.CODPROD;
	            other.CODFORMU = this.CODFORMU;
	            other.CODEDEVIS = this.CODEDEVIS;
	            other.ECHANNIV = this.ECHANNIV;
	            other.FRACT = this.FRACT;
	            other.NATCLT = this.NATCLT;
	            other.IDCLT = this.IDCLT;
	            other.NOMREDCL = this.NOMREDCL;
	            other.ADRCORES = this.ADRCORES;
	            other.NATINT = this.NATINT;
	            other.IDINT = this.IDINT;
	            other.IDDELEGA = this.IDDELEGA;
	            other.CODECONFI = this.CODECONFI;
	            other.CODECOASS = this.CODECOASS;
	            other.CODEREASS = this.CODEREASS;
	            other.STATQUIT = this.STATQUIT;
	            other.STADECTX = this.STADECTX;
	            other.DATEEMISS = this.DATEEMISS;
	            other.DEBEFFQUI = this.DEBEFFQUI;
	            other.FINEFFQUI = this.FINEFFQUI;
	            other.DATEANNUL = this.DATEANNUL;
	            other.DATEPAIEM = this.DATEPAIEM;
	            other.MOTIFANNU = this.MOTIFANNU;
	            other.MNTPRNET = this.MNTPRNET;
	            other.MNTACCESS = this.MNTACCESS;
	            other.MNTFRAPPE = this.MNTFRAPPE;
	            other.MNTPRASSI = this.MNTPRASSI;
	            other.MNTCOMMIS = this.MNTCOMMIS;
	            other.MNTTAXE = this.MNTTAXE;
	            other.TTCOMPTAX = this.TTCOMPTAX;
	            other.COMPTAXE1 = this.COMPTAXE1;
	            other.COMPTAXE2 = this.COMPTAXE2;
	            other.COMPTAXE3 = this.COMPTAXE3;
	            other.MNTPRIMET = this.MNTPRIMET;
	            other.MNTNETREG = this.MNTNETREG;
	            other.MNTACOMPT = this.MNTACOMPT;
	            other.MNTCOMPAY = this.MNTCOMPAY;
	            other.DATEPREVE = this.DATEPREVE;
	            other.INDPOLY = this.INDPOLY;
	            other.INSERTFC = this.INSERTFC;
	            other.GESTIONAI = this.GESTIONAI;
	            other.GESTANNUL = this.GESTANNUL;
	            other.UPDATE_IDENT = this.UPDATE_IDENT;
	            other.MNTPRGRNT = this.MNTPRGRNT;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.NUMQUITT = this.NUMQUITT;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_TAble_Prime2.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_TAble_Prime2.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_TAble_Prime2, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_TAble_Prime2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2) {

        	try {

        		int length = 0;
		
						this.NUMQUITT = (BigDecimal) dis.readObject();
					
					this.NUMCNT = readString(dis);
					
			        this.NUMAVT = dis.readFloat();
					
			        this.NUMMAJ = dis.readFloat();
					
					this.CODORSYS = readString(dis);
					
			        this.DATECREA = dis.readFloat();
					
					this.TYPEEMMIS = readString(dis);
					
					this.CODAVT = readString(dis);
					
					this.CODFAM = readString(dis);
					
					this.CODPROD = readString(dis);
					
					this.CODFORMU = readString(dis);
					
					this.CODEDEVIS = readString(dis);
					
			        this.ECHANNIV = dis.readFloat();
					
					this.FRACT = readString(dis);
					
					this.NATCLT = readString(dis);
					
			        this.IDCLT = dis.readFloat();
					
					this.NOMREDCL = readString(dis);
					
			        this.ADRCORES = dis.readFloat();
					
					this.NATINT = readString(dis);
					
			        this.IDINT = dis.readFloat();
					
			        this.IDDELEGA = dis.readFloat();
					
					this.CODECONFI = readString(dis);
					
					this.CODECOASS = readString(dis);
					
					this.CODEREASS = readString(dis);
					
					this.STATQUIT = readString(dis);
					
					this.STADECTX = readString(dis);
					
					this.DATEEMISS = readString(dis);
					
			        this.DEBEFFQUI = dis.readFloat();
					
			        this.FINEFFQUI = dis.readFloat();
					
					this.DATEANNUL = readString(dis);
					
			        this.DATEPAIEM = dis.readFloat();
					
					this.MOTIFANNU = readString(dis);
					
			        this.MNTPRNET = dis.readFloat();
					
			        this.MNTACCESS = dis.readFloat();
					
			        this.MNTFRAPPE = dis.readFloat();
					
			        this.MNTPRASSI = dis.readFloat();
					
			        this.MNTCOMMIS = dis.readFloat();
					
			        this.MNTTAXE = dis.readFloat();
					
			        this.TTCOMPTAX = dis.readFloat();
					
			        this.COMPTAXE1 = dis.readFloat();
					
			        this.COMPTAXE2 = dis.readFloat();
					
			        this.COMPTAXE3 = dis.readFloat();
					
			        this.MNTPRIMET = dis.readFloat();
					
			        this.MNTNETREG = dis.readFloat();
					
			        this.MNTACOMPT = dis.readFloat();
					
			        this.MNTCOMPAY = dis.readFloat();
					
			        this.DATEPREVE = dis.readFloat();
					
					this.INDPOLY = readString(dis);
					
					this.INSERTFC = readString(dis);
					
					this.GESTIONAI = readString(dis);
					
					this.GESTANNUL = readString(dis);
					
						this.UPDATE_IDENT = (BigDecimal) dis.readObject();
					
			        this.MNTPRGRNT = dis.readFloat();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.NUMQUITT);
					
					// String
				
						writeString(this.NUMCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.NUMAVT);
					
					// float
				
		            	dos.writeFloat(this.NUMMAJ);
					
					// String
				
						writeString(this.CODORSYS,dos);
					
					// float
				
		            	dos.writeFloat(this.DATECREA);
					
					// String
				
						writeString(this.TYPEEMMIS,dos);
					
					// String
				
						writeString(this.CODAVT,dos);
					
					// String
				
						writeString(this.CODFAM,dos);
					
					// String
				
						writeString(this.CODPROD,dos);
					
					// String
				
						writeString(this.CODFORMU,dos);
					
					// String
				
						writeString(this.CODEDEVIS,dos);
					
					// float
				
		            	dos.writeFloat(this.ECHANNIV);
					
					// String
				
						writeString(this.FRACT,dos);
					
					// String
				
						writeString(this.NATCLT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDCLT);
					
					// String
				
						writeString(this.NOMREDCL,dos);
					
					// float
				
		            	dos.writeFloat(this.ADRCORES);
					
					// String
				
						writeString(this.NATINT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDINT);
					
					// float
				
		            	dos.writeFloat(this.IDDELEGA);
					
					// String
				
						writeString(this.CODECONFI,dos);
					
					// String
				
						writeString(this.CODECOASS,dos);
					
					// String
				
						writeString(this.CODEREASS,dos);
					
					// String
				
						writeString(this.STATQUIT,dos);
					
					// String
				
						writeString(this.STADECTX,dos);
					
					// String
				
						writeString(this.DATEEMISS,dos);
					
					// float
				
		            	dos.writeFloat(this.DEBEFFQUI);
					
					// float
				
		            	dos.writeFloat(this.FINEFFQUI);
					
					// String
				
						writeString(this.DATEANNUL,dos);
					
					// float
				
		            	dos.writeFloat(this.DATEPAIEM);
					
					// String
				
						writeString(this.MOTIFANNU,dos);
					
					// float
				
		            	dos.writeFloat(this.MNTPRNET);
					
					// float
				
		            	dos.writeFloat(this.MNTACCESS);
					
					// float
				
		            	dos.writeFloat(this.MNTFRAPPE);
					
					// float
				
		            	dos.writeFloat(this.MNTPRASSI);
					
					// float
				
		            	dos.writeFloat(this.MNTCOMMIS);
					
					// float
				
		            	dos.writeFloat(this.MNTTAXE);
					
					// float
				
		            	dos.writeFloat(this.TTCOMPTAX);
					
					// float
				
		            	dos.writeFloat(this.COMPTAXE1);
					
					// float
				
		            	dos.writeFloat(this.COMPTAXE2);
					
					// float
				
		            	dos.writeFloat(this.COMPTAXE3);
					
					// float
				
		            	dos.writeFloat(this.MNTPRIMET);
					
					// float
				
		            	dos.writeFloat(this.MNTNETREG);
					
					// float
				
		            	dos.writeFloat(this.MNTACOMPT);
					
					// float
				
		            	dos.writeFloat(this.MNTCOMPAY);
					
					// float
				
		            	dos.writeFloat(this.DATEPREVE);
					
					// String
				
						writeString(this.INDPOLY,dos);
					
					// String
				
						writeString(this.INSERTFC,dos);
					
					// String
				
						writeString(this.GESTIONAI,dos);
					
					// String
				
						writeString(this.GESTANNUL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UPDATE_IDENT);
					
					// float
				
		            	dos.writeFloat(this.MNTPRGRNT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMQUITT="+String.valueOf(NUMQUITT));
		sb.append(",NUMCNT="+NUMCNT);
		sb.append(",NUMAVT="+String.valueOf(NUMAVT));
		sb.append(",NUMMAJ="+String.valueOf(NUMMAJ));
		sb.append(",CODORSYS="+CODORSYS);
		sb.append(",DATECREA="+String.valueOf(DATECREA));
		sb.append(",TYPEEMMIS="+TYPEEMMIS);
		sb.append(",CODAVT="+CODAVT);
		sb.append(",CODFAM="+CODFAM);
		sb.append(",CODPROD="+CODPROD);
		sb.append(",CODFORMU="+CODFORMU);
		sb.append(",CODEDEVIS="+CODEDEVIS);
		sb.append(",ECHANNIV="+String.valueOf(ECHANNIV));
		sb.append(",FRACT="+FRACT);
		sb.append(",NATCLT="+NATCLT);
		sb.append(",IDCLT="+String.valueOf(IDCLT));
		sb.append(",NOMREDCL="+NOMREDCL);
		sb.append(",ADRCORES="+String.valueOf(ADRCORES));
		sb.append(",NATINT="+NATINT);
		sb.append(",IDINT="+String.valueOf(IDINT));
		sb.append(",IDDELEGA="+String.valueOf(IDDELEGA));
		sb.append(",CODECONFI="+CODECONFI);
		sb.append(",CODECOASS="+CODECOASS);
		sb.append(",CODEREASS="+CODEREASS);
		sb.append(",STATQUIT="+STATQUIT);
		sb.append(",STADECTX="+STADECTX);
		sb.append(",DATEEMISS="+DATEEMISS);
		sb.append(",DEBEFFQUI="+String.valueOf(DEBEFFQUI));
		sb.append(",FINEFFQUI="+String.valueOf(FINEFFQUI));
		sb.append(",DATEANNUL="+DATEANNUL);
		sb.append(",DATEPAIEM="+String.valueOf(DATEPAIEM));
		sb.append(",MOTIFANNU="+MOTIFANNU);
		sb.append(",MNTPRNET="+String.valueOf(MNTPRNET));
		sb.append(",MNTACCESS="+String.valueOf(MNTACCESS));
		sb.append(",MNTFRAPPE="+String.valueOf(MNTFRAPPE));
		sb.append(",MNTPRASSI="+String.valueOf(MNTPRASSI));
		sb.append(",MNTCOMMIS="+String.valueOf(MNTCOMMIS));
		sb.append(",MNTTAXE="+String.valueOf(MNTTAXE));
		sb.append(",TTCOMPTAX="+String.valueOf(TTCOMPTAX));
		sb.append(",COMPTAXE1="+String.valueOf(COMPTAXE1));
		sb.append(",COMPTAXE2="+String.valueOf(COMPTAXE2));
		sb.append(",COMPTAXE3="+String.valueOf(COMPTAXE3));
		sb.append(",MNTPRIMET="+String.valueOf(MNTPRIMET));
		sb.append(",MNTNETREG="+String.valueOf(MNTNETREG));
		sb.append(",MNTACOMPT="+String.valueOf(MNTACOMPT));
		sb.append(",MNTCOMPAY="+String.valueOf(MNTCOMPAY));
		sb.append(",DATEPREVE="+String.valueOf(DATEPREVE));
		sb.append(",INDPOLY="+INDPOLY);
		sb.append(",INSERTFC="+INSERTFC);
		sb.append(",GESTIONAI="+GESTIONAI);
		sb.append(",GESTANNUL="+GESTANNUL);
		sb.append(",UPDATE_IDENT="+String.valueOf(UPDATE_IDENT));
		sb.append(",MNTPRGRNT="+String.valueOf(MNTPRGRNT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NUMQUITT, other.NUMQUITT);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal NUMQUITT;

				public BigDecimal getNUMQUITT () {
					return this.NUMQUITT;
				}
				
			    public String NUMCNT;

				public String getNUMCNT () {
					return this.NUMCNT;
				}
				
			    public float NUMAVT;

				public float getNUMAVT () {
					return this.NUMAVT;
				}
				
			    public float NUMMAJ;

				public float getNUMMAJ () {
					return this.NUMMAJ;
				}
				
			    public String CODORSYS;

				public String getCODORSYS () {
					return this.CODORSYS;
				}
				
			    public float DATECREA;

				public float getDATECREA () {
					return this.DATECREA;
				}
				
			    public String TYPEEMMIS;

				public String getTYPEEMMIS () {
					return this.TYPEEMMIS;
				}
				
			    public String CODAVT;

				public String getCODAVT () {
					return this.CODAVT;
				}
				
			    public String CODFAM;

				public String getCODFAM () {
					return this.CODFAM;
				}
				
			    public String CODPROD;

				public String getCODPROD () {
					return this.CODPROD;
				}
				
			    public String CODFORMU;

				public String getCODFORMU () {
					return this.CODFORMU;
				}
				
			    public String CODEDEVIS;

				public String getCODEDEVIS () {
					return this.CODEDEVIS;
				}
				
			    public float ECHANNIV;

				public float getECHANNIV () {
					return this.ECHANNIV;
				}
				
			    public String FRACT;

				public String getFRACT () {
					return this.FRACT;
				}
				
			    public String NATCLT;

				public String getNATCLT () {
					return this.NATCLT;
				}
				
			    public float IDCLT;

				public float getIDCLT () {
					return this.IDCLT;
				}
				
			    public String NOMREDCL;

				public String getNOMREDCL () {
					return this.NOMREDCL;
				}
				
			    public float ADRCORES;

				public float getADRCORES () {
					return this.ADRCORES;
				}
				
			    public String NATINT;

				public String getNATINT () {
					return this.NATINT;
				}
				
			    public float IDINT;

				public float getIDINT () {
					return this.IDINT;
				}
				
			    public float IDDELEGA;

				public float getIDDELEGA () {
					return this.IDDELEGA;
				}
				
			    public String CODECONFI;

				public String getCODECONFI () {
					return this.CODECONFI;
				}
				
			    public String CODECOASS;

				public String getCODECOASS () {
					return this.CODECOASS;
				}
				
			    public String CODEREASS;

				public String getCODEREASS () {
					return this.CODEREASS;
				}
				
			    public String STATQUIT;

				public String getSTATQUIT () {
					return this.STATQUIT;
				}
				
			    public String STADECTX;

				public String getSTADECTX () {
					return this.STADECTX;
				}
				
			    public String DATEEMISS;

				public String getDATEEMISS () {
					return this.DATEEMISS;
				}
				
			    public float DEBEFFQUI;

				public float getDEBEFFQUI () {
					return this.DEBEFFQUI;
				}
				
			    public float FINEFFQUI;

				public float getFINEFFQUI () {
					return this.FINEFFQUI;
				}
				
			    public String DATEANNUL;

				public String getDATEANNUL () {
					return this.DATEANNUL;
				}
				
			    public float DATEPAIEM;

				public float getDATEPAIEM () {
					return this.DATEPAIEM;
				}
				
			    public String MOTIFANNU;

				public String getMOTIFANNU () {
					return this.MOTIFANNU;
				}
				
			    public float MNTPRNET;

				public float getMNTPRNET () {
					return this.MNTPRNET;
				}
				
			    public float MNTACCESS;

				public float getMNTACCESS () {
					return this.MNTACCESS;
				}
				
			    public float MNTFRAPPE;

				public float getMNTFRAPPE () {
					return this.MNTFRAPPE;
				}
				
			    public float MNTPRASSI;

				public float getMNTPRASSI () {
					return this.MNTPRASSI;
				}
				
			    public float MNTCOMMIS;

				public float getMNTCOMMIS () {
					return this.MNTCOMMIS;
				}
				
			    public float MNTTAXE;

				public float getMNTTAXE () {
					return this.MNTTAXE;
				}
				
			    public float TTCOMPTAX;

				public float getTTCOMPTAX () {
					return this.TTCOMPTAX;
				}
				
			    public float COMPTAXE1;

				public float getCOMPTAXE1 () {
					return this.COMPTAXE1;
				}
				
			    public float COMPTAXE2;

				public float getCOMPTAXE2 () {
					return this.COMPTAXE2;
				}
				
			    public float COMPTAXE3;

				public float getCOMPTAXE3 () {
					return this.COMPTAXE3;
				}
				
			    public float MNTPRIMET;

				public float getMNTPRIMET () {
					return this.MNTPRIMET;
				}
				
			    public float MNTNETREG;

				public float getMNTNETREG () {
					return this.MNTNETREG;
				}
				
			    public float MNTACOMPT;

				public float getMNTACOMPT () {
					return this.MNTACOMPT;
				}
				
			    public float MNTCOMPAY;

				public float getMNTCOMPAY () {
					return this.MNTCOMPAY;
				}
				
			    public float DATEPREVE;

				public float getDATEPREVE () {
					return this.DATEPREVE;
				}
				
			    public String INDPOLY;

				public String getINDPOLY () {
					return this.INDPOLY;
				}
				
			    public String INSERTFC;

				public String getINSERTFC () {
					return this.INSERTFC;
				}
				
			    public String GESTIONAI;

				public String getGESTIONAI () {
					return this.GESTIONAI;
				}
				
			    public String GESTANNUL;

				public String getGESTANNUL () {
					return this.GESTANNUL;
				}
				
			    public BigDecimal UPDATE_IDENT;

				public BigDecimal getUPDATE_IDENT () {
					return this.UPDATE_IDENT;
				}
				
			    public float MNTPRGRNT;

				public float getMNTPRGRNT () {
					return this.MNTPRGRNT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NUMQUITT == null) ? 0 : this.NUMQUITT.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_2Struct other = (after_tDBInput_2Struct) obj;
		
						if (this.NUMQUITT == null) {
							if (other.NUMQUITT != null)
								return false;
						
						} else if (!this.NUMQUITT.equals(other.NUMQUITT))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_2Struct other) {

		other.NUMQUITT = this.NUMQUITT;
	            other.NUMCNT = this.NUMCNT;
	            other.NUMAVT = this.NUMAVT;
	            other.NUMMAJ = this.NUMMAJ;
	            other.CODORSYS = this.CODORSYS;
	            other.DATECREA = this.DATECREA;
	            other.TYPEEMMIS = this.TYPEEMMIS;
	            other.CODAVT = this.CODAVT;
	            other.CODFAM = this.CODFAM;
	            other.CODPROD = this.CODPROD;
	            other.CODFORMU = this.CODFORMU;
	            other.CODEDEVIS = this.CODEDEVIS;
	            other.ECHANNIV = this.ECHANNIV;
	            other.FRACT = this.FRACT;
	            other.NATCLT = this.NATCLT;
	            other.IDCLT = this.IDCLT;
	            other.NOMREDCL = this.NOMREDCL;
	            other.ADRCORES = this.ADRCORES;
	            other.NATINT = this.NATINT;
	            other.IDINT = this.IDINT;
	            other.IDDELEGA = this.IDDELEGA;
	            other.CODECONFI = this.CODECONFI;
	            other.CODECOASS = this.CODECOASS;
	            other.CODEREASS = this.CODEREASS;
	            other.STATQUIT = this.STATQUIT;
	            other.STADECTX = this.STADECTX;
	            other.DATEEMISS = this.DATEEMISS;
	            other.DEBEFFQUI = this.DEBEFFQUI;
	            other.FINEFFQUI = this.FINEFFQUI;
	            other.DATEANNUL = this.DATEANNUL;
	            other.DATEPAIEM = this.DATEPAIEM;
	            other.MOTIFANNU = this.MOTIFANNU;
	            other.MNTPRNET = this.MNTPRNET;
	            other.MNTACCESS = this.MNTACCESS;
	            other.MNTFRAPPE = this.MNTFRAPPE;
	            other.MNTPRASSI = this.MNTPRASSI;
	            other.MNTCOMMIS = this.MNTCOMMIS;
	            other.MNTTAXE = this.MNTTAXE;
	            other.TTCOMPTAX = this.TTCOMPTAX;
	            other.COMPTAXE1 = this.COMPTAXE1;
	            other.COMPTAXE2 = this.COMPTAXE2;
	            other.COMPTAXE3 = this.COMPTAXE3;
	            other.MNTPRIMET = this.MNTPRIMET;
	            other.MNTNETREG = this.MNTNETREG;
	            other.MNTACOMPT = this.MNTACOMPT;
	            other.MNTCOMPAY = this.MNTCOMPAY;
	            other.DATEPREVE = this.DATEPREVE;
	            other.INDPOLY = this.INDPOLY;
	            other.INSERTFC = this.INSERTFC;
	            other.GESTIONAI = this.GESTIONAI;
	            other.GESTANNUL = this.GESTANNUL;
	            other.UPDATE_IDENT = this.UPDATE_IDENT;
	            other.MNTPRGRNT = this.MNTPRGRNT;
	            
	}

	public void copyKeysDataTo(after_tDBInput_2Struct other) {

		other.NUMQUITT = this.NUMQUITT;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_TAble_Prime2.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_TAble_Prime2.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_TAble_Prime2, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_TAble_Prime2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2) {

        	try {

        		int length = 0;
		
						this.NUMQUITT = (BigDecimal) dis.readObject();
					
					this.NUMCNT = readString(dis);
					
			        this.NUMAVT = dis.readFloat();
					
			        this.NUMMAJ = dis.readFloat();
					
					this.CODORSYS = readString(dis);
					
			        this.DATECREA = dis.readFloat();
					
					this.TYPEEMMIS = readString(dis);
					
					this.CODAVT = readString(dis);
					
					this.CODFAM = readString(dis);
					
					this.CODPROD = readString(dis);
					
					this.CODFORMU = readString(dis);
					
					this.CODEDEVIS = readString(dis);
					
			        this.ECHANNIV = dis.readFloat();
					
					this.FRACT = readString(dis);
					
					this.NATCLT = readString(dis);
					
			        this.IDCLT = dis.readFloat();
					
					this.NOMREDCL = readString(dis);
					
			        this.ADRCORES = dis.readFloat();
					
					this.NATINT = readString(dis);
					
			        this.IDINT = dis.readFloat();
					
			        this.IDDELEGA = dis.readFloat();
					
					this.CODECONFI = readString(dis);
					
					this.CODECOASS = readString(dis);
					
					this.CODEREASS = readString(dis);
					
					this.STATQUIT = readString(dis);
					
					this.STADECTX = readString(dis);
					
					this.DATEEMISS = readString(dis);
					
			        this.DEBEFFQUI = dis.readFloat();
					
			        this.FINEFFQUI = dis.readFloat();
					
					this.DATEANNUL = readString(dis);
					
			        this.DATEPAIEM = dis.readFloat();
					
					this.MOTIFANNU = readString(dis);
					
			        this.MNTPRNET = dis.readFloat();
					
			        this.MNTACCESS = dis.readFloat();
					
			        this.MNTFRAPPE = dis.readFloat();
					
			        this.MNTPRASSI = dis.readFloat();
					
			        this.MNTCOMMIS = dis.readFloat();
					
			        this.MNTTAXE = dis.readFloat();
					
			        this.TTCOMPTAX = dis.readFloat();
					
			        this.COMPTAXE1 = dis.readFloat();
					
			        this.COMPTAXE2 = dis.readFloat();
					
			        this.COMPTAXE3 = dis.readFloat();
					
			        this.MNTPRIMET = dis.readFloat();
					
			        this.MNTNETREG = dis.readFloat();
					
			        this.MNTACOMPT = dis.readFloat();
					
			        this.MNTCOMPAY = dis.readFloat();
					
			        this.DATEPREVE = dis.readFloat();
					
					this.INDPOLY = readString(dis);
					
					this.INSERTFC = readString(dis);
					
					this.GESTIONAI = readString(dis);
					
					this.GESTANNUL = readString(dis);
					
						this.UPDATE_IDENT = (BigDecimal) dis.readObject();
					
			        this.MNTPRGRNT = dis.readFloat();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.NUMQUITT);
					
					// String
				
						writeString(this.NUMCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.NUMAVT);
					
					// float
				
		            	dos.writeFloat(this.NUMMAJ);
					
					// String
				
						writeString(this.CODORSYS,dos);
					
					// float
				
		            	dos.writeFloat(this.DATECREA);
					
					// String
				
						writeString(this.TYPEEMMIS,dos);
					
					// String
				
						writeString(this.CODAVT,dos);
					
					// String
				
						writeString(this.CODFAM,dos);
					
					// String
				
						writeString(this.CODPROD,dos);
					
					// String
				
						writeString(this.CODFORMU,dos);
					
					// String
				
						writeString(this.CODEDEVIS,dos);
					
					// float
				
		            	dos.writeFloat(this.ECHANNIV);
					
					// String
				
						writeString(this.FRACT,dos);
					
					// String
				
						writeString(this.NATCLT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDCLT);
					
					// String
				
						writeString(this.NOMREDCL,dos);
					
					// float
				
		            	dos.writeFloat(this.ADRCORES);
					
					// String
				
						writeString(this.NATINT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDINT);
					
					// float
				
		            	dos.writeFloat(this.IDDELEGA);
					
					// String
				
						writeString(this.CODECONFI,dos);
					
					// String
				
						writeString(this.CODECOASS,dos);
					
					// String
				
						writeString(this.CODEREASS,dos);
					
					// String
				
						writeString(this.STATQUIT,dos);
					
					// String
				
						writeString(this.STADECTX,dos);
					
					// String
				
						writeString(this.DATEEMISS,dos);
					
					// float
				
		            	dos.writeFloat(this.DEBEFFQUI);
					
					// float
				
		            	dos.writeFloat(this.FINEFFQUI);
					
					// String
				
						writeString(this.DATEANNUL,dos);
					
					// float
				
		            	dos.writeFloat(this.DATEPAIEM);
					
					// String
				
						writeString(this.MOTIFANNU,dos);
					
					// float
				
		            	dos.writeFloat(this.MNTPRNET);
					
					// float
				
		            	dos.writeFloat(this.MNTACCESS);
					
					// float
				
		            	dos.writeFloat(this.MNTFRAPPE);
					
					// float
				
		            	dos.writeFloat(this.MNTPRASSI);
					
					// float
				
		            	dos.writeFloat(this.MNTCOMMIS);
					
					// float
				
		            	dos.writeFloat(this.MNTTAXE);
					
					// float
				
		            	dos.writeFloat(this.TTCOMPTAX);
					
					// float
				
		            	dos.writeFloat(this.COMPTAXE1);
					
					// float
				
		            	dos.writeFloat(this.COMPTAXE2);
					
					// float
				
		            	dos.writeFloat(this.COMPTAXE3);
					
					// float
				
		            	dos.writeFloat(this.MNTPRIMET);
					
					// float
				
		            	dos.writeFloat(this.MNTNETREG);
					
					// float
				
		            	dos.writeFloat(this.MNTACOMPT);
					
					// float
				
		            	dos.writeFloat(this.MNTCOMPAY);
					
					// float
				
		            	dos.writeFloat(this.DATEPREVE);
					
					// String
				
						writeString(this.INDPOLY,dos);
					
					// String
				
						writeString(this.INSERTFC,dos);
					
					// String
				
						writeString(this.GESTIONAI,dos);
					
					// String
				
						writeString(this.GESTANNUL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UPDATE_IDENT);
					
					// float
				
		            	dos.writeFloat(this.MNTPRGRNT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMQUITT="+String.valueOf(NUMQUITT));
		sb.append(",NUMCNT="+NUMCNT);
		sb.append(",NUMAVT="+String.valueOf(NUMAVT));
		sb.append(",NUMMAJ="+String.valueOf(NUMMAJ));
		sb.append(",CODORSYS="+CODORSYS);
		sb.append(",DATECREA="+String.valueOf(DATECREA));
		sb.append(",TYPEEMMIS="+TYPEEMMIS);
		sb.append(",CODAVT="+CODAVT);
		sb.append(",CODFAM="+CODFAM);
		sb.append(",CODPROD="+CODPROD);
		sb.append(",CODFORMU="+CODFORMU);
		sb.append(",CODEDEVIS="+CODEDEVIS);
		sb.append(",ECHANNIV="+String.valueOf(ECHANNIV));
		sb.append(",FRACT="+FRACT);
		sb.append(",NATCLT="+NATCLT);
		sb.append(",IDCLT="+String.valueOf(IDCLT));
		sb.append(",NOMREDCL="+NOMREDCL);
		sb.append(",ADRCORES="+String.valueOf(ADRCORES));
		sb.append(",NATINT="+NATINT);
		sb.append(",IDINT="+String.valueOf(IDINT));
		sb.append(",IDDELEGA="+String.valueOf(IDDELEGA));
		sb.append(",CODECONFI="+CODECONFI);
		sb.append(",CODECOASS="+CODECOASS);
		sb.append(",CODEREASS="+CODEREASS);
		sb.append(",STATQUIT="+STATQUIT);
		sb.append(",STADECTX="+STADECTX);
		sb.append(",DATEEMISS="+DATEEMISS);
		sb.append(",DEBEFFQUI="+String.valueOf(DEBEFFQUI));
		sb.append(",FINEFFQUI="+String.valueOf(FINEFFQUI));
		sb.append(",DATEANNUL="+DATEANNUL);
		sb.append(",DATEPAIEM="+String.valueOf(DATEPAIEM));
		sb.append(",MOTIFANNU="+MOTIFANNU);
		sb.append(",MNTPRNET="+String.valueOf(MNTPRNET));
		sb.append(",MNTACCESS="+String.valueOf(MNTACCESS));
		sb.append(",MNTFRAPPE="+String.valueOf(MNTFRAPPE));
		sb.append(",MNTPRASSI="+String.valueOf(MNTPRASSI));
		sb.append(",MNTCOMMIS="+String.valueOf(MNTCOMMIS));
		sb.append(",MNTTAXE="+String.valueOf(MNTTAXE));
		sb.append(",TTCOMPTAX="+String.valueOf(TTCOMPTAX));
		sb.append(",COMPTAXE1="+String.valueOf(COMPTAXE1));
		sb.append(",COMPTAXE2="+String.valueOf(COMPTAXE2));
		sb.append(",COMPTAXE3="+String.valueOf(COMPTAXE3));
		sb.append(",MNTPRIMET="+String.valueOf(MNTPRIMET));
		sb.append(",MNTNETREG="+String.valueOf(MNTNETREG));
		sb.append(",MNTACOMPT="+String.valueOf(MNTACOMPT));
		sb.append(",MNTCOMPAY="+String.valueOf(MNTCOMPAY));
		sb.append(",DATEPREVE="+String.valueOf(DATEPREVE));
		sb.append(",INDPOLY="+INDPOLY);
		sb.append(",INSERTFC="+INSERTFC);
		sb.append(",GESTIONAI="+GESTIONAI);
		sb.append(",GESTANNUL="+GESTANNUL);
		sb.append(",UPDATE_IDENT="+String.valueOf(UPDATE_IDENT));
		sb.append(",MNTPRGRNT="+String.valueOf(MNTPRGRNT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NUMQUITT, other.NUMQUITT);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);

		row1Struct row1 = new row1Struct();
row6Struct row6 = new row6Struct();
row9Struct row9 = new row9Struct();






	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = "";
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("Prime");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("Prime");
}

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+"localhost"+":"+"5432"+"/"+"AMI_Assurances";
    dbUser_tDBOutput_2 = "postgres";
 
	final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:I6gLH8fBgyohlUzZLFLEwoniMUblHmvjYkqYzYW/2iZ5vpn7bngjIg==");

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_2 = "public";
                                    if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_2 = conn_tDBOutput_2.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_2 = stmtSchema_tDBOutput_2.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_2.next()){
                                                defaultSchema_tDBOutput_2 = rsSchema_tDBOutput_2.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_2.next()) {
                                        String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
                                        String schema_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_2.equals(("Prime"))
                                            && (schema_tDBOutput_2.equals(dbschema_tDBOutput_2) || ((dbschema_tDBOutput_2 ==null || dbschema_tDBOutput_2.trim().length() ==0) && defaultSchema_tDBOutput_2.equals(schema_tDBOutput_2)))) {
                                            whetherExist_tDBOutput_2 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtDrop_tDBOutput_2.execute("DROP TABLE \"" + tableName_tDBOutput_2 + "\"" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                    stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2 + "\"(\"NUMQUITT\" NUMERIC(15,0)   not null ,\"NUMCNT\" VARCHAR(15)   not null ,\"NUMAVT\" NUMERIC(3,0)   not null ,\"NUMMAJ\" NUMERIC(3,0)   not null ,\"TYPEEMMIS\" VARCHAR(1)   not null ,\"CODPROD\" VARCHAR(3)   not null ,\"CODFORMU\" VARCHAR(2)   not null ,\"NATINT\" VARCHAR(2)   not null ,\"IDINT\" NUMERIC(10,0)   not null ,\"STATQUIT\" VARCHAR(1)   not null ,\"STADECTX\" VARCHAR(1)   not null ,\"DATEEMISS\" TIMESTAMP(8)   not null ,\"DATEANNUL\" TIMESTAMP(8)  ,\"MNTPRNET\" NUMERIC(12,3)   not null ,\"MNTPRGRNT\" NUMERIC(12,3)   not null ,\"MNTPRASSI\" NUMERIC(12,3)   not null ,primary key(\"NUMQUITT\"))");
                                }
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"NUMQUITT\",\"NUMCNT\",\"NUMAVT\",\"NUMMAJ\",\"TYPEEMMIS\",\"CODPROD\",\"CODFORMU\",\"NATINT\",\"IDINT\",\"STATQUIT\",\"STADECTX\",\"DATEEMISS\",\"DATEANNUL\",\"MNTPRNET\",\"MNTPRGRNT\",\"MNTPRASSI\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
	int var1;
	String var2;
	String var3;
	java.util.Date var4;
	int var5;
	String var6;
	String var7;
	java.util.Date var8;
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
row9Struct row9_tmp = new row9Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tJoin_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_1", false);
		start_Hash.put("tJoin_1", System.currentTimeMillis());
		
	
	currentComponent="tJoin_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJoin_1 = 0;
		
    final java.util.Map<row5Struct, row5Struct> tHash_tJoin_1 = (java.util.Map<row5Struct, row5Struct>) globalMap.get("tHash_row5");
    
    class Util_tJoin_1
    {
        row5Struct lookupValue = null;
        row5Struct row5HashKey = new row5Struct(); 
        
        public boolean isJoined(row1Struct mainRow) {                        
           row5HashKey.NUMQUITT = mainRow.NUMQUITT;

			row5HashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_1.get(row5HashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();
        
    int nb_line_tJoin_1 = 0; 
 



/**
 * [tJoin_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "STGPFE01";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:JF4N0ra/InLJnRAYj4/UkPvbsNg9yP23VSRM2DDInxPM7Qw=");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				  
				String url_tDBInput_2 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  GPTB01.NUMQUITT, \n  GPTB01.NUMCNT, \n  GPTB01.NUMAVT, \n  GPTB01.NUMMAJ, \n  GPTB01.CODORSYS, \n  GPTB01.DATECREA"
+", \n  GPTB01.TYPEEMMIS, \n  GPTB01.CODAVT, \n  GPTB01.CODFAM, \n  GPTB01.CODPROD, \n  GPTB01.CODFORMU, \n  GPTB01.CODEDEVIS, \n"
+"  GPTB01.ECHANNIV, \n  GPTB01.FRACT, \n  GPTB01.NATCLT, \n  GPTB01.IDCLT, \n  GPTB01.NOMREDCL, \n  GPTB01.ADRCORES, \n  GPTB01"
+".NATINT, \n  GPTB01.IDINT, \n  GPTB01.IDDELEGA, \n  GPTB01.CODECONFI, \n  GPTB01.CODECOASS, \n  GPTB01.CODEREASS, \n  GPTB01.S"
+"TATQUIT, \n  GPTB01.STADECTX, \n  GPTB01.DATEEMISS, \n  GPTB01.DEBEFFQUI, \n  GPTB01.FINEFFQUI, \n  GPTB01.DATEANNUL, \n  GPTB"
+"01.DATEPAIEM, \n  GPTB01.MOTIFANNU, \n  GPTB01.MNTPRNET, \n  GPTB01.MNTACCESS, \n  GPTB01.MNTFRAPPE, \n  GPTB01.MNTPRASSI, \n "
+" GPTB01.MNTCOMMIS, \n  GPTB01.MNTTAXE, \n  GPTB01.TTCOMPTAX, \n  GPTB01.COMPTAXE1, \n  GPTB01.COMPTAXE2, \n  GPTB01.COMPTAXE3"
+", \n  GPTB01.MNTPRIMET, \n  GPTB01.MNTNETREG, \n  GPTB01.MNTACOMPT, \n  GPTB01.MNTCOMPAY, \n  GPTB01.DATEPREVE, \n  GPTB01.IND"
+"POLY, \n  GPTB01.INSERTFC, \n  GPTB01.GESTIONAI, \n  GPTB01.GESTANNUL, \n  GPTB01.UPDATE_IDENT\nFROM GPTB01";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row1.NUMQUITT = null;
							} else {
		                          
            row1.NUMQUITT = rs_tDBInput_2.getBigDecimal(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row1.NUMCNT = null;
							} else {
	                         		
        	row1.NUMCNT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row1.NUMAVT = 0;
							} else {
		                          
            row1.NUMAVT = rs_tDBInput_2.getFloat(3);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row1.NUMMAJ = 0;
							} else {
		                          
            row1.NUMMAJ = rs_tDBInput_2.getFloat(4);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row1.CODORSYS = null;
							} else {
	                         		
        	row1.CODORSYS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row1.DATECREA = 0;
							} else {
		                          
            row1.DATECREA = rs_tDBInput_2.getFloat(6);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row1.TYPEEMMIS = null;
							} else {
	                         		
        	row1.TYPEEMMIS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row1.CODAVT = null;
							} else {
	                         		
        	row1.CODAVT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row1.CODFAM = null;
							} else {
	                         		
        	row1.CODFAM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row1.CODPROD = null;
							} else {
	                         		
        	row1.CODPROD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row1.CODFORMU = null;
							} else {
	                         		
        	row1.CODFORMU = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row1.CODEDEVIS = null;
							} else {
	                         		
        	row1.CODEDEVIS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row1.ECHANNIV = 0;
							} else {
		                          
            row1.ECHANNIV = rs_tDBInput_2.getFloat(13);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row1.FRACT = null;
							} else {
	                         		
        	row1.FRACT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row1.NATCLT = null;
							} else {
	                         		
        	row1.NATCLT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row1.IDCLT = 0;
							} else {
		                          
            row1.IDCLT = rs_tDBInput_2.getFloat(16);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row1.NOMREDCL = null;
							} else {
	                         		
        	row1.NOMREDCL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row1.ADRCORES = 0;
							} else {
		                          
            row1.ADRCORES = rs_tDBInput_2.getFloat(18);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row1.NATINT = null;
							} else {
	                         		
        	row1.NATINT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row1.IDINT = 0;
							} else {
		                          
            row1.IDINT = rs_tDBInput_2.getFloat(20);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								row1.IDDELEGA = 0;
							} else {
		                          
            row1.IDDELEGA = rs_tDBInput_2.getFloat(21);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 22) {
								row1.CODECONFI = null;
							} else {
	                         		
        	row1.CODECONFI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 23) {
								row1.CODECOASS = null;
							} else {
	                         		
        	row1.CODECOASS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 24) {
								row1.CODEREASS = null;
							} else {
	                         		
        	row1.CODEREASS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 24, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 25) {
								row1.STATQUIT = null;
							} else {
	                         		
        	row1.STATQUIT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 25, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 26) {
								row1.STADECTX = null;
							} else {
	                         		
        	row1.STADECTX = routines.system.JDBCUtil.getString(rs_tDBInput_2, 26, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 27) {
								row1.DATEEMISS = null;
							} else {
	                         		
        	row1.DATEEMISS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 27, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 28) {
								row1.DEBEFFQUI = 0;
							} else {
		                          
            row1.DEBEFFQUI = rs_tDBInput_2.getFloat(28);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 29) {
								row1.FINEFFQUI = 0;
							} else {
		                          
            row1.FINEFFQUI = rs_tDBInput_2.getFloat(29);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 30) {
								row1.DATEANNUL = null;
							} else {
	                         		
        	row1.DATEANNUL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 30, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 31) {
								row1.DATEPAIEM = 0;
							} else {
		                          
            row1.DATEPAIEM = rs_tDBInput_2.getFloat(31);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 32) {
								row1.MOTIFANNU = null;
							} else {
	                         		
        	row1.MOTIFANNU = routines.system.JDBCUtil.getString(rs_tDBInput_2, 32, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 33) {
								row1.MNTPRNET = 0;
							} else {
		                          
            row1.MNTPRNET = rs_tDBInput_2.getFloat(33);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 34) {
								row1.MNTACCESS = 0;
							} else {
		                          
            row1.MNTACCESS = rs_tDBInput_2.getFloat(34);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 35) {
								row1.MNTFRAPPE = 0;
							} else {
		                          
            row1.MNTFRAPPE = rs_tDBInput_2.getFloat(35);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 36) {
								row1.MNTPRASSI = 0;
							} else {
		                          
            row1.MNTPRASSI = rs_tDBInput_2.getFloat(36);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 37) {
								row1.MNTCOMMIS = 0;
							} else {
		                          
            row1.MNTCOMMIS = rs_tDBInput_2.getFloat(37);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 38) {
								row1.MNTTAXE = 0;
							} else {
		                          
            row1.MNTTAXE = rs_tDBInput_2.getFloat(38);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 39) {
								row1.TTCOMPTAX = 0;
							} else {
		                          
            row1.TTCOMPTAX = rs_tDBInput_2.getFloat(39);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 40) {
								row1.COMPTAXE1 = 0;
							} else {
		                          
            row1.COMPTAXE1 = rs_tDBInput_2.getFloat(40);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 41) {
								row1.COMPTAXE2 = 0;
							} else {
		                          
            row1.COMPTAXE2 = rs_tDBInput_2.getFloat(41);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 42) {
								row1.COMPTAXE3 = 0;
							} else {
		                          
            row1.COMPTAXE3 = rs_tDBInput_2.getFloat(42);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 43) {
								row1.MNTPRIMET = 0;
							} else {
		                          
            row1.MNTPRIMET = rs_tDBInput_2.getFloat(43);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 44) {
								row1.MNTNETREG = 0;
							} else {
		                          
            row1.MNTNETREG = rs_tDBInput_2.getFloat(44);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 45) {
								row1.MNTACOMPT = 0;
							} else {
		                          
            row1.MNTACOMPT = rs_tDBInput_2.getFloat(45);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 46) {
								row1.MNTCOMPAY = 0;
							} else {
		                          
            row1.MNTCOMPAY = rs_tDBInput_2.getFloat(46);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 47) {
								row1.DATEPREVE = 0;
							} else {
		                          
            row1.DATEPREVE = rs_tDBInput_2.getFloat(47);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 48) {
								row1.INDPOLY = null;
							} else {
	                         		
        	row1.INDPOLY = routines.system.JDBCUtil.getString(rs_tDBInput_2, 48, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 49) {
								row1.INSERTFC = null;
							} else {
	                         		
        	row1.INSERTFC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 49, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 50) {
								row1.GESTIONAI = null;
							} else {
	                         		
        	row1.GESTIONAI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 50, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 51) {
								row1.GESTANNUL = null;
							} else {
	                         		
        	row1.GESTANNUL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 51, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 52) {
								row1.UPDATE_IDENT = null;
							} else {
		                          
            row1.UPDATE_IDENT = rs_tDBInput_2.getBigDecimal(52);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 53) {
								row1.MNTPRGRNT = 0;
							} else {
		                          
            row1.MNTPRGRNT = rs_tDBInput_2.getFloat(53);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					



 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJoin_1 main ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

			row6 = null;	
	
				row6 = new row6Struct();						
						row6.NUMQUITT = row1.NUMQUITT;					
						row6.NUMCNT = row1.NUMCNT;					
						row6.NUMAVT = row1.NUMAVT;					
						row6.NUMMAJ = row1.NUMMAJ;					
						row6.CODORSYS = row1.CODORSYS;					
						row6.DATECREA = row1.DATECREA;					
						row6.TYPEEMMIS = row1.TYPEEMMIS;					
						row6.CODAVT = row1.CODAVT;					
						row6.CODFAM = row1.CODFAM;					
						row6.CODPROD = row1.CODPROD;					
						row6.CODFORMU = row1.CODFORMU;					
						row6.CODEDEVIS = row1.CODEDEVIS;					
						row6.ECHANNIV = row1.ECHANNIV;					
						row6.FRACT = row1.FRACT;					
						row6.NATCLT = row1.NATCLT;					
						row6.IDCLT = row1.IDCLT;					
						row6.NOMREDCL = row1.NOMREDCL;					
						row6.ADRCORES = row1.ADRCORES;					
						row6.NATINT = row1.NATINT;					
						row6.IDINT = row1.IDINT;					
						row6.IDDELEGA = row1.IDDELEGA;					
						row6.CODECONFI = row1.CODECONFI;					
						row6.CODECOASS = row1.CODECOASS;					
						row6.CODEREASS = row1.CODEREASS;					
						row6.STATQUIT = row1.STATQUIT;					
						row6.STADECTX = row1.STADECTX;					
						row6.DATEEMISS = row1.DATEEMISS;					
						row6.DEBEFFQUI = row1.DEBEFFQUI;					
						row6.FINEFFQUI = row1.FINEFFQUI;					
						row6.DATEANNUL = row1.DATEANNUL;					
						row6.DATEPAIEM = row1.DATEPAIEM;					
						row6.MOTIFANNU = row1.MOTIFANNU;					
						row6.MNTPRNET = row1.MNTPRNET;					
						row6.MNTACCESS = row1.MNTACCESS;					
						row6.MNTFRAPPE = row1.MNTFRAPPE;					
						row6.MNTPRASSI = row1.MNTPRASSI;					
						row6.MNTCOMMIS = row1.MNTCOMMIS;					
						row6.MNTTAXE = row1.MNTTAXE;					
						row6.TTCOMPTAX = row1.TTCOMPTAX;					
						row6.COMPTAXE1 = row1.COMPTAXE1;					
						row6.COMPTAXE2 = row1.COMPTAXE2;					
						row6.COMPTAXE3 = row1.COMPTAXE3;					
						row6.MNTPRIMET = row1.MNTPRIMET;					
						row6.MNTNETREG = row1.MNTNETREG;					
						row6.MNTACOMPT = row1.MNTACOMPT;					
						row6.MNTCOMPAY = row1.MNTCOMPAY;					
						row6.DATEPREVE = row1.DATEPREVE;					
						row6.INDPOLY = row1.INDPOLY;					
						row6.INSERTFC = row1.INSERTFC;					
						row6.GESTIONAI = row1.GESTIONAI;					
						row6.GESTANNUL = row1.GESTANNUL;

			if(util_tJoin_1.isJoined(row1)){ 			
								row6.MNTPRGRNT = util_tJoin_1.lookupValue.MNTPRGRNT;
			} 
			
///////////////////////    			

 


	tos_count_tJoin_1++;

/**
 * [tJoin_1 main ] stop
 */
	
	/**
	 * [tJoin_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

 



/**
 * [tJoin_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;
Var.var1 = StringHandling.LEN(row6.DATEEMISS) ;
Var.var2 = Var.var1!=8? "0":  row6.DATEEMISS;
Var.var3 = Var.var2.equals("0")?null:  Var.var2;
Var.var4 = Var.var3==null?null:TalendDate.parseDate("yyyyMMdd",Var.var3 ) ;
Var.var5 = StringHandling.LEN(row6.DATEANNUL ) ;
Var.var6 = Var.var5!=8? "0":  row6.DATEANNUL ;
Var.var7 = Var.var6.equals("0")?null:  Var.var6 ;
Var.var8 = Var.var7==null?null:TalendDate.parseDate("yyyyMMdd",Var.var7 ) ;// ###############################
        // ###############################
        // # Output tables

row9 = null;


// # Output table : 'row9'
row9_tmp.NUMQUITT = row6.NUMQUITT ;
row9_tmp.NUMCNT = row6.NUMCNT ;
row9_tmp.NUMAVT = row6.NUMAVT ;
row9_tmp.NUMMAJ = row6.NUMMAJ ;
row9_tmp.TYPEEMMIS = row6.TYPEEMMIS ;
row9_tmp.CODPROD = row6.CODPROD ;
row9_tmp.CODFORMU = row6.CODFORMU ;
row9_tmp.NATINT = row6.NATINT ;
row9_tmp.IDINT = row6.IDINT ;
row9_tmp.STATQUIT = row6.STATQUIT ;
row9_tmp.STADECTX = row6.STADECTX ;
row9_tmp.DATEEMISS = Var.var4 ;
row9_tmp.DATEANNUL = Var.var8 ;
row9_tmp.MNTPRNET = row6.MNTPRNET ;
row9_tmp.MNTPRGRNT = row6.MNTPRGRNT ;
row9_tmp.MNTPRASSI = row6.MNTPRASSI ;
row9 = row9_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					



        whetherReject_tDBOutput_2 = false;
                    pstmt_tDBOutput_2.setBigDecimal(1, row9.NUMQUITT);

                    if(row9.NUMCNT == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, row9.NUMCNT);
}

                    pstmt_tDBOutput_2.setFloat(3, row9.NUMAVT);

                    pstmt_tDBOutput_2.setFloat(4, row9.NUMMAJ);

                    if(row9.TYPEEMMIS == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, row9.TYPEEMMIS);
}

                    if(row9.CODPROD == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, row9.CODPROD);
}

                    if(row9.CODFORMU == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(7, row9.CODFORMU);
}

                    if(row9.NATINT == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(8, row9.NATINT);
}

                    pstmt_tDBOutput_2.setFloat(9, row9.IDINT);

                    if(row9.STATQUIT == null) {
pstmt_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(10, row9.STATQUIT);
}

                    if(row9.STADECTX == null) {
pstmt_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(11, row9.STADECTX);
}

                    if(row9.DATEEMISS != null) {
pstmt_tDBOutput_2.setTimestamp(12, new java.sql.Timestamp(row9.DATEEMISS.getTime()));
} else {
pstmt_tDBOutput_2.setNull(12, java.sql.Types.TIMESTAMP);
}

                    if(row9.DATEANNUL != null) {
pstmt_tDBOutput_2.setTimestamp(13, new java.sql.Timestamp(row9.DATEANNUL.getTime()));
} else {
pstmt_tDBOutput_2.setNull(13, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_2.setFloat(14, row9.MNTPRNET);

                    pstmt_tDBOutput_2.setFloat(15, row9.MNTPRGRNT);

                    pstmt_tDBOutput_2.setFloat(16, row9.MNTPRASSI);

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
                try {
                		int countSum_tDBOutput_2 = 0;
                		    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
            	    	
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                batchSizeCounter_tDBOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_2){
			    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
			    	String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					}else{
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}
			    	
			    	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
			    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
			    	
			    	System.err.println(errormessage_tDBOutput_2);
			    	
				}
            }
                	conn_tDBOutput_2.commit();
                	
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tJoin_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

 



/**
 * [tJoin_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tJoin_1 end ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJoin_1", true);
end_Hash.put("tJoin_1", System.currentTimeMillis());




/**
 * [tJoin_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			
			conn_tDBOutput_2.commit();
			
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				      	
					      			//free memory for "tJoin_1"
									globalMap.remove("tHash_row5");
				      			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tJoin_1 finally ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

 



/**
 * [tJoin_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal NUMQUITT;

				public BigDecimal getNUMQUITT () {
					return this.NUMQUITT;
				}
				
			    public float NUMENREG;

				public float getNUMENREG () {
					return this.NUMENREG;
				}
				
			    public String CODGRNT;

				public String getCODGRNT () {
					return this.CODGRNT;
				}
				
			    public String TYPENREGI;

				public String getTYPENREGI () {
					return this.TYPENREGI;
				}
				
			    public float MNTPRGRNT;

				public float getMNTPRGRNT () {
					return this.MNTPRGRNT;
				}
				
			    public float TAUXTAXE;

				public float getTAUXTAXE () {
					return this.TAUXTAXE;
				}
				
			    public float MNTTAXGRN;

				public float getMNTTAXGRN () {
					return this.MNTTAXGRN;
				}
				
			    public float MNTCOMGRN;

				public float getMNTCOMGRN () {
					return this.MNTCOMGRN;
				}
				
			    public BigDecimal UPDATE_IDENT;

				public BigDecimal getUPDATE_IDENT () {
					return this.UPDATE_IDENT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NUMQUITT == null) ? 0 : this.NUMQUITT.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.NUMQUITT == null) {
							if (other.NUMQUITT != null)
								return false;
						
						} else if (!this.NUMQUITT.equals(other.NUMQUITT))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.NUMQUITT = this.NUMQUITT;
	            other.NUMENREG = this.NUMENREG;
	            other.CODGRNT = this.CODGRNT;
	            other.TYPENREGI = this.TYPENREGI;
	            other.MNTPRGRNT = this.MNTPRGRNT;
	            other.TAUXTAXE = this.TAUXTAXE;
	            other.MNTTAXGRN = this.MNTTAXGRN;
	            other.MNTCOMGRN = this.MNTCOMGRN;
	            other.UPDATE_IDENT = this.UPDATE_IDENT;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.NUMQUITT = this.NUMQUITT;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2) {

        	try {

        		int length = 0;
		
						this.NUMQUITT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.NUMQUITT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.NUMENREG = dis.readFloat();
					
						this.CODGRNT = readString(dis,ois);
					
						this.TYPENREGI = readString(dis,ois);
					
			            this.MNTPRGRNT = dis.readFloat();
					
			            this.TAUXTAXE = dis.readFloat();
					
			            this.MNTTAXGRN = dis.readFloat();
					
			            this.MNTCOMGRN = dis.readFloat();
					
       			    	this.UPDATE_IDENT = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeFloat(this.NUMENREG);
					
						writeString(this.CODGRNT, dos, oos);
					
						writeString(this.TYPENREGI, dos, oos);
					
		            	dos.writeFloat(this.MNTPRGRNT);
					
		            	dos.writeFloat(this.TAUXTAXE);
					
		            	dos.writeFloat(this.MNTTAXGRN);
					
		            	dos.writeFloat(this.MNTCOMGRN);
					
       			    	oos.writeObject(this.UPDATE_IDENT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMQUITT="+String.valueOf(NUMQUITT));
		sb.append(",NUMENREG="+String.valueOf(NUMENREG));
		sb.append(",CODGRNT="+CODGRNT);
		sb.append(",TYPENREGI="+TYPENREGI);
		sb.append(",MNTPRGRNT="+String.valueOf(MNTPRGRNT));
		sb.append(",TAUXTAXE="+String.valueOf(TAUXTAXE));
		sb.append(",MNTTAXGRN="+String.valueOf(MNTTAXGRN));
		sb.append(",MNTCOMGRN="+String.valueOf(MNTCOMGRN));
		sb.append(",UPDATE_IDENT="+String.valueOf(UPDATE_IDENT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NUMQUITT, other.NUMQUITT);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];

	
			    public BigDecimal NUMQUITT;

				public BigDecimal getNUMQUITT () {
					return this.NUMQUITT;
				}
				
			    public float NUMENREG;

				public float getNUMENREG () {
					return this.NUMENREG;
				}
				
			    public String CODGRNT;

				public String getCODGRNT () {
					return this.CODGRNT;
				}
				
			    public String TYPENREGI;

				public String getTYPENREGI () {
					return this.TYPENREGI;
				}
				
			    public float MNTPRGRNT;

				public float getMNTPRGRNT () {
					return this.MNTPRGRNT;
				}
				
			    public float TAUXTAXE;

				public float getTAUXTAXE () {
					return this.TAUXTAXE;
				}
				
			    public float MNTTAXGRN;

				public float getMNTTAXGRN () {
					return this.MNTTAXGRN;
				}
				
			    public float MNTCOMGRN;

				public float getMNTCOMGRN () {
					return this.MNTCOMGRN;
				}
				
			    public BigDecimal UPDATE_IDENT;

				public BigDecimal getUPDATE_IDENT () {
					return this.UPDATE_IDENT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_TAble_Prime2.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_TAble_Prime2.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_TAble_Prime2, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_TAble_Prime2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2) {

        	try {

        		int length = 0;
		
						this.NUMQUITT = (BigDecimal) dis.readObject();
					
			        this.NUMENREG = dis.readFloat();
					
					this.CODGRNT = readString(dis);
					
					this.TYPENREGI = readString(dis);
					
			        this.MNTPRGRNT = dis.readFloat();
					
			        this.TAUXTAXE = dis.readFloat();
					
			        this.MNTTAXGRN = dis.readFloat();
					
			        this.MNTCOMGRN = dis.readFloat();
					
						this.UPDATE_IDENT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.NUMQUITT);
					
					// float
				
		            	dos.writeFloat(this.NUMENREG);
					
					// String
				
						writeString(this.CODGRNT,dos);
					
					// String
				
						writeString(this.TYPENREGI,dos);
					
					// float
				
		            	dos.writeFloat(this.MNTPRGRNT);
					
					// float
				
		            	dos.writeFloat(this.TAUXTAXE);
					
					// float
				
		            	dos.writeFloat(this.MNTTAXGRN);
					
					// float
				
		            	dos.writeFloat(this.MNTCOMGRN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UPDATE_IDENT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMQUITT="+String.valueOf(NUMQUITT));
		sb.append(",NUMENREG="+String.valueOf(NUMENREG));
		sb.append(",CODGRNT="+CODGRNT);
		sb.append(",TYPENREGI="+TYPENREGI);
		sb.append(",MNTPRGRNT="+String.valueOf(MNTPRGRNT));
		sb.append(",TAUXTAXE="+String.valueOf(TAUXTAXE));
		sb.append(",MNTTAXGRN="+String.valueOf(MNTTAXGRN));
		sb.append(",MNTCOMGRN="+String.valueOf(MNTCOMGRN));
		sb.append(",UPDATE_IDENT="+String.valueOf(UPDATE_IDENT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[0];

	
			    public BigDecimal NUMQUITT;

				public BigDecimal getNUMQUITT () {
					return this.NUMQUITT;
				}
				
			    public float NUMENREG;

				public float getNUMENREG () {
					return this.NUMENREG;
				}
				
			    public String CODGRNT;

				public String getCODGRNT () {
					return this.CODGRNT;
				}
				
			    public String TYPENREGI;

				public String getTYPENREGI () {
					return this.TYPENREGI;
				}
				
			    public float MNTPRGRNT;

				public float getMNTPRGRNT () {
					return this.MNTPRGRNT;
				}
				
			    public float TAUXTAXE;

				public float getTAUXTAXE () {
					return this.TAUXTAXE;
				}
				
			    public float MNTTAXGRN;

				public float getMNTTAXGRN () {
					return this.MNTTAXGRN;
				}
				
			    public float MNTCOMGRN;

				public float getMNTCOMGRN () {
					return this.MNTCOMGRN;
				}
				
			    public BigDecimal UPDATE_IDENT;

				public BigDecimal getUPDATE_IDENT () {
					return this.UPDATE_IDENT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_TAble_Prime2.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_TAble_Prime2.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_TAble_Prime2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_TAble_Prime2, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_TAble_Prime2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_TAble_Prime2) {

        	try {

        		int length = 0;
		
						this.NUMQUITT = (BigDecimal) dis.readObject();
					
			        this.NUMENREG = dis.readFloat();
					
					this.CODGRNT = readString(dis);
					
					this.TYPENREGI = readString(dis);
					
			        this.MNTPRGRNT = dis.readFloat();
					
			        this.TAUXTAXE = dis.readFloat();
					
			        this.MNTTAXGRN = dis.readFloat();
					
			        this.MNTCOMGRN = dis.readFloat();
					
						this.UPDATE_IDENT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.NUMQUITT);
					
					// float
				
		            	dos.writeFloat(this.NUMENREG);
					
					// String
				
						writeString(this.CODGRNT,dos);
					
					// String
				
						writeString(this.TYPENREGI,dos);
					
					// float
				
		            	dos.writeFloat(this.MNTPRGRNT);
					
					// float
				
		            	dos.writeFloat(this.TAUXTAXE);
					
					// float
				
		            	dos.writeFloat(this.MNTTAXGRN);
					
					// float
				
		            	dos.writeFloat(this.MNTCOMGRN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UPDATE_IDENT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMQUITT="+String.valueOf(NUMQUITT));
		sb.append(",NUMENREG="+String.valueOf(NUMENREG));
		sb.append(",CODGRNT="+CODGRNT);
		sb.append(",TYPENREGI="+TYPENREGI);
		sb.append(",MNTPRGRNT="+String.valueOf(MNTPRGRNT));
		sb.append(",TAUXTAXE="+String.valueOf(TAUXTAXE));
		sb.append(",MNTTAXGRN="+String.valueOf(MNTTAXGRN));
		sb.append(",MNTCOMGRN="+String.valueOf(MNTCOMGRN));
		sb.append(",UPDATE_IDENT="+String.valueOf(UPDATE_IDENT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row5Struct row5 = new row5Struct();




	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				BigDecimal NUMQUITT;BigDecimal MNTPRGRNT_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.NUMQUITT == null) ? 0 : this.NUMQUITT.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.NUMQUITT == null) {
								if (other.NUMQUITT != null) 
									return false;
							} else if (!this.NUMQUITT.equals(other.NUMQUITT)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "STGPFE01";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:SBwMSNqwGxJJMBGWEW4jaZUJrNUF55yMMHWbDFQkDefaIAY=");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				  
				String url_tDBInput_1 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  GPTB02.NUMQUITT, \n  GPTB02.NUMENREG, \n  GPTB02.CODGRNT, \n  GPTB02.TYPENREGI, \n  GPTB02.MNTPRGRNT, \n  GPTB02.T"
+"AUXTAXE, \n  GPTB02.MNTTAXGRN, \n  GPTB02.MNTCOMGRN, \n  GPTB02.UPDATE_IDENT\nFROM GPTB02";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row4.NUMQUITT = null;
							} else {
		                          
            row4.NUMQUITT = rs_tDBInput_1.getBigDecimal(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row4.NUMENREG = 0;
							} else {
		                          
            row4.NUMENREG = rs_tDBInput_1.getFloat(2);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row4.CODGRNT = null;
							} else {
	                         		
        	row4.CODGRNT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row4.TYPENREGI = null;
							} else {
	                         		
        	row4.TYPENREGI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row4.MNTPRGRNT = 0;
							} else {
		                          
            row4.MNTPRGRNT = rs_tDBInput_1.getFloat(5);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row4.TAUXTAXE = 0;
							} else {
		                          
            row4.TAUXTAXE = rs_tDBInput_1.getFloat(6);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row4.MNTTAXGRN = 0;
							} else {
		                          
            row4.MNTTAXGRN = rs_tDBInput_1.getFloat(7);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row4.MNTCOMGRN = 0;
							} else {
		                          
            row4.MNTCOMGRN = rs_tDBInput_1.getFloat(8);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row4.UPDATE_IDENT = null;
							} else {
		                          
            row4.UPDATE_IDENT = rs_tDBInput_1.getBigDecimal(9);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					



 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					
	
operation_finder_tAggregateRow_1.NUMQUITT = row4.NUMQUITT;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.NUMQUITT = operation_finder_tAggregateRow_1.NUMQUITT;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_1.MNTPRGRNT_sum == null) {
						operation_result_tAggregateRow_1.MNTPRGRNT_sum = new BigDecimal(0).setScale(3);
					}
					operation_result_tAggregateRow_1.MNTPRGRNT_sum = operation_result_tAggregateRow_1.MNTPRGRNT_sum.add(
						new BigDecimal(
							String.valueOf(
								row4.MNTPRGRNT
							)
						)
					);
					


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row5", false);
		start_Hash.put("tHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tHash_row5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHash_row5 = 0;
		

				java.util.Map<row5Struct, row5Struct> tHash_row5 = new java.util.LinkedHashMap<row5Struct, row5Struct>();
	            globalMap.put("tHash_row5", tHash_row5);
			
            

 



/**
 * [tHash_row5 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row5.NUMQUITT = aggregated_row_tAggregateRow_1.NUMQUITT;
            				    
    								if(aggregated_row_tAggregateRow_1.MNTPRGRNT_sum != null) {
    								row5.MNTPRGRNT = aggregated_row_tAggregateRow_1.MNTPRGRNT_sum.floatValue();
										
    								}else{
    								
    									row5.MNTPRGRNT = 0;
    									
    								}
    								

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tHash_row5 main ] start
	 */

	

	
	
	currentComponent="tHash_row5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

row5Struct row5_HashRow = new row5Struct();

					row5_HashRow.NUMQUITT = row5.NUMQUITT;
					row5_HashRow.NUMENREG = row5.NUMENREG;
					row5_HashRow.CODGRNT = row5.CODGRNT;
					row5_HashRow.TYPENREGI = row5.TYPENREGI;
					row5_HashRow.MNTPRGRNT = row5.MNTPRGRNT;
					row5_HashRow.TAUXTAXE = row5.TAUXTAXE;
					row5_HashRow.MNTTAXGRN = row5.MNTTAXGRN;
					row5_HashRow.MNTCOMGRN = row5.MNTCOMGRN;
					row5_HashRow.UPDATE_IDENT = row5.UPDATE_IDENT;
tHash_row5.put(row5_HashRow, row5_HashRow);


 


	tos_count_tHash_row5++;

/**
 * [tHash_row5 main ] stop
 */
	
	/**
	 * [tHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row5";

	

 



/**
 * [tHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row5";

	

 



/**
 * [tHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tHash_row5 end ] start
	 */

	

	
	
	currentComponent="tHash_row5";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHash_row5", true);
end_Hash.put("tHash_row5", System.currentTimeMillis());




/**
 * [tHash_row5 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tHash_row5";

	

 



/**
 * [tHash_row5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final TAble_Prime2 TAble_Prime2Class = new TAble_Prime2();

        int exitCode = TAble_Prime2Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = TAble_Prime2.class.getClassLoader().getResourceAsStream("ami_assurances_1/table_prime2_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = TAble_Prime2.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : TAble_Prime2");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     183744 characters generated by Talend Open Studio for Data Integration 
 *     on the 6 octobre 2022 à 12:12:58 GMT+01:00
 ************************************************************************************************/