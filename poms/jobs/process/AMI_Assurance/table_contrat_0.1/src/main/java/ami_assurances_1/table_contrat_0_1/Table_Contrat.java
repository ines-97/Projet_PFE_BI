// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package ami_assurances_1.table_contrat_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Table_Contrat Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Table_Contrat implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Table_Contrat";
	private final String projectName = "AMI_ASSURANCES_1";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Table_Contrat.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Table_Contrat.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String NUMCNT;

				public String getNUMCNT () {
					return this.NUMCNT;
				}
				
			    public float NUMAVT;

				public float getNUMAVT () {
					return this.NUMAVT;
				}
				
			    public float NUMMAJ;

				public float getNUMMAJ () {
					return this.NUMMAJ;
				}
				
			    public String CODPROD;

				public String getCODPROD () {
					return this.CODPROD;
				}
				
			    public String FORMCNT;

				public String getFORMCNT () {
					return this.FORMCNT;
				}
				
			    public String NATINT;

				public String getNATINT () {
					return this.NATINT;
				}
				
			    public String IDINT;

				public String getIDINT () {
					return this.IDINT;
				}
				
			    public String DUREE;

				public String getDUREE () {
					return this.DUREE;
				}
				
			    public String FRACT;

				public String getFRACT () {
					return this.FRACT;
				}
				
			    public java.util.Date DEBCNT;

				public java.util.Date getDEBCNT () {
					return this.DEBCNT;
				}
				
			    public java.util.Date FINCNT;

				public java.util.Date getFINCNT () {
					return this.FINCNT;
				}
				
			    public String SITUAT;

				public String getSITUAT () {
					return this.SITUAT;
				}
				
			    public float CONVO;

				public float getCONVO () {
					return this.CONVO;
				}
				
			    public String TYPERESIL;

				public String getTYPERESIL () {
					return this.TYPERESIL;
				}
				
			    public Float PRIMGRNTOTAL;

				public Float getPRIMGRNTOTAL () {
					return this.PRIMGRNTOTAL;
				}
				
			    public String LIBTYPERESIL;

				public String getLIBTYPERESIL () {
					return this.LIBTYPERESIL;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NUMCNT == null) ? 0 : this.NUMCNT.hashCode());
					
							result = prime * result + (int) this.NUMAVT;
						
							result = prime * result + (int) this.NUMMAJ;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.NUMCNT == null) {
							if (other.NUMCNT != null)
								return false;
						
						} else if (!this.NUMCNT.equals(other.NUMCNT))
						
							return false;
					
						if (this.NUMAVT != other.NUMAVT)
							return false;
					
						if (this.NUMMAJ != other.NUMMAJ)
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.NUMCNT = this.NUMCNT;
	            other.NUMAVT = this.NUMAVT;
	            other.NUMMAJ = this.NUMMAJ;
	            other.CODPROD = this.CODPROD;
	            other.FORMCNT = this.FORMCNT;
	            other.NATINT = this.NATINT;
	            other.IDINT = this.IDINT;
	            other.DUREE = this.DUREE;
	            other.FRACT = this.FRACT;
	            other.DEBCNT = this.DEBCNT;
	            other.FINCNT = this.FINCNT;
	            other.SITUAT = this.SITUAT;
	            other.CONVO = this.CONVO;
	            other.TYPERESIL = this.TYPERESIL;
	            other.PRIMGRNTOTAL = this.PRIMGRNTOTAL;
	            other.LIBTYPERESIL = this.LIBTYPERESIL;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.NUMCNT = this.NUMCNT;
	            	other.NUMAVT = this.NUMAVT;
	            	other.NUMMAJ = this.NUMMAJ;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat) {

        	try {

        		int length = 0;
		
					this.NUMCNT = readString(dis);
					
			        this.NUMAVT = dis.readFloat();
					
			        this.NUMMAJ = dis.readFloat();
					
					this.CODPROD = readString(dis);
					
					this.FORMCNT = readString(dis);
					
					this.NATINT = readString(dis);
					
					this.IDINT = readString(dis);
					
					this.DUREE = readString(dis);
					
					this.FRACT = readString(dis);
					
					this.DEBCNT = readDate(dis);
					
					this.FINCNT = readDate(dis);
					
					this.SITUAT = readString(dis);
					
			        this.CONVO = dis.readFloat();
					
					this.TYPERESIL = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRIMGRNTOTAL = null;
           				} else {
           			    	this.PRIMGRNTOTAL = dis.readFloat();
           				}
					
					this.LIBTYPERESIL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.NUMAVT);
					
					// float
				
		            	dos.writeFloat(this.NUMMAJ);
					
					// String
				
						writeString(this.CODPROD,dos);
					
					// String
				
						writeString(this.FORMCNT,dos);
					
					// String
				
						writeString(this.NATINT,dos);
					
					// String
				
						writeString(this.IDINT,dos);
					
					// String
				
						writeString(this.DUREE,dos);
					
					// String
				
						writeString(this.FRACT,dos);
					
					// java.util.Date
				
						writeDate(this.DEBCNT,dos);
					
					// java.util.Date
				
						writeDate(this.FINCNT,dos);
					
					// String
				
						writeString(this.SITUAT,dos);
					
					// float
				
		            	dos.writeFloat(this.CONVO);
					
					// String
				
						writeString(this.TYPERESIL,dos);
					
					// Float
				
						if(this.PRIMGRNTOTAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.PRIMGRNTOTAL);
		            	}
					
					// String
				
						writeString(this.LIBTYPERESIL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMCNT="+NUMCNT);
		sb.append(",NUMAVT="+String.valueOf(NUMAVT));
		sb.append(",NUMMAJ="+String.valueOf(NUMMAJ));
		sb.append(",CODPROD="+CODPROD);
		sb.append(",FORMCNT="+FORMCNT);
		sb.append(",NATINT="+NATINT);
		sb.append(",IDINT="+IDINT);
		sb.append(",DUREE="+DUREE);
		sb.append(",FRACT="+FRACT);
		sb.append(",DEBCNT="+String.valueOf(DEBCNT));
		sb.append(",FINCNT="+String.valueOf(FINCNT));
		sb.append(",SITUAT="+SITUAT);
		sb.append(",CONVO="+String.valueOf(CONVO));
		sb.append(",TYPERESIL="+TYPERESIL);
		sb.append(",PRIMGRNTOTAL="+String.valueOf(PRIMGRNTOTAL));
		sb.append(",LIBTYPERESIL="+LIBTYPERESIL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NUMCNT, other.NUMCNT);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUMAVT, other.NUMAVT);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUMMAJ, other.NUMMAJ);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfrow4Struct implements routines.system.IPersistableRow<copyOfrow4Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String NUMCNT;

				public String getNUMCNT () {
					return this.NUMCNT;
				}
				
			    public float NUMAVT;

				public float getNUMAVT () {
					return this.NUMAVT;
				}
				
			    public float NUMMAJ;

				public float getNUMMAJ () {
					return this.NUMMAJ;
				}
				
			    public String CODPROD;

				public String getCODPROD () {
					return this.CODPROD;
				}
				
			    public String FORMCNT;

				public String getFORMCNT () {
					return this.FORMCNT;
				}
				
			    public String NATINT;

				public String getNATINT () {
					return this.NATINT;
				}
				
			    public String IDINT;

				public String getIDINT () {
					return this.IDINT;
				}
				
			    public String DUREE;

				public String getDUREE () {
					return this.DUREE;
				}
				
			    public String FRACT;

				public String getFRACT () {
					return this.FRACT;
				}
				
			    public java.util.Date DEBCNT;

				public java.util.Date getDEBCNT () {
					return this.DEBCNT;
				}
				
			    public java.util.Date FINCNT;

				public java.util.Date getFINCNT () {
					return this.FINCNT;
				}
				
			    public String SITUAT;

				public String getSITUAT () {
					return this.SITUAT;
				}
				
			    public float CONVO;

				public float getCONVO () {
					return this.CONVO;
				}
				
			    public String TYPERESIL;

				public String getTYPERESIL () {
					return this.TYPERESIL;
				}
				
			    public Float PRIMGRNTOTAL;

				public Float getPRIMGRNTOTAL () {
					return this.PRIMGRNTOTAL;
				}
				
			    public String LIBTYPERESIL;

				public String getLIBTYPERESIL () {
					return this.LIBTYPERESIL;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NUMCNT == null) ? 0 : this.NUMCNT.hashCode());
					
							result = prime * result + (int) this.NUMAVT;
						
							result = prime * result + (int) this.NUMMAJ;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfrow4Struct other = (copyOfrow4Struct) obj;
		
						if (this.NUMCNT == null) {
							if (other.NUMCNT != null)
								return false;
						
						} else if (!this.NUMCNT.equals(other.NUMCNT))
						
							return false;
					
						if (this.NUMAVT != other.NUMAVT)
							return false;
					
						if (this.NUMMAJ != other.NUMMAJ)
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfrow4Struct other) {

		other.NUMCNT = this.NUMCNT;
	            other.NUMAVT = this.NUMAVT;
	            other.NUMMAJ = this.NUMMAJ;
	            other.CODPROD = this.CODPROD;
	            other.FORMCNT = this.FORMCNT;
	            other.NATINT = this.NATINT;
	            other.IDINT = this.IDINT;
	            other.DUREE = this.DUREE;
	            other.FRACT = this.FRACT;
	            other.DEBCNT = this.DEBCNT;
	            other.FINCNT = this.FINCNT;
	            other.SITUAT = this.SITUAT;
	            other.CONVO = this.CONVO;
	            other.TYPERESIL = this.TYPERESIL;
	            other.PRIMGRNTOTAL = this.PRIMGRNTOTAL;
	            other.LIBTYPERESIL = this.LIBTYPERESIL;
	            
	}

	public void copyKeysDataTo(copyOfrow4Struct other) {

		other.NUMCNT = this.NUMCNT;
	            	other.NUMAVT = this.NUMAVT;
	            	other.NUMMAJ = this.NUMMAJ;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat) {

        	try {

        		int length = 0;
		
					this.NUMCNT = readString(dis);
					
			        this.NUMAVT = dis.readFloat();
					
			        this.NUMMAJ = dis.readFloat();
					
					this.CODPROD = readString(dis);
					
					this.FORMCNT = readString(dis);
					
					this.NATINT = readString(dis);
					
					this.IDINT = readString(dis);
					
					this.DUREE = readString(dis);
					
					this.FRACT = readString(dis);
					
					this.DEBCNT = readDate(dis);
					
					this.FINCNT = readDate(dis);
					
					this.SITUAT = readString(dis);
					
			        this.CONVO = dis.readFloat();
					
					this.TYPERESIL = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRIMGRNTOTAL = null;
           				} else {
           			    	this.PRIMGRNTOTAL = dis.readFloat();
           				}
					
					this.LIBTYPERESIL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.NUMAVT);
					
					// float
				
		            	dos.writeFloat(this.NUMMAJ);
					
					// String
				
						writeString(this.CODPROD,dos);
					
					// String
				
						writeString(this.FORMCNT,dos);
					
					// String
				
						writeString(this.NATINT,dos);
					
					// String
				
						writeString(this.IDINT,dos);
					
					// String
				
						writeString(this.DUREE,dos);
					
					// String
				
						writeString(this.FRACT,dos);
					
					// java.util.Date
				
						writeDate(this.DEBCNT,dos);
					
					// java.util.Date
				
						writeDate(this.FINCNT,dos);
					
					// String
				
						writeString(this.SITUAT,dos);
					
					// float
				
		            	dos.writeFloat(this.CONVO);
					
					// String
				
						writeString(this.TYPERESIL,dos);
					
					// Float
				
						if(this.PRIMGRNTOTAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.PRIMGRNTOTAL);
		            	}
					
					// String
				
						writeString(this.LIBTYPERESIL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMCNT="+NUMCNT);
		sb.append(",NUMAVT="+String.valueOf(NUMAVT));
		sb.append(",NUMMAJ="+String.valueOf(NUMMAJ));
		sb.append(",CODPROD="+CODPROD);
		sb.append(",FORMCNT="+FORMCNT);
		sb.append(",NATINT="+NATINT);
		sb.append(",IDINT="+IDINT);
		sb.append(",DUREE="+DUREE);
		sb.append(",FRACT="+FRACT);
		sb.append(",DEBCNT="+String.valueOf(DEBCNT));
		sb.append(",FINCNT="+String.valueOf(FINCNT));
		sb.append(",SITUAT="+SITUAT);
		sb.append(",CONVO="+String.valueOf(CONVO));
		sb.append(",TYPERESIL="+TYPERESIL);
		sb.append(",PRIMGRNTOTAL="+String.valueOf(PRIMGRNTOTAL));
		sb.append(",LIBTYPERESIL="+LIBTYPERESIL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfrow4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NUMCNT, other.NUMCNT);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUMAVT, other.NUMAVT);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUMMAJ, other.NUMMAJ);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[0];

	
			    public String NUMCNT;

				public String getNUMCNT () {
					return this.NUMCNT;
				}
				
			    public float NUMAVT;

				public float getNUMAVT () {
					return this.NUMAVT;
				}
				
			    public float NUMMAJ;

				public float getNUMMAJ () {
					return this.NUMMAJ;
				}
				
			    public String CODFAM;

				public String getCODFAM () {
					return this.CODFAM;
				}
				
			    public String CODPROD;

				public String getCODPROD () {
					return this.CODPROD;
				}
				
			    public String FORMCNT;

				public String getFORMCNT () {
					return this.FORMCNT;
				}
				
			    public String NATCLT;

				public String getNATCLT () {
					return this.NATCLT;
				}
				
			    public float IDCLT;

				public float getIDCLT () {
					return this.IDCLT;
				}
				
			    public String NATINT;

				public String getNATINT () {
					return this.NATINT;
				}
				
			    public float IDINT;

				public float getIDINT () {
					return this.IDINT;
				}
				
			    public float IDDELEGA;

				public float getIDDELEGA () {
					return this.IDDELEGA;
				}
				
			    public String PAYS;

				public String getPAYS () {
					return this.PAYS;
				}
				
			    public String MONNAIE;

				public String getMONNAIE () {
					return this.MONNAIE;
				}
				
			    public float ADRCORES;

				public float getADRCORES () {
					return this.ADRCORES;
				}
				
			    public String DUREE;

				public String getDUREE () {
					return this.DUREE;
				}
				
			    public String TYPECNT;

				public String getTYPECNT () {
					return this.TYPECNT;
				}
				
			    public String FRACT;

				public String getFRACT () {
					return this.FRACT;
				}
				
			    public float PRERESIL;

				public float getPRERESIL () {
					return this.PRERESIL;
				}
				
			    public String DEBCNT;

				public String getDEBCNT () {
					return this.DEBCNT;
				}
				
			    public String FINCNT;

				public String getFINCNT () {
					return this.FINCNT;
				}
				
			    public float DEBEFFET;

				public float getDEBEFFET () {
					return this.DEBEFFET;
				}
				
			    public float FINEFFET;

				public float getFINEFFET () {
					return this.FINEFFET;
				}
				
			    public float ECHANNIV;

				public float getECHANNIV () {
					return this.ECHANNIV;
				}
				
			    public float PRTERM;

				public float getPRTERM () {
					return this.PRTERM;
				}
				
			    public String COASSUR;

				public String getCOASSUR () {
					return this.COASSUR;
				}
				
			    public String SURVEIL;

				public String getSURVEIL () {
					return this.SURVEIL;
				}
				
			    public String GENRTAXE;

				public String getGENRTAXE () {
					return this.GENRTAXE;
				}
				
			    public String PRORATA;

				public String getPRORATA () {
					return this.PRORATA;
				}
				
			    public String SITUAT;

				public String getSITUAT () {
					return this.SITUAT;
				}
				
			    public String CNTREMPL;

				public String getCNTREMPL () {
					return this.CNTREMPL;
				}
				
			    public String COMMDERGA;

				public String getCOMMDERGA () {
					return this.COMMDERGA;
				}
				
			    public float TCOMDER;

				public float getTCOMDER () {
					return this.TCOMDER;
				}
				
			    public float CONVO;

				public float getCONVO () {
					return this.CONVO;
				}
				
			    public String CNTANNEX;

				public String getCNTANNEX () {
					return this.CNTANNEX;
				}
				
			    public String GESTIONAI;

				public String getGESTIONAI () {
					return this.GESTIONAI;
				}
				
			    public float DATECREAT;

				public float getDATECREAT () {
					return this.DATECREAT;
				}
				
			    public float DATEPREC;

				public float getDATEPREC () {
					return this.DATEPREC;
				}
				
			    public String TYPERESIL;

				public String getTYPERESIL () {
					return this.TYPERESIL;
				}
				
			    public String GESTPREC;

				public String getGESTPREC () {
					return this.GESTPREC;
				}
				
			    public String ETATVALCN;

				public String getETATVALCN () {
					return this.ETATVALCN;
				}
				
			    public float DATETAVAL;

				public float getDATETAVAL () {
					return this.DATETAVAL;
				}
				
			    public String GESTVAL;

				public String getGESTVAL () {
					return this.GESTVAL;
				}
				
			    public BigDecimal UPDATE_IDENT;

				public BigDecimal getUPDATE_IDENT () {
					return this.UPDATE_IDENT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat) {

        	try {

        		int length = 0;
		
					this.NUMCNT = readString(dis);
					
			        this.NUMAVT = dis.readFloat();
					
			        this.NUMMAJ = dis.readFloat();
					
					this.CODFAM = readString(dis);
					
					this.CODPROD = readString(dis);
					
					this.FORMCNT = readString(dis);
					
					this.NATCLT = readString(dis);
					
			        this.IDCLT = dis.readFloat();
					
					this.NATINT = readString(dis);
					
			        this.IDINT = dis.readFloat();
					
			        this.IDDELEGA = dis.readFloat();
					
					this.PAYS = readString(dis);
					
					this.MONNAIE = readString(dis);
					
			        this.ADRCORES = dis.readFloat();
					
					this.DUREE = readString(dis);
					
					this.TYPECNT = readString(dis);
					
					this.FRACT = readString(dis);
					
			        this.PRERESIL = dis.readFloat();
					
					this.DEBCNT = readString(dis);
					
					this.FINCNT = readString(dis);
					
			        this.DEBEFFET = dis.readFloat();
					
			        this.FINEFFET = dis.readFloat();
					
			        this.ECHANNIV = dis.readFloat();
					
			        this.PRTERM = dis.readFloat();
					
					this.COASSUR = readString(dis);
					
					this.SURVEIL = readString(dis);
					
					this.GENRTAXE = readString(dis);
					
					this.PRORATA = readString(dis);
					
					this.SITUAT = readString(dis);
					
					this.CNTREMPL = readString(dis);
					
					this.COMMDERGA = readString(dis);
					
			        this.TCOMDER = dis.readFloat();
					
			        this.CONVO = dis.readFloat();
					
					this.CNTANNEX = readString(dis);
					
					this.GESTIONAI = readString(dis);
					
			        this.DATECREAT = dis.readFloat();
					
			        this.DATEPREC = dis.readFloat();
					
					this.TYPERESIL = readString(dis);
					
					this.GESTPREC = readString(dis);
					
					this.ETATVALCN = readString(dis);
					
			        this.DATETAVAL = dis.readFloat();
					
					this.GESTVAL = readString(dis);
					
						this.UPDATE_IDENT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.NUMAVT);
					
					// float
				
		            	dos.writeFloat(this.NUMMAJ);
					
					// String
				
						writeString(this.CODFAM,dos);
					
					// String
				
						writeString(this.CODPROD,dos);
					
					// String
				
						writeString(this.FORMCNT,dos);
					
					// String
				
						writeString(this.NATCLT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDCLT);
					
					// String
				
						writeString(this.NATINT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDINT);
					
					// float
				
		            	dos.writeFloat(this.IDDELEGA);
					
					// String
				
						writeString(this.PAYS,dos);
					
					// String
				
						writeString(this.MONNAIE,dos);
					
					// float
				
		            	dos.writeFloat(this.ADRCORES);
					
					// String
				
						writeString(this.DUREE,dos);
					
					// String
				
						writeString(this.TYPECNT,dos);
					
					// String
				
						writeString(this.FRACT,dos);
					
					// float
				
		            	dos.writeFloat(this.PRERESIL);
					
					// String
				
						writeString(this.DEBCNT,dos);
					
					// String
				
						writeString(this.FINCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.DEBEFFET);
					
					// float
				
		            	dos.writeFloat(this.FINEFFET);
					
					// float
				
		            	dos.writeFloat(this.ECHANNIV);
					
					// float
				
		            	dos.writeFloat(this.PRTERM);
					
					// String
				
						writeString(this.COASSUR,dos);
					
					// String
				
						writeString(this.SURVEIL,dos);
					
					// String
				
						writeString(this.GENRTAXE,dos);
					
					// String
				
						writeString(this.PRORATA,dos);
					
					// String
				
						writeString(this.SITUAT,dos);
					
					// String
				
						writeString(this.CNTREMPL,dos);
					
					// String
				
						writeString(this.COMMDERGA,dos);
					
					// float
				
		            	dos.writeFloat(this.TCOMDER);
					
					// float
				
		            	dos.writeFloat(this.CONVO);
					
					// String
				
						writeString(this.CNTANNEX,dos);
					
					// String
				
						writeString(this.GESTIONAI,dos);
					
					// float
				
		            	dos.writeFloat(this.DATECREAT);
					
					// float
				
		            	dos.writeFloat(this.DATEPREC);
					
					// String
				
						writeString(this.TYPERESIL,dos);
					
					// String
				
						writeString(this.GESTPREC,dos);
					
					// String
				
						writeString(this.ETATVALCN,dos);
					
					// float
				
		            	dos.writeFloat(this.DATETAVAL);
					
					// String
				
						writeString(this.GESTVAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UPDATE_IDENT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMCNT="+NUMCNT);
		sb.append(",NUMAVT="+String.valueOf(NUMAVT));
		sb.append(",NUMMAJ="+String.valueOf(NUMMAJ));
		sb.append(",CODFAM="+CODFAM);
		sb.append(",CODPROD="+CODPROD);
		sb.append(",FORMCNT="+FORMCNT);
		sb.append(",NATCLT="+NATCLT);
		sb.append(",IDCLT="+String.valueOf(IDCLT));
		sb.append(",NATINT="+NATINT);
		sb.append(",IDINT="+String.valueOf(IDINT));
		sb.append(",IDDELEGA="+String.valueOf(IDDELEGA));
		sb.append(",PAYS="+PAYS);
		sb.append(",MONNAIE="+MONNAIE);
		sb.append(",ADRCORES="+String.valueOf(ADRCORES));
		sb.append(",DUREE="+DUREE);
		sb.append(",TYPECNT="+TYPECNT);
		sb.append(",FRACT="+FRACT);
		sb.append(",PRERESIL="+String.valueOf(PRERESIL));
		sb.append(",DEBCNT="+DEBCNT);
		sb.append(",FINCNT="+FINCNT);
		sb.append(",DEBEFFET="+String.valueOf(DEBEFFET));
		sb.append(",FINEFFET="+String.valueOf(FINEFFET));
		sb.append(",ECHANNIV="+String.valueOf(ECHANNIV));
		sb.append(",PRTERM="+String.valueOf(PRTERM));
		sb.append(",COASSUR="+COASSUR);
		sb.append(",SURVEIL="+SURVEIL);
		sb.append(",GENRTAXE="+GENRTAXE);
		sb.append(",PRORATA="+PRORATA);
		sb.append(",SITUAT="+SITUAT);
		sb.append(",CNTREMPL="+CNTREMPL);
		sb.append(",COMMDERGA="+COMMDERGA);
		sb.append(",TCOMDER="+String.valueOf(TCOMDER));
		sb.append(",CONVO="+String.valueOf(CONVO));
		sb.append(",CNTANNEX="+CNTANNEX);
		sb.append(",GESTIONAI="+GESTIONAI);
		sb.append(",DATECREAT="+String.valueOf(DATECREAT));
		sb.append(",DATEPREC="+String.valueOf(DATEPREC));
		sb.append(",TYPERESIL="+TYPERESIL);
		sb.append(",GESTPREC="+GESTPREC);
		sb.append(",ETATVALCN="+ETATVALCN);
		sb.append(",DATETAVAL="+String.valueOf(DATETAVAL));
		sb.append(",GESTVAL="+GESTVAL);
		sb.append(",UPDATE_IDENT="+String.valueOf(UPDATE_IDENT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[0];

	
			    public String NUMCNT;

				public String getNUMCNT () {
					return this.NUMCNT;
				}
				
			    public float NUMAVT;

				public float getNUMAVT () {
					return this.NUMAVT;
				}
				
			    public float NUMMAJ;

				public float getNUMMAJ () {
					return this.NUMMAJ;
				}
				
			    public String CODFAM;

				public String getCODFAM () {
					return this.CODFAM;
				}
				
			    public String CODPROD;

				public String getCODPROD () {
					return this.CODPROD;
				}
				
			    public String FORMCNT;

				public String getFORMCNT () {
					return this.FORMCNT;
				}
				
			    public String NATCLT;

				public String getNATCLT () {
					return this.NATCLT;
				}
				
			    public float IDCLT;

				public float getIDCLT () {
					return this.IDCLT;
				}
				
			    public String NATINT;

				public String getNATINT () {
					return this.NATINT;
				}
				
			    public float IDINT;

				public float getIDINT () {
					return this.IDINT;
				}
				
			    public float IDDELEGA;

				public float getIDDELEGA () {
					return this.IDDELEGA;
				}
				
			    public String PAYS;

				public String getPAYS () {
					return this.PAYS;
				}
				
			    public String MONNAIE;

				public String getMONNAIE () {
					return this.MONNAIE;
				}
				
			    public float ADRCORES;

				public float getADRCORES () {
					return this.ADRCORES;
				}
				
			    public String DUREE;

				public String getDUREE () {
					return this.DUREE;
				}
				
			    public String TYPECNT;

				public String getTYPECNT () {
					return this.TYPECNT;
				}
				
			    public String FRACT;

				public String getFRACT () {
					return this.FRACT;
				}
				
			    public float PRERESIL;

				public float getPRERESIL () {
					return this.PRERESIL;
				}
				
			    public String DEBCNT;

				public String getDEBCNT () {
					return this.DEBCNT;
				}
				
			    public String FINCNT;

				public String getFINCNT () {
					return this.FINCNT;
				}
				
			    public float DEBEFFET;

				public float getDEBEFFET () {
					return this.DEBEFFET;
				}
				
			    public float FINEFFET;

				public float getFINEFFET () {
					return this.FINEFFET;
				}
				
			    public float ECHANNIV;

				public float getECHANNIV () {
					return this.ECHANNIV;
				}
				
			    public float PRTERM;

				public float getPRTERM () {
					return this.PRTERM;
				}
				
			    public String COASSUR;

				public String getCOASSUR () {
					return this.COASSUR;
				}
				
			    public String SURVEIL;

				public String getSURVEIL () {
					return this.SURVEIL;
				}
				
			    public String GENRTAXE;

				public String getGENRTAXE () {
					return this.GENRTAXE;
				}
				
			    public String PRORATA;

				public String getPRORATA () {
					return this.PRORATA;
				}
				
			    public String SITUAT;

				public String getSITUAT () {
					return this.SITUAT;
				}
				
			    public String CNTREMPL;

				public String getCNTREMPL () {
					return this.CNTREMPL;
				}
				
			    public String COMMDERGA;

				public String getCOMMDERGA () {
					return this.COMMDERGA;
				}
				
			    public float TCOMDER;

				public float getTCOMDER () {
					return this.TCOMDER;
				}
				
			    public float CONVO;

				public float getCONVO () {
					return this.CONVO;
				}
				
			    public String CNTANNEX;

				public String getCNTANNEX () {
					return this.CNTANNEX;
				}
				
			    public String GESTIONAI;

				public String getGESTIONAI () {
					return this.GESTIONAI;
				}
				
			    public float DATECREAT;

				public float getDATECREAT () {
					return this.DATECREAT;
				}
				
			    public float DATEPREC;

				public float getDATEPREC () {
					return this.DATEPREC;
				}
				
			    public String TYPERESIL;

				public String getTYPERESIL () {
					return this.TYPERESIL;
				}
				
			    public String GESTPREC;

				public String getGESTPREC () {
					return this.GESTPREC;
				}
				
			    public String ETATVALCN;

				public String getETATVALCN () {
					return this.ETATVALCN;
				}
				
			    public float DATETAVAL;

				public float getDATETAVAL () {
					return this.DATETAVAL;
				}
				
			    public String GESTVAL;

				public String getGESTVAL () {
					return this.GESTVAL;
				}
				
			    public BigDecimal UPDATE_IDENT;

				public BigDecimal getUPDATE_IDENT () {
					return this.UPDATE_IDENT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat) {

        	try {

        		int length = 0;
		
					this.NUMCNT = readString(dis);
					
			        this.NUMAVT = dis.readFloat();
					
			        this.NUMMAJ = dis.readFloat();
					
					this.CODFAM = readString(dis);
					
					this.CODPROD = readString(dis);
					
					this.FORMCNT = readString(dis);
					
					this.NATCLT = readString(dis);
					
			        this.IDCLT = dis.readFloat();
					
					this.NATINT = readString(dis);
					
			        this.IDINT = dis.readFloat();
					
			        this.IDDELEGA = dis.readFloat();
					
					this.PAYS = readString(dis);
					
					this.MONNAIE = readString(dis);
					
			        this.ADRCORES = dis.readFloat();
					
					this.DUREE = readString(dis);
					
					this.TYPECNT = readString(dis);
					
					this.FRACT = readString(dis);
					
			        this.PRERESIL = dis.readFloat();
					
					this.DEBCNT = readString(dis);
					
					this.FINCNT = readString(dis);
					
			        this.DEBEFFET = dis.readFloat();
					
			        this.FINEFFET = dis.readFloat();
					
			        this.ECHANNIV = dis.readFloat();
					
			        this.PRTERM = dis.readFloat();
					
					this.COASSUR = readString(dis);
					
					this.SURVEIL = readString(dis);
					
					this.GENRTAXE = readString(dis);
					
					this.PRORATA = readString(dis);
					
					this.SITUAT = readString(dis);
					
					this.CNTREMPL = readString(dis);
					
					this.COMMDERGA = readString(dis);
					
			        this.TCOMDER = dis.readFloat();
					
			        this.CONVO = dis.readFloat();
					
					this.CNTANNEX = readString(dis);
					
					this.GESTIONAI = readString(dis);
					
			        this.DATECREAT = dis.readFloat();
					
			        this.DATEPREC = dis.readFloat();
					
					this.TYPERESIL = readString(dis);
					
					this.GESTPREC = readString(dis);
					
					this.ETATVALCN = readString(dis);
					
			        this.DATETAVAL = dis.readFloat();
					
					this.GESTVAL = readString(dis);
					
						this.UPDATE_IDENT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.NUMAVT);
					
					// float
				
		            	dos.writeFloat(this.NUMMAJ);
					
					// String
				
						writeString(this.CODFAM,dos);
					
					// String
				
						writeString(this.CODPROD,dos);
					
					// String
				
						writeString(this.FORMCNT,dos);
					
					// String
				
						writeString(this.NATCLT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDCLT);
					
					// String
				
						writeString(this.NATINT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDINT);
					
					// float
				
		            	dos.writeFloat(this.IDDELEGA);
					
					// String
				
						writeString(this.PAYS,dos);
					
					// String
				
						writeString(this.MONNAIE,dos);
					
					// float
				
		            	dos.writeFloat(this.ADRCORES);
					
					// String
				
						writeString(this.DUREE,dos);
					
					// String
				
						writeString(this.TYPECNT,dos);
					
					// String
				
						writeString(this.FRACT,dos);
					
					// float
				
		            	dos.writeFloat(this.PRERESIL);
					
					// String
				
						writeString(this.DEBCNT,dos);
					
					// String
				
						writeString(this.FINCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.DEBEFFET);
					
					// float
				
		            	dos.writeFloat(this.FINEFFET);
					
					// float
				
		            	dos.writeFloat(this.ECHANNIV);
					
					// float
				
		            	dos.writeFloat(this.PRTERM);
					
					// String
				
						writeString(this.COASSUR,dos);
					
					// String
				
						writeString(this.SURVEIL,dos);
					
					// String
				
						writeString(this.GENRTAXE,dos);
					
					// String
				
						writeString(this.PRORATA,dos);
					
					// String
				
						writeString(this.SITUAT,dos);
					
					// String
				
						writeString(this.CNTREMPL,dos);
					
					// String
				
						writeString(this.COMMDERGA,dos);
					
					// float
				
		            	dos.writeFloat(this.TCOMDER);
					
					// float
				
		            	dos.writeFloat(this.CONVO);
					
					// String
				
						writeString(this.CNTANNEX,dos);
					
					// String
				
						writeString(this.GESTIONAI,dos);
					
					// float
				
		            	dos.writeFloat(this.DATECREAT);
					
					// float
				
		            	dos.writeFloat(this.DATEPREC);
					
					// String
				
						writeString(this.TYPERESIL,dos);
					
					// String
				
						writeString(this.GESTPREC,dos);
					
					// String
				
						writeString(this.ETATVALCN,dos);
					
					// float
				
		            	dos.writeFloat(this.DATETAVAL);
					
					// String
				
						writeString(this.GESTVAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UPDATE_IDENT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMCNT="+NUMCNT);
		sb.append(",NUMAVT="+String.valueOf(NUMAVT));
		sb.append(",NUMMAJ="+String.valueOf(NUMMAJ));
		sb.append(",CODFAM="+CODFAM);
		sb.append(",CODPROD="+CODPROD);
		sb.append(",FORMCNT="+FORMCNT);
		sb.append(",NATCLT="+NATCLT);
		sb.append(",IDCLT="+String.valueOf(IDCLT));
		sb.append(",NATINT="+NATINT);
		sb.append(",IDINT="+String.valueOf(IDINT));
		sb.append(",IDDELEGA="+String.valueOf(IDDELEGA));
		sb.append(",PAYS="+PAYS);
		sb.append(",MONNAIE="+MONNAIE);
		sb.append(",ADRCORES="+String.valueOf(ADRCORES));
		sb.append(",DUREE="+DUREE);
		sb.append(",TYPECNT="+TYPECNT);
		sb.append(",FRACT="+FRACT);
		sb.append(",PRERESIL="+String.valueOf(PRERESIL));
		sb.append(",DEBCNT="+DEBCNT);
		sb.append(",FINCNT="+FINCNT);
		sb.append(",DEBEFFET="+String.valueOf(DEBEFFET));
		sb.append(",FINEFFET="+String.valueOf(FINEFFET));
		sb.append(",ECHANNIV="+String.valueOf(ECHANNIV));
		sb.append(",PRTERM="+String.valueOf(PRTERM));
		sb.append(",COASSUR="+COASSUR);
		sb.append(",SURVEIL="+SURVEIL);
		sb.append(",GENRTAXE="+GENRTAXE);
		sb.append(",PRORATA="+PRORATA);
		sb.append(",SITUAT="+SITUAT);
		sb.append(",CNTREMPL="+CNTREMPL);
		sb.append(",COMMDERGA="+COMMDERGA);
		sb.append(",TCOMDER="+String.valueOf(TCOMDER));
		sb.append(",CONVO="+String.valueOf(CONVO));
		sb.append(",CNTANNEX="+CNTANNEX);
		sb.append(",GESTIONAI="+GESTIONAI);
		sb.append(",DATECREAT="+String.valueOf(DATECREAT));
		sb.append(",DATEPREC="+String.valueOf(DATEPREC));
		sb.append(",TYPERESIL="+TYPERESIL);
		sb.append(",GESTPREC="+GESTPREC);
		sb.append(",ETATVALCN="+ETATVALCN);
		sb.append(",DATETAVAL="+String.valueOf(DATETAVAL));
		sb.append(",GESTVAL="+GESTVAL);
		sb.append(",UPDATE_IDENT="+String.valueOf(UPDATE_IDENT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_3Struct implements routines.system.IPersistableRow<after_tDBInput_3Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String NUMCNT;

				public String getNUMCNT () {
					return this.NUMCNT;
				}
				
			    public float NUMAVT;

				public float getNUMAVT () {
					return this.NUMAVT;
				}
				
			    public float NUMMAJ;

				public float getNUMMAJ () {
					return this.NUMMAJ;
				}
				
			    public String CODFAM;

				public String getCODFAM () {
					return this.CODFAM;
				}
				
			    public String CODPROD;

				public String getCODPROD () {
					return this.CODPROD;
				}
				
			    public String FORMCNT;

				public String getFORMCNT () {
					return this.FORMCNT;
				}
				
			    public String NATCLT;

				public String getNATCLT () {
					return this.NATCLT;
				}
				
			    public float IDCLT;

				public float getIDCLT () {
					return this.IDCLT;
				}
				
			    public String NATINT;

				public String getNATINT () {
					return this.NATINT;
				}
				
			    public float IDINT;

				public float getIDINT () {
					return this.IDINT;
				}
				
			    public float IDDELEGA;

				public float getIDDELEGA () {
					return this.IDDELEGA;
				}
				
			    public String PAYS;

				public String getPAYS () {
					return this.PAYS;
				}
				
			    public String MONNAIE;

				public String getMONNAIE () {
					return this.MONNAIE;
				}
				
			    public float ADRCORES;

				public float getADRCORES () {
					return this.ADRCORES;
				}
				
			    public String DUREE;

				public String getDUREE () {
					return this.DUREE;
				}
				
			    public String TYPECNT;

				public String getTYPECNT () {
					return this.TYPECNT;
				}
				
			    public String FRACT;

				public String getFRACT () {
					return this.FRACT;
				}
				
			    public float PRERESIL;

				public float getPRERESIL () {
					return this.PRERESIL;
				}
				
			    public String DEBCNT;

				public String getDEBCNT () {
					return this.DEBCNT;
				}
				
			    public String FINCNT;

				public String getFINCNT () {
					return this.FINCNT;
				}
				
			    public float DEBEFFET;

				public float getDEBEFFET () {
					return this.DEBEFFET;
				}
				
			    public float FINEFFET;

				public float getFINEFFET () {
					return this.FINEFFET;
				}
				
			    public float ECHANNIV;

				public float getECHANNIV () {
					return this.ECHANNIV;
				}
				
			    public float PRTERM;

				public float getPRTERM () {
					return this.PRTERM;
				}
				
			    public String COASSUR;

				public String getCOASSUR () {
					return this.COASSUR;
				}
				
			    public String SURVEIL;

				public String getSURVEIL () {
					return this.SURVEIL;
				}
				
			    public String GENRTAXE;

				public String getGENRTAXE () {
					return this.GENRTAXE;
				}
				
			    public String PRORATA;

				public String getPRORATA () {
					return this.PRORATA;
				}
				
			    public String SITUAT;

				public String getSITUAT () {
					return this.SITUAT;
				}
				
			    public String CNTREMPL;

				public String getCNTREMPL () {
					return this.CNTREMPL;
				}
				
			    public String COMMDERGA;

				public String getCOMMDERGA () {
					return this.COMMDERGA;
				}
				
			    public float TCOMDER;

				public float getTCOMDER () {
					return this.TCOMDER;
				}
				
			    public float CONVO;

				public float getCONVO () {
					return this.CONVO;
				}
				
			    public String CNTANNEX;

				public String getCNTANNEX () {
					return this.CNTANNEX;
				}
				
			    public String GESTIONAI;

				public String getGESTIONAI () {
					return this.GESTIONAI;
				}
				
			    public float DATECREAT;

				public float getDATECREAT () {
					return this.DATECREAT;
				}
				
			    public float DATEPREC;

				public float getDATEPREC () {
					return this.DATEPREC;
				}
				
			    public String TYPERESIL;

				public String getTYPERESIL () {
					return this.TYPERESIL;
				}
				
			    public String GESTPREC;

				public String getGESTPREC () {
					return this.GESTPREC;
				}
				
			    public String ETATVALCN;

				public String getETATVALCN () {
					return this.ETATVALCN;
				}
				
			    public float DATETAVAL;

				public float getDATETAVAL () {
					return this.DATETAVAL;
				}
				
			    public String GESTVAL;

				public String getGESTVAL () {
					return this.GESTVAL;
				}
				
			    public BigDecimal UPDATE_IDENT;

				public BigDecimal getUPDATE_IDENT () {
					return this.UPDATE_IDENT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NUMCNT == null) ? 0 : this.NUMCNT.hashCode());
					
							result = prime * result + (int) this.NUMAVT;
						
							result = prime * result + (int) this.NUMMAJ;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_3Struct other = (after_tDBInput_3Struct) obj;
		
						if (this.NUMCNT == null) {
							if (other.NUMCNT != null)
								return false;
						
						} else if (!this.NUMCNT.equals(other.NUMCNT))
						
							return false;
					
						if (this.NUMAVT != other.NUMAVT)
							return false;
					
						if (this.NUMMAJ != other.NUMMAJ)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_3Struct other) {

		other.NUMCNT = this.NUMCNT;
	            other.NUMAVT = this.NUMAVT;
	            other.NUMMAJ = this.NUMMAJ;
	            other.CODFAM = this.CODFAM;
	            other.CODPROD = this.CODPROD;
	            other.FORMCNT = this.FORMCNT;
	            other.NATCLT = this.NATCLT;
	            other.IDCLT = this.IDCLT;
	            other.NATINT = this.NATINT;
	            other.IDINT = this.IDINT;
	            other.IDDELEGA = this.IDDELEGA;
	            other.PAYS = this.PAYS;
	            other.MONNAIE = this.MONNAIE;
	            other.ADRCORES = this.ADRCORES;
	            other.DUREE = this.DUREE;
	            other.TYPECNT = this.TYPECNT;
	            other.FRACT = this.FRACT;
	            other.PRERESIL = this.PRERESIL;
	            other.DEBCNT = this.DEBCNT;
	            other.FINCNT = this.FINCNT;
	            other.DEBEFFET = this.DEBEFFET;
	            other.FINEFFET = this.FINEFFET;
	            other.ECHANNIV = this.ECHANNIV;
	            other.PRTERM = this.PRTERM;
	            other.COASSUR = this.COASSUR;
	            other.SURVEIL = this.SURVEIL;
	            other.GENRTAXE = this.GENRTAXE;
	            other.PRORATA = this.PRORATA;
	            other.SITUAT = this.SITUAT;
	            other.CNTREMPL = this.CNTREMPL;
	            other.COMMDERGA = this.COMMDERGA;
	            other.TCOMDER = this.TCOMDER;
	            other.CONVO = this.CONVO;
	            other.CNTANNEX = this.CNTANNEX;
	            other.GESTIONAI = this.GESTIONAI;
	            other.DATECREAT = this.DATECREAT;
	            other.DATEPREC = this.DATEPREC;
	            other.TYPERESIL = this.TYPERESIL;
	            other.GESTPREC = this.GESTPREC;
	            other.ETATVALCN = this.ETATVALCN;
	            other.DATETAVAL = this.DATETAVAL;
	            other.GESTVAL = this.GESTVAL;
	            other.UPDATE_IDENT = this.UPDATE_IDENT;
	            
	}

	public void copyKeysDataTo(after_tDBInput_3Struct other) {

		other.NUMCNT = this.NUMCNT;
	            	other.NUMAVT = this.NUMAVT;
	            	other.NUMMAJ = this.NUMMAJ;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat) {

        	try {

        		int length = 0;
		
					this.NUMCNT = readString(dis);
					
			        this.NUMAVT = dis.readFloat();
					
			        this.NUMMAJ = dis.readFloat();
					
					this.CODFAM = readString(dis);
					
					this.CODPROD = readString(dis);
					
					this.FORMCNT = readString(dis);
					
					this.NATCLT = readString(dis);
					
			        this.IDCLT = dis.readFloat();
					
					this.NATINT = readString(dis);
					
			        this.IDINT = dis.readFloat();
					
			        this.IDDELEGA = dis.readFloat();
					
					this.PAYS = readString(dis);
					
					this.MONNAIE = readString(dis);
					
			        this.ADRCORES = dis.readFloat();
					
					this.DUREE = readString(dis);
					
					this.TYPECNT = readString(dis);
					
					this.FRACT = readString(dis);
					
			        this.PRERESIL = dis.readFloat();
					
					this.DEBCNT = readString(dis);
					
					this.FINCNT = readString(dis);
					
			        this.DEBEFFET = dis.readFloat();
					
			        this.FINEFFET = dis.readFloat();
					
			        this.ECHANNIV = dis.readFloat();
					
			        this.PRTERM = dis.readFloat();
					
					this.COASSUR = readString(dis);
					
					this.SURVEIL = readString(dis);
					
					this.GENRTAXE = readString(dis);
					
					this.PRORATA = readString(dis);
					
					this.SITUAT = readString(dis);
					
					this.CNTREMPL = readString(dis);
					
					this.COMMDERGA = readString(dis);
					
			        this.TCOMDER = dis.readFloat();
					
			        this.CONVO = dis.readFloat();
					
					this.CNTANNEX = readString(dis);
					
					this.GESTIONAI = readString(dis);
					
			        this.DATECREAT = dis.readFloat();
					
			        this.DATEPREC = dis.readFloat();
					
					this.TYPERESIL = readString(dis);
					
					this.GESTPREC = readString(dis);
					
					this.ETATVALCN = readString(dis);
					
			        this.DATETAVAL = dis.readFloat();
					
					this.GESTVAL = readString(dis);
					
						this.UPDATE_IDENT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.NUMAVT);
					
					// float
				
		            	dos.writeFloat(this.NUMMAJ);
					
					// String
				
						writeString(this.CODFAM,dos);
					
					// String
				
						writeString(this.CODPROD,dos);
					
					// String
				
						writeString(this.FORMCNT,dos);
					
					// String
				
						writeString(this.NATCLT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDCLT);
					
					// String
				
						writeString(this.NATINT,dos);
					
					// float
				
		            	dos.writeFloat(this.IDINT);
					
					// float
				
		            	dos.writeFloat(this.IDDELEGA);
					
					// String
				
						writeString(this.PAYS,dos);
					
					// String
				
						writeString(this.MONNAIE,dos);
					
					// float
				
		            	dos.writeFloat(this.ADRCORES);
					
					// String
				
						writeString(this.DUREE,dos);
					
					// String
				
						writeString(this.TYPECNT,dos);
					
					// String
				
						writeString(this.FRACT,dos);
					
					// float
				
		            	dos.writeFloat(this.PRERESIL);
					
					// String
				
						writeString(this.DEBCNT,dos);
					
					// String
				
						writeString(this.FINCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.DEBEFFET);
					
					// float
				
		            	dos.writeFloat(this.FINEFFET);
					
					// float
				
		            	dos.writeFloat(this.ECHANNIV);
					
					// float
				
		            	dos.writeFloat(this.PRTERM);
					
					// String
				
						writeString(this.COASSUR,dos);
					
					// String
				
						writeString(this.SURVEIL,dos);
					
					// String
				
						writeString(this.GENRTAXE,dos);
					
					// String
				
						writeString(this.PRORATA,dos);
					
					// String
				
						writeString(this.SITUAT,dos);
					
					// String
				
						writeString(this.CNTREMPL,dos);
					
					// String
				
						writeString(this.COMMDERGA,dos);
					
					// float
				
		            	dos.writeFloat(this.TCOMDER);
					
					// float
				
		            	dos.writeFloat(this.CONVO);
					
					// String
				
						writeString(this.CNTANNEX,dos);
					
					// String
				
						writeString(this.GESTIONAI,dos);
					
					// float
				
		            	dos.writeFloat(this.DATECREAT);
					
					// float
				
		            	dos.writeFloat(this.DATEPREC);
					
					// String
				
						writeString(this.TYPERESIL,dos);
					
					// String
				
						writeString(this.GESTPREC,dos);
					
					// String
				
						writeString(this.ETATVALCN,dos);
					
					// float
				
		            	dos.writeFloat(this.DATETAVAL);
					
					// String
				
						writeString(this.GESTVAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UPDATE_IDENT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMCNT="+NUMCNT);
		sb.append(",NUMAVT="+String.valueOf(NUMAVT));
		sb.append(",NUMMAJ="+String.valueOf(NUMMAJ));
		sb.append(",CODFAM="+CODFAM);
		sb.append(",CODPROD="+CODPROD);
		sb.append(",FORMCNT="+FORMCNT);
		sb.append(",NATCLT="+NATCLT);
		sb.append(",IDCLT="+String.valueOf(IDCLT));
		sb.append(",NATINT="+NATINT);
		sb.append(",IDINT="+String.valueOf(IDINT));
		sb.append(",IDDELEGA="+String.valueOf(IDDELEGA));
		sb.append(",PAYS="+PAYS);
		sb.append(",MONNAIE="+MONNAIE);
		sb.append(",ADRCORES="+String.valueOf(ADRCORES));
		sb.append(",DUREE="+DUREE);
		sb.append(",TYPECNT="+TYPECNT);
		sb.append(",FRACT="+FRACT);
		sb.append(",PRERESIL="+String.valueOf(PRERESIL));
		sb.append(",DEBCNT="+DEBCNT);
		sb.append(",FINCNT="+FINCNT);
		sb.append(",DEBEFFET="+String.valueOf(DEBEFFET));
		sb.append(",FINEFFET="+String.valueOf(FINEFFET));
		sb.append(",ECHANNIV="+String.valueOf(ECHANNIV));
		sb.append(",PRTERM="+String.valueOf(PRTERM));
		sb.append(",COASSUR="+COASSUR);
		sb.append(",SURVEIL="+SURVEIL);
		sb.append(",GENRTAXE="+GENRTAXE);
		sb.append(",PRORATA="+PRORATA);
		sb.append(",SITUAT="+SITUAT);
		sb.append(",CNTREMPL="+CNTREMPL);
		sb.append(",COMMDERGA="+COMMDERGA);
		sb.append(",TCOMDER="+String.valueOf(TCOMDER));
		sb.append(",CONVO="+String.valueOf(CONVO));
		sb.append(",CNTANNEX="+CNTANNEX);
		sb.append(",GESTIONAI="+GESTIONAI);
		sb.append(",DATECREAT="+String.valueOf(DATECREAT));
		sb.append(",DATEPREC="+String.valueOf(DATEPREC));
		sb.append(",TYPERESIL="+TYPERESIL);
		sb.append(",GESTPREC="+GESTPREC);
		sb.append(",ETATVALCN="+ETATVALCN);
		sb.append(",DATETAVAL="+String.valueOf(DATETAVAL));
		sb.append(",GESTVAL="+GESTVAL);
		sb.append(",UPDATE_IDENT="+String.valueOf(UPDATE_IDENT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NUMCNT, other.NUMCNT);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUMAVT, other.NUMAVT);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUMMAJ, other.NUMMAJ);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);
		tDBInput_5Process(globalMap);

		row5Struct row5 = new row5Struct();
row13Struct row13 = new row13Struct();
copyOfrow4Struct copyOfrow4 = new copyOfrow4Struct();
row7Struct row7 = new row7Struct();







	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = "";
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("Contrat");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("Contrat");
}

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+"localhost"+":"+"5432"+"/"+"AMI_Assurances";
    dbUser_tDBOutput_2 = "postgres";
 
	final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:2629z9uk49n9ymWg57RzthK08YBDQyvm956CikaIkQm02lf89+dg0w==");

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_2 = "public";
                                    if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_2 = conn_tDBOutput_2.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_2 = stmtSchema_tDBOutput_2.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_2.next()){
                                                defaultSchema_tDBOutput_2 = rsSchema_tDBOutput_2.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_2.next()) {
                                        String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
                                        String schema_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_2.equals(("Contrat"))
                                            && (schema_tDBOutput_2.equals(dbschema_tDBOutput_2) || ((dbschema_tDBOutput_2 ==null || dbschema_tDBOutput_2.trim().length() ==0) && defaultSchema_tDBOutput_2.equals(schema_tDBOutput_2)))) {
                                            whetherExist_tDBOutput_2 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtDrop_tDBOutput_2.execute("DROP TABLE \"" + tableName_tDBOutput_2 + "\"" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                    stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2 + "\"(\"NUMCNT\" VARCHAR(15)   not null ,\"NUMAVT\" NUMERIC(3,0)   not null ,\"NUMMAJ\" NUMERIC(3,0)   not null ,\"CODPROD\" VARCHAR(3)   not null ,\"FORMCNT\" VARCHAR(2)   not null ,\"NATINT\" VARCHAR(2)   not null ,\"IDINT\" VARCHAR(10)   not null ,\"DUREE\" VARCHAR(1)   not null ,\"FRACT\" VARCHAR(1)   not null ,\"DEBCNT\" TIMESTAMP(10)   not null ,\"FINCNT\" TIMESTAMP(10)  ,\"SITUAT\" VARCHAR(1)   not null ,\"CONVO\" NUMERIC(10,0)   not null ,\"TYPERESIL\" VARCHAR(3)   not null ,\"PRIMGRNTOTAL\" NUMERIC(12,3)  ,\"LIBTYPERESIL\" VARCHAR ,primary key(\"NUMCNT\",\"NUMAVT\",\"NUMMAJ\"))");
                                }
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"NUMCNT\",\"NUMAVT\",\"NUMMAJ\",\"CODPROD\",\"FORMCNT\",\"NATINT\",\"IDINT\",\"DUREE\",\"FRACT\",\"DEBCNT\",\"FINCNT\",\"SITUAT\",\"CONVO\",\"TYPERESIL\",\"PRIMGRNTOTAL\",\"LIBTYPERESIL\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfrow4");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String NUMCNT;
					float NUMAVT;
					float NUMMAJ;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.NUMCNT == null) ? 0 : this.NUMCNT.hashCode());
								
									result = prime * result + (int) this.NUMAVT;
									
									result = prime * result + (int) this.NUMMAJ;
									
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.NUMCNT == null) {
										if (other.NUMCNT != null) 
											return false;
								
									} else if (!this.NUMCNT.equals(other.NUMCNT))
								 
										return false;
								
									if (this.NUMAVT != other.NUMAVT) 
										return false;
								
									if (this.NUMMAJ != other.NUMMAJ) 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
					globalMap.get( "tHash_Lookup_row11" ))
					;					
					
	

row11Struct row11HashKey = new row11Struct();
row11Struct row11Default = new row11Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	int var3;
	String var4;
	String var10;
	java.util.Date var11;
	int var5;
	String var6;
	String var1;
	java.util.Date var2;
	String var7;
	String var13;
	int var8;
	String var9;
	String var12;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfrow4Struct copyOfrow4_tmp = new copyOfrow4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
	String var1;
	String var2;
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
row13Struct row13_tmp = new row13Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "STGPFE01";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:UBlezLMmKaJ2RsPZpjmW8apTChuNyESn7eipinnfq1TVqas=");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				  
				String url_tDBInput_3 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  PRTB001.NUMCNT, \n  PRTB001.NUMAVT, \n  PRTB001.NUMMAJ, \n  PRTB001.CODFAM, \n  PRTB001.CODPROD, \n  PRTB001.FORMC"
+"NT, \n  PRTB001.NATCLT, \n  PRTB001.IDCLT, \n  PRTB001.NATINT, \n  PRTB001.IDINT, \n  PRTB001.IDDELEGA, \n  PRTB001.PAYS, \n  P"
+"RTB001.MONNAIE, \n  PRTB001.ADRCORES, \n  PRTB001.DUREE, \n  PRTB001.TYPECNT, \n  PRTB001.FRACT, \n  PRTB001.PRERESIL, \n  PRT"
+"B001.DEBCNT, \n  PRTB001.FINCNT, \n  PRTB001.DEBEFFET, \n  PRTB001.FINEFFET, \n  PRTB001.ECHANNIV, \n  PRTB001.PRTERM, \n  PRT"
+"B001.COASSUR, \n  PRTB001.SURVEIL, \n  PRTB001.GENRTAXE, \n  PRTB001.PRORATA, \n  PRTB001.SITUAT, \n  PRTB001.CNTREMPL, \n  PR"
+"TB001.COMMDERGA, \n  PRTB001.TCOMDER, \n  PRTB001.CONVO, \n  PRTB001.CNTANNEX, \n  PRTB001.GESTIONAI, \n  PRTB001.DATECREAT, "
+"\n  PRTB001.DATEPREC, \n  PRTB001.TYPERESIL, \n  PRTB001.GESTPREC, \n  PRTB001.ETATVALCN, \n  PRTB001.DATETAVAL, \n  PRTB001.G"
+"ESTVAL, \n  PRTB001.UPDATE_IDENT\nFROM PRTB001";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row5.NUMCNT = null;
							} else {
	                         		
        	row5.NUMCNT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row5.NUMAVT = 0;
							} else {
		                          
            row5.NUMAVT = rs_tDBInput_3.getFloat(2);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row5.NUMMAJ = 0;
							} else {
		                          
            row5.NUMMAJ = rs_tDBInput_3.getFloat(3);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row5.CODFAM = null;
							} else {
	                         		
        	row5.CODFAM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row5.CODPROD = null;
							} else {
	                         		
        	row5.CODPROD = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row5.FORMCNT = null;
							} else {
	                         		
        	row5.FORMCNT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row5.NATCLT = null;
							} else {
	                         		
        	row5.NATCLT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row5.IDCLT = 0;
							} else {
		                          
            row5.IDCLT = rs_tDBInput_3.getFloat(8);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row5.NATINT = null;
							} else {
	                         		
        	row5.NATINT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row5.IDINT = 0;
							} else {
		                          
            row5.IDINT = rs_tDBInput_3.getFloat(10);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row5.IDDELEGA = 0;
							} else {
		                          
            row5.IDDELEGA = rs_tDBInput_3.getFloat(11);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row5.PAYS = null;
							} else {
	                         		
        	row5.PAYS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 12, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row5.MONNAIE = null;
							} else {
	                         		
        	row5.MONNAIE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 13, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row5.ADRCORES = 0;
							} else {
		                          
            row5.ADRCORES = rs_tDBInput_3.getFloat(14);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row5.DUREE = null;
							} else {
	                         		
        	row5.DUREE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row5.TYPECNT = null;
							} else {
	                         		
        	row5.TYPECNT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 16, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row5.FRACT = null;
							} else {
	                         		
        	row5.FRACT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 17, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 18) {
								row5.PRERESIL = 0;
							} else {
		                          
            row5.PRERESIL = rs_tDBInput_3.getFloat(18);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 19) {
								row5.DEBCNT = null;
							} else {
	                         		
        	row5.DEBCNT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 19, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 20) {
								row5.FINCNT = null;
							} else {
	                         		
        	row5.FINCNT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 20, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 21) {
								row5.DEBEFFET = 0;
							} else {
		                          
            row5.DEBEFFET = rs_tDBInput_3.getFloat(21);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 22) {
								row5.FINEFFET = 0;
							} else {
		                          
            row5.FINEFFET = rs_tDBInput_3.getFloat(22);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 23) {
								row5.ECHANNIV = 0;
							} else {
		                          
            row5.ECHANNIV = rs_tDBInput_3.getFloat(23);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 24) {
								row5.PRTERM = 0;
							} else {
		                          
            row5.PRTERM = rs_tDBInput_3.getFloat(24);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 25) {
								row5.COASSUR = null;
							} else {
	                         		
        	row5.COASSUR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 25, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 26) {
								row5.SURVEIL = null;
							} else {
	                         		
        	row5.SURVEIL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 26, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 27) {
								row5.GENRTAXE = null;
							} else {
	                         		
        	row5.GENRTAXE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 27, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 28) {
								row5.PRORATA = null;
							} else {
	                         		
        	row5.PRORATA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 28, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 29) {
								row5.SITUAT = null;
							} else {
	                         		
        	row5.SITUAT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 29, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 30) {
								row5.CNTREMPL = null;
							} else {
	                         		
        	row5.CNTREMPL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 30, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 31) {
								row5.COMMDERGA = null;
							} else {
	                         		
        	row5.COMMDERGA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 31, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 32) {
								row5.TCOMDER = 0;
							} else {
		                          
            row5.TCOMDER = rs_tDBInput_3.getFloat(32);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 33) {
								row5.CONVO = 0;
							} else {
		                          
            row5.CONVO = rs_tDBInput_3.getFloat(33);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 34) {
								row5.CNTANNEX = null;
							} else {
	                         		
        	row5.CNTANNEX = routines.system.JDBCUtil.getString(rs_tDBInput_3, 34, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 35) {
								row5.GESTIONAI = null;
							} else {
	                         		
        	row5.GESTIONAI = routines.system.JDBCUtil.getString(rs_tDBInput_3, 35, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 36) {
								row5.DATECREAT = 0;
							} else {
		                          
            row5.DATECREAT = rs_tDBInput_3.getFloat(36);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 37) {
								row5.DATEPREC = 0;
							} else {
		                          
            row5.DATEPREC = rs_tDBInput_3.getFloat(37);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 38) {
								row5.TYPERESIL = null;
							} else {
	                         		
        	row5.TYPERESIL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 38, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 39) {
								row5.GESTPREC = null;
							} else {
	                         		
        	row5.GESTPREC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 39, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 40) {
								row5.ETATVALCN = null;
							} else {
	                         		
        	row5.ETATVALCN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 40, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 41) {
								row5.DATETAVAL = 0;
							} else {
		                          
            row5.DATETAVAL = rs_tDBInput_3.getFloat(41);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 42) {
								row5.GESTVAL = null;
							} else {
	                         		
        	row5.GESTVAL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 42, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 43) {
								row5.UPDATE_IDENT = null;
							} else {
		                          
            row5.UPDATE_IDENT = rs_tDBInput_3.getBigDecimal(43);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					



 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;
Var.var1 =  StringHandling.EREPLACE(row5.CODFAM  ," ","") ;
Var.var2 = StringHandling.EREPLACE(row5.TYPERESIL  ," ","") ;// ###############################
        // ###############################
        // # Output tables

row13 = null;


// # Output table : 'row13'
row13_tmp.NUMCNT = row5.NUMCNT;
row13_tmp.NUMAVT = row5.NUMAVT;
row13_tmp.NUMMAJ = row5.NUMMAJ;
row13_tmp.CODFAM = Var.var1 ;
row13_tmp.CODPROD = row5.CODPROD;
row13_tmp.FORMCNT = row5.FORMCNT;
row13_tmp.NATCLT = row5.NATCLT;
row13_tmp.IDCLT = row5.IDCLT;
row13_tmp.NATINT = row5.NATINT;
row13_tmp.IDINT = row5.IDINT;
row13_tmp.IDDELEGA = row5.IDDELEGA;
row13_tmp.PAYS = row5.PAYS;
row13_tmp.MONNAIE = row5.MONNAIE;
row13_tmp.ADRCORES = row5.ADRCORES;
row13_tmp.DUREE = row5.DUREE;
row13_tmp.TYPECNT = row5.TYPECNT;
row13_tmp.FRACT = row5.FRACT;
row13_tmp.PRERESIL = row5.PRERESIL;
row13_tmp.DEBCNT = row5.DEBCNT;
row13_tmp.FINCNT = row5.FINCNT;
row13_tmp.DEBEFFET = row5.DEBEFFET;
row13_tmp.FINEFFET = row5.FINEFFET;
row13_tmp.ECHANNIV = row5.ECHANNIV;
row13_tmp.PRTERM = row5.PRTERM;
row13_tmp.COASSUR = row5.COASSUR;
row13_tmp.SURVEIL = row5.SURVEIL;
row13_tmp.GENRTAXE = row5.GENRTAXE;
row13_tmp.PRORATA = row5.PRORATA;
row13_tmp.SITUAT = row5.SITUAT;
row13_tmp.CNTREMPL = row5.CNTREMPL;
row13_tmp.COMMDERGA = row5.COMMDERGA;
row13_tmp.TCOMDER = row5.TCOMDER;
row13_tmp.CONVO = row5.CONVO;
row13_tmp.CNTANNEX = row5.CNTANNEX;
row13_tmp.GESTIONAI = row5.GESTIONAI;
row13_tmp.DATECREAT = row5.DATECREAT;
row13_tmp.DATEPREC = row5.DATEPREC;
row13_tmp.TYPERESIL = Var.var2 ;
row13_tmp.GESTPREC = row5.GESTPREC;
row13_tmp.ETATVALCN = row5.ETATVALCN;
row13_tmp.DATETAVAL = row5.DATETAVAL;
row13_tmp.GESTVAL = row5.GESTVAL;
row13_tmp.UPDATE_IDENT = row5.UPDATE_IDENT;
row13 = row13_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row9HashKey.NUMCNT = row13.NUMCNT ;
                        		    		
	                        		    	Object exprKeyValue_row9__NUMAVT = row13.NUMAVT ;
	                        		    	if(exprKeyValue_row9__NUMAVT == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_2 = true;
	                        		    	} else {
                        		    			row9HashKey.NUMAVT = (float)(Float) exprKeyValue_row9__NUMAVT;
                        		    		}
                        		    		
	                        		    	Object exprKeyValue_row9__NUMMAJ = row13.NUMMAJ ;
	                        		    	if(exprKeyValue_row9__NUMMAJ == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_2 = true;
	                        		    	} else {
                        		    			row9HashKey.NUMMAJ = (float)(Float) exprKeyValue_row9__NUMMAJ;
                        		    		}
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.NUMCNT = '" + row9HashKey.NUMCNT + "', row9.NUMAVT = '" + row9HashKey.NUMAVT + "', row9.NUMMAJ = '" + row9HashKey.NUMMAJ + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row11" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow11 = false;
       		  	    	
       		  	    	
 							row11Struct row11ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row11HashKey.CODFAM = row13.CODFAM ;
                        		    		
                        		    		    row11HashKey.CODE = row13.TYPERESIL ;
                        		    		

								
		                        	row11HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row11.lookup( row11HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row11 != null && tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.CODFAM = '" + row11HashKey.CODFAM + "', row11.CODE = '" + row11HashKey.CODE + "'");
								} // G 071
							

							row11Struct row11 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row11Struct fromLookup_row11 = null;
							row11 = row11Default;
										 
							
								 
							
							
								if (tHash_Lookup_row11 !=null && tHash_Lookup_row11.hasNext()) { // G 099
								
							
								
								fromLookup_row11 = tHash_Lookup_row11.next();

							
							
								} // G 099
							
							

							if(fromLookup_row11 != null) {
								row11 = fromLookup_row11;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.var3 = StringHandling.LEN(row13.DEBCNT) ;
Var.var4 = Var.var3!=8? "0":  row13.DEBCNT;
Var.var10 = Var.var4.equals("0")?null:  Var.var4;
Var.var11 = Var.var10==null?null:TalendDate.parseDate("yyyyMMdd",Var.var10 ) ;
Var.var5 = StringHandling.LEN( row13.FINCNT );
Var.var6 = Var.var5!=8? "0":  row13.FINCNT ;
Var.var1 = Var.var6.equals("0")?null: Var.var6;
Var.var2 = Var.var1==null?null:TalendDate.parseDate("yyyyMMdd",Var.var1 )  ;
Var.var7 = StringHandling.EREPLACE(row13.FORMCNT," ","") ;
Var.var13 = StringHandling.EREPLACE(row13.CODPROD," ","") ;
Var.var8 = (int)row13.IDINT ;
Var.var9 = Var.var8 +"";
Var.var12 = StringHandling.EREPLACE(Var.var9 ," ","") ;// ###############################
        // ###############################
        // # Output tables

copyOfrow4 = null;


// # Output table : 'copyOfrow4'
copyOfrow4_tmp.NUMCNT = row13.NUMCNT ;
copyOfrow4_tmp.NUMAVT = row13.NUMAVT ;
copyOfrow4_tmp.NUMMAJ = row13.NUMMAJ ;
copyOfrow4_tmp.CODPROD = Var.var13 ;
copyOfrow4_tmp.FORMCNT = Var.var7 ;
copyOfrow4_tmp.NATINT = row13.NATINT ;
copyOfrow4_tmp.IDINT = Var.var12 ;
copyOfrow4_tmp.DUREE = row13.DUREE ;
copyOfrow4_tmp.FRACT = row13.FRACT ;
copyOfrow4_tmp.DEBCNT = Var.var11 ;
copyOfrow4_tmp.FINCNT = Var.var2 ;
copyOfrow4_tmp.SITUAT = row13.SITUAT ;
copyOfrow4_tmp.CONVO = row13.CONVO ;
copyOfrow4_tmp.TYPERESIL = row13.TYPERESIL ;
copyOfrow4_tmp.PRIMGRNTOTAL = row9.PRIMGRNT ;
copyOfrow4_tmp.LIBTYPERESIL = row11.LIBELLE ;
copyOfrow4 = copyOfrow4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "copyOfrow4"
if(copyOfrow4 != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfrow4");
					}
					
row7 = null;			
if(copyOfrow4.NUMCNT == null){
	finder_tUniqRow_2.NUMCNT = null;
}else{
	finder_tUniqRow_2.NUMCNT = copyOfrow4.NUMCNT.toLowerCase();
}
finder_tUniqRow_2.NUMAVT = copyOfrow4.NUMAVT;
finder_tUniqRow_2.NUMMAJ = copyOfrow4.NUMMAJ;	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(copyOfrow4.NUMCNT == null){
	new_tUniqRow_2.NUMCNT = null;
}else{
	new_tUniqRow_2.NUMCNT = copyOfrow4.NUMCNT.toLowerCase();
}
new_tUniqRow_2.NUMAVT = copyOfrow4.NUMAVT;
new_tUniqRow_2.NUMMAJ = copyOfrow4.NUMMAJ;
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row7 == null){ 
	
	row7 = new row7Struct();
}row7.NUMCNT = copyOfrow4.NUMCNT;			row7.NUMAVT = copyOfrow4.NUMAVT;			row7.NUMMAJ = copyOfrow4.NUMMAJ;			row7.CODPROD = copyOfrow4.CODPROD;			row7.FORMCNT = copyOfrow4.FORMCNT;			row7.NATINT = copyOfrow4.NATINT;			row7.IDINT = copyOfrow4.IDINT;			row7.DUREE = copyOfrow4.DUREE;			row7.FRACT = copyOfrow4.FRACT;			row7.DEBCNT = copyOfrow4.DEBCNT;			row7.FINCNT = copyOfrow4.FINCNT;			row7.SITUAT = copyOfrow4.SITUAT;			row7.CONVO = copyOfrow4.CONVO;			row7.TYPERESIL = copyOfrow4.TYPERESIL;			row7.PRIMGRNTOTAL = copyOfrow4.PRIMGRNTOTAL;			row7.LIBTYPERESIL = copyOfrow4.LIBTYPERESIL;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(row7.NUMCNT == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, row7.NUMCNT);
}

                    pstmt_tDBOutput_2.setFloat(2, row7.NUMAVT);

                    pstmt_tDBOutput_2.setFloat(3, row7.NUMMAJ);

                    if(row7.CODPROD == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, row7.CODPROD);
}

                    if(row7.FORMCNT == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, row7.FORMCNT);
}

                    if(row7.NATINT == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, row7.NATINT);
}

                    if(row7.IDINT == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(7, row7.IDINT);
}

                    if(row7.DUREE == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(8, row7.DUREE);
}

                    if(row7.FRACT == null) {
pstmt_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(9, row7.FRACT);
}

                    if(row7.DEBCNT != null) {
pstmt_tDBOutput_2.setTimestamp(10, new java.sql.Timestamp(row7.DEBCNT.getTime()));
} else {
pstmt_tDBOutput_2.setNull(10, java.sql.Types.TIMESTAMP);
}

                    if(row7.FINCNT != null) {
pstmt_tDBOutput_2.setTimestamp(11, new java.sql.Timestamp(row7.FINCNT.getTime()));
} else {
pstmt_tDBOutput_2.setNull(11, java.sql.Types.TIMESTAMP);
}

                    if(row7.SITUAT == null) {
pstmt_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(12, row7.SITUAT);
}

                    pstmt_tDBOutput_2.setFloat(13, row7.CONVO);

                    if(row7.TYPERESIL == null) {
pstmt_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(14, row7.TYPERESIL);
}

                    if(row7.PRIMGRNTOTAL == null) {
pstmt_tDBOutput_2.setNull(15, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_2.setFloat(15, row7.PRIMGRNTOTAL);
}

                    if(row7.LIBTYPERESIL == null) {
pstmt_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(16, row7.LIBTYPERESIL);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
                try {
                		int countSum_tDBOutput_2 = 0;
                		    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
            	    	
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                batchSizeCounter_tDBOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_2){
			    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
			    	String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					}else{
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}
			    	
			    	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
			    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
			    	
			    	System.err.println(errormessage_tDBOutput_2);
			    	
				}
            }
                	conn_tDBOutput_2.commit();
                	
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "copyOfrow4"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
					if(tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove( "tHash_Lookup_row11" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfrow4");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			
			conn_tDBOutput_2.commit();
			
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row11"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String NUMCNT;

				public String getNUMCNT () {
					return this.NUMCNT;
				}
				
			    public float NUMAVT;

				public float getNUMAVT () {
					return this.NUMAVT;
				}
				
			    public float NUMMAJ;

				public float getNUMMAJ () {
					return this.NUMMAJ;
				}
				
			    public float PRIMGRNT;

				public float getPRIMGRNT () {
					return this.PRIMGRNT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NUMCNT == null) ? 0 : this.NUMCNT.hashCode());
					
							result = prime * result + (int) this.NUMAVT;
						
							result = prime * result + (int) this.NUMMAJ;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.NUMCNT == null) {
							if (other.NUMCNT != null)
								return false;
						
						} else if (!this.NUMCNT.equals(other.NUMCNT))
						
							return false;
					
						if (this.NUMAVT != other.NUMAVT)
							return false;
					
						if (this.NUMMAJ != other.NUMMAJ)
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.NUMCNT = this.NUMCNT;
	            other.NUMAVT = this.NUMAVT;
	            other.NUMMAJ = this.NUMMAJ;
	            other.PRIMGRNT = this.PRIMGRNT;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.NUMCNT = this.NUMCNT;
	            	other.NUMAVT = this.NUMAVT;
	            	other.NUMMAJ = this.NUMMAJ;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat) {

        	try {

        		int length = 0;
		
					this.NUMCNT = readString(dis);
					
			        this.NUMAVT = dis.readFloat();
					
			        this.NUMMAJ = dis.readFloat();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.NUMAVT);
					
					// float
				
		            	dos.writeFloat(this.NUMMAJ);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.PRIMGRNT = dis.readFloat();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeFloat(this.PRIMGRNT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMCNT="+NUMCNT);
		sb.append(",NUMAVT="+String.valueOf(NUMAVT));
		sb.append(",NUMMAJ="+String.valueOf(NUMMAJ));
		sb.append(",PRIMGRNT="+String.valueOf(PRIMGRNT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NUMCNT, other.NUMCNT);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUMAVT, other.NUMAVT);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.NUMMAJ, other.NUMMAJ);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[0];

	
			    public String NUMCNT;

				public String getNUMCNT () {
					return this.NUMCNT;
				}
				
			    public float NUMAVT;

				public float getNUMAVT () {
					return this.NUMAVT;
				}
				
			    public float NUMMAJ;

				public float getNUMMAJ () {
					return this.NUMMAJ;
				}
				
			    public float PRIMGRNT;

				public float getPRIMGRNT () {
					return this.PRIMGRNT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat) {

        	try {

        		int length = 0;
		
					this.NUMCNT = readString(dis);
					
			        this.NUMAVT = dis.readFloat();
					
			        this.NUMMAJ = dis.readFloat();
					
			        this.PRIMGRNT = dis.readFloat();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMCNT,dos);
					
					// float
				
		            	dos.writeFloat(this.NUMAVT);
					
					// float
				
		            	dos.writeFloat(this.NUMMAJ);
					
					// float
				
		            	dos.writeFloat(this.PRIMGRNT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMCNT="+NUMCNT);
		sb.append(",NUMAVT="+String.valueOf(NUMAVT));
		sb.append(",NUMMAJ="+String.valueOf(NUMMAJ));
		sb.append(",PRIMGRNT="+String.valueOf(PRIMGRNT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[0];

	
			    public String NUMCNT;

				public String getNUMCNT () {
					return this.NUMCNT;
				}
				
			    public int NUMAVT;

				public int getNUMAVT () {
					return this.NUMAVT;
				}
				
			    public int NUMMAJ;

				public int getNUMMAJ () {
					return this.NUMMAJ;
				}
				
			    public int NUMRISQ;

				public int getNUMRISQ () {
					return this.NUMRISQ;
				}
				
			    public String CODGRNT;

				public String getCODGRNT () {
					return this.CODGRNT;
				}
				
			    public int ORDRGRNT;

				public int getORDRGRNT () {
					return this.ORDRGRNT;
				}
				
			    public String TYPEGRNT;

				public String getTYPEGRNT () {
					return this.TYPEGRNT;
				}
				
			    public String CODCOMM;

				public String getCODCOMM () {
					return this.CODCOMM;
				}
				
			    public String CODTAXE;

				public String getCODTAXE () {
					return this.CODTAXE;
				}
				
			    public String TYPPRIGRN;

				public String getTYPPRIGRN () {
					return this.TYPPRIGRN;
				}
				
			    public float PRIMGRNT;

				public float getPRIMGRNT () {
					return this.PRIMGRNT;
				}
				
			    public String TYPFRANCH;

				public String getTYPFRANCH () {
					return this.TYPFRANCH;
				}
				
			    public String UNTFR;

				public String getUNTFR () {
					return this.UNTFR;
				}
				
			    public float NBUNITFR;

				public float getNBUNITFR () {
					return this.NBUNITFR;
				}
				
			    public float MINFRANCH;

				public float getMINFRANCH () {
					return this.MINFRANCH;
				}
				
			    public String TYPLIMIT;

				public String getTYPLIMIT () {
					return this.TYPLIMIT;
				}
				
			    public String UNTLIMIT;

				public String getUNTLIMIT () {
					return this.UNTLIMIT;
				}
				
			    public float NBUNITLM;

				public float getNBUNITLM () {
					return this.NBUNITLM;
				}
				
			    public String UNLIMIT2;

				public String getUNLIMIT2 () {
					return this.UNLIMIT2;
				}
				
			    public String TYPLIMIT2;

				public String getTYPLIMIT2 () {
					return this.TYPLIMIT2;
				}
				
			    public float NBUNITLM2;

				public float getNBUNITLM2 () {
					return this.NBUNITLM2;
				}
				
			    public String TYPPRIMGR;

				public String getTYPPRIMGR () {
					return this.TYPPRIMGR;
				}
				
			    public float NBUNIPRI;

				public float getNBUNIPRI () {
					return this.NBUNIPRI;
				}
				
			    public int CORRECCE;

				public int getCORRECCE () {
					return this.CORRECCE;
				}
				
			    public int CORRECTE;

				public int getCORRECTE () {
					return this.CORRECTE;
				}
				
			    public BigDecimal UPDATE_IDENT;

				public BigDecimal getUPDATE_IDENT () {
					return this.UPDATE_IDENT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat) {

        	try {

        		int length = 0;
		
					this.NUMCNT = readString(dis);
					
			        this.NUMAVT = dis.readInt();
					
			        this.NUMMAJ = dis.readInt();
					
			        this.NUMRISQ = dis.readInt();
					
					this.CODGRNT = readString(dis);
					
			        this.ORDRGRNT = dis.readInt();
					
					this.TYPEGRNT = readString(dis);
					
					this.CODCOMM = readString(dis);
					
					this.CODTAXE = readString(dis);
					
					this.TYPPRIGRN = readString(dis);
					
			        this.PRIMGRNT = dis.readFloat();
					
					this.TYPFRANCH = readString(dis);
					
					this.UNTFR = readString(dis);
					
			        this.NBUNITFR = dis.readFloat();
					
			        this.MINFRANCH = dis.readFloat();
					
					this.TYPLIMIT = readString(dis);
					
					this.UNTLIMIT = readString(dis);
					
			        this.NBUNITLM = dis.readFloat();
					
					this.UNLIMIT2 = readString(dis);
					
					this.TYPLIMIT2 = readString(dis);
					
			        this.NBUNITLM2 = dis.readFloat();
					
					this.TYPPRIMGR = readString(dis);
					
			        this.NBUNIPRI = dis.readFloat();
					
			        this.CORRECCE = dis.readInt();
					
			        this.CORRECTE = dis.readInt();
					
						this.UPDATE_IDENT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMCNT,dos);
					
					// int
				
		            	dos.writeInt(this.NUMAVT);
					
					// int
				
		            	dos.writeInt(this.NUMMAJ);
					
					// int
				
		            	dos.writeInt(this.NUMRISQ);
					
					// String
				
						writeString(this.CODGRNT,dos);
					
					// int
				
		            	dos.writeInt(this.ORDRGRNT);
					
					// String
				
						writeString(this.TYPEGRNT,dos);
					
					// String
				
						writeString(this.CODCOMM,dos);
					
					// String
				
						writeString(this.CODTAXE,dos);
					
					// String
				
						writeString(this.TYPPRIGRN,dos);
					
					// float
				
		            	dos.writeFloat(this.PRIMGRNT);
					
					// String
				
						writeString(this.TYPFRANCH,dos);
					
					// String
				
						writeString(this.UNTFR,dos);
					
					// float
				
		            	dos.writeFloat(this.NBUNITFR);
					
					// float
				
		            	dos.writeFloat(this.MINFRANCH);
					
					// String
				
						writeString(this.TYPLIMIT,dos);
					
					// String
				
						writeString(this.UNTLIMIT,dos);
					
					// float
				
		            	dos.writeFloat(this.NBUNITLM);
					
					// String
				
						writeString(this.UNLIMIT2,dos);
					
					// String
				
						writeString(this.TYPLIMIT2,dos);
					
					// float
				
		            	dos.writeFloat(this.NBUNITLM2);
					
					// String
				
						writeString(this.TYPPRIMGR,dos);
					
					// float
				
		            	dos.writeFloat(this.NBUNIPRI);
					
					// int
				
		            	dos.writeInt(this.CORRECCE);
					
					// int
				
		            	dos.writeInt(this.CORRECTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UPDATE_IDENT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMCNT="+NUMCNT);
		sb.append(",NUMAVT="+String.valueOf(NUMAVT));
		sb.append(",NUMMAJ="+String.valueOf(NUMMAJ));
		sb.append(",NUMRISQ="+String.valueOf(NUMRISQ));
		sb.append(",CODGRNT="+CODGRNT);
		sb.append(",ORDRGRNT="+String.valueOf(ORDRGRNT));
		sb.append(",TYPEGRNT="+TYPEGRNT);
		sb.append(",CODCOMM="+CODCOMM);
		sb.append(",CODTAXE="+CODTAXE);
		sb.append(",TYPPRIGRN="+TYPPRIGRN);
		sb.append(",PRIMGRNT="+String.valueOf(PRIMGRNT));
		sb.append(",TYPFRANCH="+TYPFRANCH);
		sb.append(",UNTFR="+UNTFR);
		sb.append(",NBUNITFR="+String.valueOf(NBUNITFR));
		sb.append(",MINFRANCH="+String.valueOf(MINFRANCH));
		sb.append(",TYPLIMIT="+TYPLIMIT);
		sb.append(",UNTLIMIT="+UNTLIMIT);
		sb.append(",NBUNITLM="+String.valueOf(NBUNITLM));
		sb.append(",UNLIMIT2="+UNLIMIT2);
		sb.append(",TYPLIMIT2="+TYPLIMIT2);
		sb.append(",NBUNITLM2="+String.valueOf(NBUNITLM2));
		sb.append(",TYPPRIMGR="+TYPPRIMGR);
		sb.append(",NBUNIPRI="+String.valueOf(NBUNIPRI));
		sb.append(",CORRECCE="+String.valueOf(CORRECCE));
		sb.append(",CORRECTE="+String.valueOf(CORRECTE));
		sb.append(",UPDATE_IDENT="+String.valueOf(UPDATE_IDENT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row9Struct row9 = new row9Struct();




	
	/**
	 * [tAggregateRow_2_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGOUT", false);
		start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAggregateRow_2_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

	

	class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String NUMCNT;
    				int NUMAVT;
    				int NUMMAJ;BigDecimal PRIMGRNT_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.NUMCNT == null) ? 0 : this.NUMCNT.hashCode());
							
								result = prime * result + (int) this.NUMAVT;
							
								result = prime * result + (int) this.NUMMAJ;
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;
			
							if (this.NUMCNT == null) {
								if (other.NUMCNT != null) 
									return false;
							} else if (!this.NUMCNT.equals(other.NUMCNT)) 
								return false;
						
							if (this.NUMAVT != other.NUMAVT) 
								return false;
						
							if (this.NUMMAJ != other.NUMMAJ) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
	AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
	java.util.Map<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2>();
	

 



/**
 * [tAggregateRow_2_AGGOUT begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "STGPFE01";
				
				 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:BsGnWxfk3wRQNqja5LKcvnaJoGV8ySQ00Rfz76phMLX+JRQ=");
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				  
				String url_tDBInput_4 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  PRTB003.NUMCNT, \n  PRTB003.NUMAVT, \n  PRTB003.NUMMAJ, \n  PRTB003.NUMRISQ, \n  PRTB003.CODGRNT, \n  PRTB003.ORDR"
+"GRNT, \n  PRTB003.TYPEGRNT, \n  PRTB003.CODCOMM, \n  PRTB003.CODTAXE, \n  PRTB003.TYPPRIGRN, \n  PRTB003.PRIMGRNT, \n  PRTB003"
+".TYPFRANCH, \n  PRTB003.UNTFR, \n  PRTB003.NBUNITFR, \n  PRTB003.MINFRANCH, \n  PRTB003.TYPLIMIT, \n  PRTB003.UNTLIMIT, \n  PR"
+"TB003.NBUNITLM, \n  PRTB003.UNLIMIT2, \n  PRTB003.TYPLIMIT2, \n  PRTB003.NBUNITLM2, \n  PRTB003.TYPPRIMGR, \n  PRTB003.NBUNIP"
+"RI, \n  PRTB003.CORRECCE, \n  PRTB003.CORRECTE, \n  PRTB003.UPDATE_IDENT\nFROM PRTB003";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row8.NUMCNT = null;
							} else {
	                         		
        	row8.NUMCNT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row8.NUMAVT = 0;
							} else {
		                          
            row8.NUMAVT = rs_tDBInput_4.getInt(2);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row8.NUMMAJ = 0;
							} else {
		                          
            row8.NUMMAJ = rs_tDBInput_4.getInt(3);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row8.NUMRISQ = 0;
							} else {
		                          
            row8.NUMRISQ = rs_tDBInput_4.getInt(4);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row8.CODGRNT = null;
							} else {
	                         		
        	row8.CODGRNT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row8.ORDRGRNT = 0;
							} else {
		                          
            row8.ORDRGRNT = rs_tDBInput_4.getInt(6);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row8.TYPEGRNT = null;
							} else {
	                         		
        	row8.TYPEGRNT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row8.CODCOMM = null;
							} else {
	                         		
        	row8.CODCOMM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 8, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								row8.CODTAXE = null;
							} else {
	                         		
        	row8.CODTAXE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								row8.TYPPRIGRN = null;
							} else {
	                         		
        	row8.TYPPRIGRN = routines.system.JDBCUtil.getString(rs_tDBInput_4, 10, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								row8.PRIMGRNT = 0;
							} else {
		                          
            row8.PRIMGRNT = rs_tDBInput_4.getFloat(11);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								row8.TYPFRANCH = null;
							} else {
	                         		
        	row8.TYPFRANCH = routines.system.JDBCUtil.getString(rs_tDBInput_4, 12, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 13) {
								row8.UNTFR = null;
							} else {
	                         		
        	row8.UNTFR = routines.system.JDBCUtil.getString(rs_tDBInput_4, 13, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 14) {
								row8.NBUNITFR = 0;
							} else {
		                          
            row8.NBUNITFR = rs_tDBInput_4.getFloat(14);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 15) {
								row8.MINFRANCH = 0;
							} else {
		                          
            row8.MINFRANCH = rs_tDBInput_4.getFloat(15);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 16) {
								row8.TYPLIMIT = null;
							} else {
	                         		
        	row8.TYPLIMIT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 16, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 17) {
								row8.UNTLIMIT = null;
							} else {
	                         		
        	row8.UNTLIMIT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 17, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 18) {
								row8.NBUNITLM = 0;
							} else {
		                          
            row8.NBUNITLM = rs_tDBInput_4.getFloat(18);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 19) {
								row8.UNLIMIT2 = null;
							} else {
	                         		
        	row8.UNLIMIT2 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 19, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 20) {
								row8.TYPLIMIT2 = null;
							} else {
	                         		
        	row8.TYPLIMIT2 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 20, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 21) {
								row8.NBUNITLM2 = 0;
							} else {
		                          
            row8.NBUNITLM2 = rs_tDBInput_4.getFloat(21);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 22) {
								row8.TYPPRIMGR = null;
							} else {
	                         		
        	row8.TYPPRIMGR = routines.system.JDBCUtil.getString(rs_tDBInput_4, 22, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 23) {
								row8.NBUNIPRI = 0;
							} else {
		                          
            row8.NBUNIPRI = rs_tDBInput_4.getFloat(23);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 24) {
								row8.CORRECCE = 0;
							} else {
		                          
            row8.CORRECCE = rs_tDBInput_4.getInt(24);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 25) {
								row8.CORRECTE = 0;
							} else {
		                          
            row8.CORRECTE = rs_tDBInput_4.getInt(25);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 26) {
								row8.UPDATE_IDENT = null;
							} else {
		                          
            row8.UPDATE_IDENT = rs_tDBInput_4.getBigDecimal(26);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					



 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					
	
operation_finder_tAggregateRow_2.NUMCNT = row8.NUMCNT;
			operation_finder_tAggregateRow_2.NUMAVT = row8.NUMAVT;
			operation_finder_tAggregateRow_2.NUMMAJ = row8.NUMMAJ;
			

	operation_finder_tAggregateRow_2.hashCodeDirty = true;
	
	operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

	

	if(operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

		operation_result_tAggregateRow_2.NUMCNT = operation_finder_tAggregateRow_2.NUMCNT;
				operation_result_tAggregateRow_2.NUMAVT = operation_finder_tAggregateRow_2.NUMAVT;
				operation_result_tAggregateRow_2.NUMMAJ = operation_finder_tAggregateRow_2.NUMMAJ;
				
		
		

		hash_tAggregateRow_2.put(operation_result_tAggregateRow_2, operation_result_tAggregateRow_2);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_2.PRIMGRNT_sum == null) {
						operation_result_tAggregateRow_2.PRIMGRNT_sum = new BigDecimal(0).setScale(3);
					}
					operation_result_tAggregateRow_2.PRIMGRNT_sum = operation_result_tAggregateRow_2.PRIMGRNT_sum.add(
						new BigDecimal(
							String.valueOf(
								row8.PRIMGRNT
							)
						)
					);
					


 


	tos_count_tAggregateRow_2_AGGOUT++;

/**
 * [tAggregateRow_2_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_2_AGGOUT", true);
end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tAggregateRow_2_AGGIN - inputs:(OnRowsEnd) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_2 - inputs:(row13,row9,row11) outputs:(copyOfrow4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGIN", false);
		start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	
		int tos_count_tAggregateRow_2_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2.values();

globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

for(AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600



 



/**
 * [tAggregateRow_2_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

            				    row9.NUMCNT = aggregated_row_tAggregateRow_2.NUMCNT;
            				    
            				    String s_NUMAVT_NUMAVT_tAggregateRow_2 = String.valueOf(aggregated_row_tAggregateRow_2.NUMAVT);
            				    row9.NUMAVT = ParserUtils.parseTo_float(s_NUMAVT_NUMAVT_tAggregateRow_2);
            				    
            				    String s_NUMMAJ_NUMMAJ_tAggregateRow_2 = String.valueOf(aggregated_row_tAggregateRow_2.NUMMAJ);
            				    row9.NUMMAJ = ParserUtils.parseTo_float(s_NUMMAJ_NUMMAJ_tAggregateRow_2);
            				    
    								if(aggregated_row_tAggregateRow_2.PRIMGRNT_sum != null) {
    								row9.PRIMGRNT = aggregated_row_tAggregateRow_2.PRIMGRNT_sum.floatValue();
										
    								}else{
    								
    									row9.PRIMGRNT = 0;
    									
    								}
    								

 


	tos_count_tAggregateRow_2_AGGIN++;

/**
 * [tAggregateRow_2_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.NUMCNT = row9.NUMCNT;
				
				row9_HashRow.NUMAVT = row9.NUMAVT;
				
				row9_HashRow.NUMMAJ = row9.NUMMAJ;
				
				row9_HashRow.PRIMGRNT = row9.PRIMGRNT;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_2_AGGIN", true);
end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_2_AGGIN"
							globalMap.remove("tAggregateRow_2");
						
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableComparableLookupRow<row11Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CODFAM;

				public String getCODFAM () {
					return this.CODFAM;
				}
				
			    public String TABLE;

				public String getTABLE () {
					return this.TABLE;
				}
				
			    public String CODE;

				public String getCODE () {
					return this.CODE;
				}
				
			    public String LIBELLE;

				public String getLIBELLE () {
					return this.LIBELLE;
				}
				
			    public String AUTORISE;

				public String getAUTORISE () {
					return this.AUTORISE;
				}
				
			    public BigDecimal UPDATE_IDENT;

				public BigDecimal getUPDATE_IDENT () {
					return this.UPDATE_IDENT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODFAM == null) ? 0 : this.CODFAM.hashCode());
					
						result = prime * result + ((this.CODE == null) ? 0 : this.CODE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.CODFAM == null) {
							if (other.CODFAM != null)
								return false;
						
						} else if (!this.CODFAM.equals(other.CODFAM))
						
							return false;
					
						if (this.CODE == null) {
							if (other.CODE != null)
								return false;
						
						} else if (!this.CODE.equals(other.CODE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.CODFAM = this.CODFAM;
	            other.TABLE = this.TABLE;
	            other.CODE = this.CODE;
	            other.LIBELLE = this.LIBELLE;
	            other.AUTORISE = this.AUTORISE;
	            other.UPDATE_IDENT = this.UPDATE_IDENT;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.CODFAM = this.CODFAM;
	            	other.CODE = this.CODE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat) {

        	try {

        		int length = 0;
		
					this.CODFAM = readString(dis);
					
					this.CODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFAM,dos);
					
					// String
				
						writeString(this.CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.TABLE = readString(dis,ois);
					
						this.LIBELLE = readString(dis,ois);
					
						this.AUTORISE = readString(dis,ois);
					
       			    	this.UPDATE_IDENT = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.TABLE, dos, oos);
					
						writeString(this.LIBELLE, dos, oos);
					
						writeString(this.AUTORISE, dos, oos);
					
       			    	oos.writeObject(this.UPDATE_IDENT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFAM="+CODFAM);
		sb.append(",TABLE="+TABLE);
		sb.append(",CODE="+CODE);
		sb.append(",LIBELLE="+LIBELLE);
		sb.append(",AUTORISE="+AUTORISE);
		sb.append(",UPDATE_IDENT="+String.valueOf(UPDATE_IDENT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODFAM, other.CODFAM);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CODE, other.CODE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat = new byte[0];
    static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[0];

	
			    public String CODFAM;

				public String getCODFAM () {
					return this.CODFAM;
				}
				
			    public String TABLE;

				public String getTABLE () {
					return this.TABLE;
				}
				
			    public String CODE;

				public String getCODE () {
					return this.CODE;
				}
				
			    public String LIBELLE;

				public String getLIBELLE () {
					return this.LIBELLE;
				}
				
			    public String AUTORISE;

				public String getAUTORISE () {
					return this.AUTORISE;
				}
				
			    public BigDecimal UPDATE_IDENT;

				public BigDecimal getUPDATE_IDENT () {
					return this.UPDATE_IDENT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length) {
				if(length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Contrat.length == 0) {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[1024];
				} else {
   					commonByteArray_AMI_ASSURANCES_1_Table_Contrat = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length);
			strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Contrat, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AMI_ASSURANCES_1_Table_Contrat) {

        	try {

        		int length = 0;
		
					this.CODFAM = readString(dis);
					
					this.TABLE = readString(dis);
					
					this.CODE = readString(dis);
					
					this.LIBELLE = readString(dis);
					
					this.AUTORISE = readString(dis);
					
						this.UPDATE_IDENT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODFAM,dos);
					
					// String
				
						writeString(this.TABLE,dos);
					
					// String
				
						writeString(this.CODE,dos);
					
					// String
				
						writeString(this.LIBELLE,dos);
					
					// String
				
						writeString(this.AUTORISE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UPDATE_IDENT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODFAM="+CODFAM);
		sb.append(",TABLE="+TABLE);
		sb.append(",CODE="+CODE);
		sb.append(",LIBELLE="+LIBELLE);
		sb.append(",AUTORISE="+AUTORISE);
		sb.append(",UPDATE_IDENT="+String.valueOf(UPDATE_IDENT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
row11Struct row11 = new row11Struct();





	
	/**
	 * [tAdvancedHash_row11 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row11", false);
		start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tAdvancedHash_row11 = 0;
		

			   		// connection name:row11
			   		// source node:tMap_3 - inputs:(row10) outputs:(row11,row11) | target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
			   		// linked node: tMap_2 - inputs:(row13,row9,row11) outputs:(copyOfrow4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row11Struct>getLookup(matchingModeEnum_row11);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row11 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	String var1;
	String var2;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
row11Struct row11_tmp = new row11Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "STGPFE01";
				
				 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:MF4mEag8PoUPtFXIcCw+JFdlSwrIK1XWdWraye3st4HHEtM=");
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				  
				String url_tDBInput_5 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  PR020.CODFAM, \n  PR020.\"TABLE\", \n  PR020.CODE, \n  PR020.LIBELLE, \n  PR020.AUTORISE, \n  PR020.UPDATE_IDENT\nF"
+"ROM PR020";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row10.CODFAM = null;
							} else {
	                         		
        	row10.CODFAM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 1, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row10.TABLE = null;
							} else {
	                         		
        	row10.TABLE = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row10.CODE = null;
							} else {
	                         		
        	row10.CODE = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row10.LIBELLE = null;
							} else {
	                         		
        	row10.LIBELLE = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row10.AUTORISE = null;
							} else {
	                         		
        	row10.AUTORISE = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row10.UPDATE_IDENT = null;
							} else {
		                          
            row10.UPDATE_IDENT = rs_tDBInput_5.getBigDecimal(6);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					



 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.var1 = StringHandling.EREPLACE(row10.CODFAM  ," ","") ;
Var.var2 = StringHandling.EREPLACE(row10.CODE ," ","") ;// ###############################
        // ###############################
        // # Output tables

row11 = null;


// # Output table : 'row11'
row11_tmp.CODFAM = Var.var1 ;
row11_tmp.TABLE = row10.TABLE;
row11_tmp.CODE = Var.var2 ;
row11_tmp.LIBELLE = row10.LIBELLE;
row11_tmp.AUTORISE = row10.AUTORISE;
row11_tmp.UPDATE_IDENT = row10.UPDATE_IDENT;
row11 = row11_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tAdvancedHash_row11 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					


			   
			   

					row11Struct row11_HashRow = new row11Struct();
		   	   	   
				
				row11_HashRow.CODFAM = row11.CODFAM;
				
				row11_HashRow.TABLE = row11.TABLE;
				
				row11_HashRow.CODE = row11.CODE;
				
				row11_HashRow.LIBELLE = row11.LIBELLE;
				
				row11_HashRow.AUTORISE = row11.AUTORISE;
				
				row11_HashRow.UPDATE_IDENT = row11.UPDATE_IDENT;
				
			tHash_Lookup_row11.put(row11_HashRow);
			
            




 


	tos_count_tAdvancedHash_row11++;

/**
 * [tAdvancedHash_row11 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_end ] stop
 */

} // End of branch "row11"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

tHash_Lookup_row11.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row11", true);
end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());




/**
 * [tAdvancedHash_row11 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Table_Contrat Table_ContratClass = new Table_Contrat();

        int exitCode = Table_ContratClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Table_Contrat.class.getClassLoader().getResourceAsStream("ami_assurances_1/table_contrat_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Table_Contrat.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Table_Contrat");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     225794 characters generated by Talend Open Studio for Data Integration 
 *     on the 6 octobre 2022 à 12:12:47 GMT+01:00
 ************************************************************************************************/