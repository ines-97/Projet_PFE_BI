// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ami_assurances_1.table_sinistre_details_as400_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Table_Sinistre_Details_As400 Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Table_Sinistre_Details_As400 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Table_Sinistre_Details_As400";
	private final String projectName = "AMI_ASSURANCES_1";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Table_Sinistre_Details_As400.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Table_Sinistre_Details_As400.this,
									new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[0];

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String GRNTSINI;

		public String getGRNTSINI() {
			return this.GRNTSINI;
		}

		public float MNTPROVIS;

		public float getMNTPROVIS() {
			return this.MNTPROVIS;
		}

		public float MNTPAIGRN;

		public float getMNTPAIGRN() {
			return this.MNTPAIGRN;
		}

		public float MNTTOTAL;

		public float getMNTTOTAL() {
			return this.MNTTOTAL;
		}

		public float MNTTOTNET;

		public float getMNTTOTNET() {
			return this.MNTTOTNET;
		}

		public float MNTAGGRAV;

		public float getMNTAGGRAV() {
			return this.MNTAGGRAV;
		}

		public float MNTAMELIO;

		public float getMNTAMELIO() {
			return this.MNTAMELIO;
		}

		public String LIBGRNSIN;

		public String getLIBGRNSIN() {
			return this.LIBGRNSIN;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_Details_As400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.GRNTSINI = readString(dis);

					this.MNTPROVIS = dis.readFloat();

					this.MNTPAIGRN = dis.readFloat();

					this.MNTTOTAL = dis.readFloat();

					this.MNTTOTNET = dis.readFloat();

					this.MNTAGGRAV = dis.readFloat();

					this.MNTAMELIO = dis.readFloat();

					this.LIBGRNSIN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.GRNTSINI, dos);

				// float

				dos.writeFloat(this.MNTPROVIS);

				// float

				dos.writeFloat(this.MNTPAIGRN);

				// float

				dos.writeFloat(this.MNTTOTAL);

				// float

				dos.writeFloat(this.MNTTOTNET);

				// float

				dos.writeFloat(this.MNTAGGRAV);

				// float

				dos.writeFloat(this.MNTAMELIO);

				// String

				writeString(this.LIBGRNSIN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",GRNTSINI=" + GRNTSINI);
			sb.append(",MNTPROVIS=" + String.valueOf(MNTPROVIS));
			sb.append(",MNTPAIGRN=" + String.valueOf(MNTPAIGRN));
			sb.append(",MNTTOTAL=" + String.valueOf(MNTTOTAL));
			sb.append(",MNTTOTNET=" + String.valueOf(MNTTOTNET));
			sb.append(",MNTAGGRAV=" + String.valueOf(MNTAGGRAV));
			sb.append(",MNTAMELIO=" + String.valueOf(MNTAMELIO));
			sb.append(",LIBGRNSIN=" + LIBGRNSIN);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[0];

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String GRNTSINI;

		public String getGRNTSINI() {
			return this.GRNTSINI;
		}

		public float MNTPROVIS;

		public float getMNTPROVIS() {
			return this.MNTPROVIS;
		}

		public float MNTPAIGRN;

		public float getMNTPAIGRN() {
			return this.MNTPAIGRN;
		}

		public float MNTTOTAL;

		public float getMNTTOTAL() {
			return this.MNTTOTAL;
		}

		public float MNTTOTNET;

		public float getMNTTOTNET() {
			return this.MNTTOTNET;
		}

		public float MNTAGGRAV;

		public float getMNTAGGRAV() {
			return this.MNTAGGRAV;
		}

		public float MNTAMELIO;

		public float getMNTAMELIO() {
			return this.MNTAMELIO;
		}

		public String LIBGRNSIN;

		public String getLIBGRNSIN() {
			return this.LIBGRNSIN;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_Details_As400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.GRNTSINI = readString(dis);

					this.MNTPROVIS = dis.readFloat();

					this.MNTPAIGRN = dis.readFloat();

					this.MNTTOTAL = dis.readFloat();

					this.MNTTOTNET = dis.readFloat();

					this.MNTAGGRAV = dis.readFloat();

					this.MNTAMELIO = dis.readFloat();

					this.LIBGRNSIN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.GRNTSINI, dos);

				// float

				dos.writeFloat(this.MNTPROVIS);

				// float

				dos.writeFloat(this.MNTPAIGRN);

				// float

				dos.writeFloat(this.MNTTOTAL);

				// float

				dos.writeFloat(this.MNTTOTNET);

				// float

				dos.writeFloat(this.MNTAGGRAV);

				// float

				dos.writeFloat(this.MNTAMELIO);

				// String

				writeString(this.LIBGRNSIN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",GRNTSINI=" + GRNTSINI);
			sb.append(",MNTPROVIS=" + String.valueOf(MNTPROVIS));
			sb.append(",MNTPAIGRN=" + String.valueOf(MNTPAIGRN));
			sb.append(",MNTTOTAL=" + String.valueOf(MNTTOTAL));
			sb.append(",MNTTOTNET=" + String.valueOf(MNTTOTNET));
			sb.append(",MNTAGGRAV=" + String.valueOf(MNTAGGRAV));
			sb.append(",MNTAMELIO=" + String.valueOf(MNTAMELIO));
			sb.append(",LIBGRNSIN=" + LIBGRNSIN);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[0];

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String GRNTSINI;

		public String getGRNTSINI() {
			return this.GRNTSINI;
		}

		public float EVAL_INIT;

		public float getEVAL_INIT() {
			return this.EVAL_INIT;
		}

		public float MNTPROVIS;

		public float getMNTPROVIS() {
			return this.MNTPROVIS;
		}

		public float MNTPAIGRN;

		public float getMNTPAIGRN() {
			return this.MNTPAIGRN;
		}

		public float MNTAGGRAV;

		public float getMNTAGGRAV() {
			return this.MNTAGGRAV;
		}

		public float MNTAMELIO;

		public float getMNTAMELIO() {
			return this.MNTAMELIO;
		}

		public float MNTRECUPC;

		public float getMNTRECUPC() {
			return this.MNTRECUPC;
		}

		public float MNTBONIS;

		public float getMNTBONIS() {
			return this.MNTBONIS;
		}

		public float FRANCHIS;

		public float getFRANCHIS() {
			return this.FRANCHIS;
		}

		public float MNTDECLAR;

		public float getMNTDECLAR() {
			return this.MNTDECLAR;
		}

		public float MNTPREVIS;

		public float getMNTPREVIS() {
			return this.MNTPREVIS;
		}

		public float MNTRECOUR;

		public float getMNTRECOUR() {
			return this.MNTRECOUR;
		}

		public float MNTTOTAL;

		public float getMNTTOTAL() {
			return this.MNTTOTAL;
		}

		public float MNTTOTNET;

		public float getMNTTOTNET() {
			return this.MNTTOTNET;
		}

		public String ETATGRNT;

		public String getETATGRNT() {
			return this.ETATGRNT;
		}

		public String MOTIFCLOT;

		public String getMOTIFCLOT() {
			return this.MOTIFCLOT;
		}

		public int DATCLTGRN;

		public int getDATCLTGRN() {
			return this.DATCLTGRN;
		}

		public BigDecimal UPDATE_IDENT;

		public BigDecimal getUPDATE_IDENT() {
			return this.UPDATE_IDENT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_Details_As400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.GRNTSINI = readString(dis);

					this.EVAL_INIT = dis.readFloat();

					this.MNTPROVIS = dis.readFloat();

					this.MNTPAIGRN = dis.readFloat();

					this.MNTAGGRAV = dis.readFloat();

					this.MNTAMELIO = dis.readFloat();

					this.MNTRECUPC = dis.readFloat();

					this.MNTBONIS = dis.readFloat();

					this.FRANCHIS = dis.readFloat();

					this.MNTDECLAR = dis.readFloat();

					this.MNTPREVIS = dis.readFloat();

					this.MNTRECOUR = dis.readFloat();

					this.MNTTOTAL = dis.readFloat();

					this.MNTTOTNET = dis.readFloat();

					this.ETATGRNT = readString(dis);

					this.MOTIFCLOT = readString(dis);

					this.DATCLTGRN = dis.readInt();

					this.UPDATE_IDENT = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.GRNTSINI, dos);

				// float

				dos.writeFloat(this.EVAL_INIT);

				// float

				dos.writeFloat(this.MNTPROVIS);

				// float

				dos.writeFloat(this.MNTPAIGRN);

				// float

				dos.writeFloat(this.MNTAGGRAV);

				// float

				dos.writeFloat(this.MNTAMELIO);

				// float

				dos.writeFloat(this.MNTRECUPC);

				// float

				dos.writeFloat(this.MNTBONIS);

				// float

				dos.writeFloat(this.FRANCHIS);

				// float

				dos.writeFloat(this.MNTDECLAR);

				// float

				dos.writeFloat(this.MNTPREVIS);

				// float

				dos.writeFloat(this.MNTRECOUR);

				// float

				dos.writeFloat(this.MNTTOTAL);

				// float

				dos.writeFloat(this.MNTTOTNET);

				// String

				writeString(this.ETATGRNT, dos);

				// String

				writeString(this.MOTIFCLOT, dos);

				// int

				dos.writeInt(this.DATCLTGRN);

				// BigDecimal

				dos.writeObject(this.UPDATE_IDENT);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",GRNTSINI=" + GRNTSINI);
			sb.append(",EVAL_INIT=" + String.valueOf(EVAL_INIT));
			sb.append(",MNTPROVIS=" + String.valueOf(MNTPROVIS));
			sb.append(",MNTPAIGRN=" + String.valueOf(MNTPAIGRN));
			sb.append(",MNTAGGRAV=" + String.valueOf(MNTAGGRAV));
			sb.append(",MNTAMELIO=" + String.valueOf(MNTAMELIO));
			sb.append(",MNTRECUPC=" + String.valueOf(MNTRECUPC));
			sb.append(",MNTBONIS=" + String.valueOf(MNTBONIS));
			sb.append(",FRANCHIS=" + String.valueOf(FRANCHIS));
			sb.append(",MNTDECLAR=" + String.valueOf(MNTDECLAR));
			sb.append(",MNTPREVIS=" + String.valueOf(MNTPREVIS));
			sb.append(",MNTRECOUR=" + String.valueOf(MNTRECOUR));
			sb.append(",MNTTOTAL=" + String.valueOf(MNTTOTAL));
			sb.append(",MNTTOTNET=" + String.valueOf(MNTTOTNET));
			sb.append(",ETATGRNT=" + ETATGRNT);
			sb.append(",MOTIFCLOT=" + MOTIFCLOT);
			sb.append(",DATCLTGRN=" + String.valueOf(DATCLTGRN));
			sb.append(",UPDATE_IDENT=" + String.valueOf(UPDATE_IDENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[0];

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String GRNTSINI;

		public String getGRNTSINI() {
			return this.GRNTSINI;
		}

		public float EVAL_INIT;

		public float getEVAL_INIT() {
			return this.EVAL_INIT;
		}

		public float MNTPROVIS;

		public float getMNTPROVIS() {
			return this.MNTPROVIS;
		}

		public float MNTPAIGRN;

		public float getMNTPAIGRN() {
			return this.MNTPAIGRN;
		}

		public float MNTAGGRAV;

		public float getMNTAGGRAV() {
			return this.MNTAGGRAV;
		}

		public float MNTAMELIO;

		public float getMNTAMELIO() {
			return this.MNTAMELIO;
		}

		public float MNTRECUPC;

		public float getMNTRECUPC() {
			return this.MNTRECUPC;
		}

		public float MNTBONIS;

		public float getMNTBONIS() {
			return this.MNTBONIS;
		}

		public float FRANCHIS;

		public float getFRANCHIS() {
			return this.FRANCHIS;
		}

		public float MNTDECLAR;

		public float getMNTDECLAR() {
			return this.MNTDECLAR;
		}

		public float MNTPREVIS;

		public float getMNTPREVIS() {
			return this.MNTPREVIS;
		}

		public float MNTRECOUR;

		public float getMNTRECOUR() {
			return this.MNTRECOUR;
		}

		public float MNTTOTAL;

		public float getMNTTOTAL() {
			return this.MNTTOTAL;
		}

		public float MNTTOTNET;

		public float getMNTTOTNET() {
			return this.MNTTOTNET;
		}

		public String ETATGRNT;

		public String getETATGRNT() {
			return this.ETATGRNT;
		}

		public String MOTIFCLOT;

		public String getMOTIFCLOT() {
			return this.MOTIFCLOT;
		}

		public int DATCLTGRN;

		public int getDATCLTGRN() {
			return this.DATCLTGRN;
		}

		public BigDecimal UPDATE_IDENT;

		public BigDecimal getUPDATE_IDENT() {
			return this.UPDATE_IDENT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_Details_As400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.GRNTSINI = readString(dis);

					this.EVAL_INIT = dis.readFloat();

					this.MNTPROVIS = dis.readFloat();

					this.MNTPAIGRN = dis.readFloat();

					this.MNTAGGRAV = dis.readFloat();

					this.MNTAMELIO = dis.readFloat();

					this.MNTRECUPC = dis.readFloat();

					this.MNTBONIS = dis.readFloat();

					this.FRANCHIS = dis.readFloat();

					this.MNTDECLAR = dis.readFloat();

					this.MNTPREVIS = dis.readFloat();

					this.MNTRECOUR = dis.readFloat();

					this.MNTTOTAL = dis.readFloat();

					this.MNTTOTNET = dis.readFloat();

					this.ETATGRNT = readString(dis);

					this.MOTIFCLOT = readString(dis);

					this.DATCLTGRN = dis.readInt();

					this.UPDATE_IDENT = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.GRNTSINI, dos);

				// float

				dos.writeFloat(this.EVAL_INIT);

				// float

				dos.writeFloat(this.MNTPROVIS);

				// float

				dos.writeFloat(this.MNTPAIGRN);

				// float

				dos.writeFloat(this.MNTAGGRAV);

				// float

				dos.writeFloat(this.MNTAMELIO);

				// float

				dos.writeFloat(this.MNTRECUPC);

				// float

				dos.writeFloat(this.MNTBONIS);

				// float

				dos.writeFloat(this.FRANCHIS);

				// float

				dos.writeFloat(this.MNTDECLAR);

				// float

				dos.writeFloat(this.MNTPREVIS);

				// float

				dos.writeFloat(this.MNTRECOUR);

				// float

				dos.writeFloat(this.MNTTOTAL);

				// float

				dos.writeFloat(this.MNTTOTNET);

				// String

				writeString(this.ETATGRNT, dos);

				// String

				writeString(this.MOTIFCLOT, dos);

				// int

				dos.writeInt(this.DATCLTGRN);

				// BigDecimal

				dos.writeObject(this.UPDATE_IDENT);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",GRNTSINI=" + GRNTSINI);
			sb.append(",EVAL_INIT=" + String.valueOf(EVAL_INIT));
			sb.append(",MNTPROVIS=" + String.valueOf(MNTPROVIS));
			sb.append(",MNTPAIGRN=" + String.valueOf(MNTPAIGRN));
			sb.append(",MNTAGGRAV=" + String.valueOf(MNTAGGRAV));
			sb.append(",MNTAMELIO=" + String.valueOf(MNTAMELIO));
			sb.append(",MNTRECUPC=" + String.valueOf(MNTRECUPC));
			sb.append(",MNTBONIS=" + String.valueOf(MNTBONIS));
			sb.append(",FRANCHIS=" + String.valueOf(FRANCHIS));
			sb.append(",MNTDECLAR=" + String.valueOf(MNTDECLAR));
			sb.append(",MNTPREVIS=" + String.valueOf(MNTPREVIS));
			sb.append(",MNTRECOUR=" + String.valueOf(MNTRECOUR));
			sb.append(",MNTTOTAL=" + String.valueOf(MNTTOTAL));
			sb.append(",MNTTOTNET=" + String.valueOf(MNTTOTNET));
			sb.append(",ETATGRNT=" + ETATGRNT);
			sb.append(",MOTIFCLOT=" + MOTIFCLOT);
			sb.append(",DATCLTGRN=" + String.valueOf(DATCLTGRN));
			sb.append(",UPDATE_IDENT=" + String.valueOf(UPDATE_IDENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;

				int nb_line_rejected_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;
				int tmp_batchUpdateCount_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "Sinistres_Details_AS400";
				boolean whetherReject_tDBOutput_1 = false;

				String dbProperties_tDBOutput_1 = "prompt=false";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI";
				} else {
					url_tDBOutput_1 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";
				}
				String dbUser_tDBOutput_1 = "STGPFE01";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:CLDXKessue/5IYpouLh44+AR/2iygEtH9ZrGTk2OaqsBTe4=");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				java.lang.Class.forName("com.ibm.as400.access.AS400JDBCDriver");
				java.sql.Connection conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,
						dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;
				int count_tDBOutput_1 = 0;
				try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtClear_tDBOutput_1.executeUpdate("DELETE FROM " + tableName_tDBOutput_1 + "");
				}
				String insert_tDBOutput_1 = "INSERT INTO " + "Sinistres_Details_AS400"
						+ " (NUMSNT,GRNTSINI,MNTPROVIS,MNTPAIGRN,MNTTOTAL,MNTTOTNET,MNTAGGRAV,MNTAMELIO,LIBGRNSIN) VALUES (?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1,
						java.sql.Statement.RETURN_GENERATED_KEYS);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String NUMSNT;
					String GRNTSINI;
					float MNTPROVIS;
					float MNTPAIGRN;
					float MNTTOTAL;
					float MNTTOTNET;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.NUMSNT == null) ? 0 : this.NUMSNT.hashCode());

							result = prime * result + ((this.GRNTSINI == null) ? 0 : this.GRNTSINI.hashCode());

							result = prime * result + (int) this.MNTPROVIS;

							result = prime * result + (int) this.MNTPAIGRN;

							result = prime * result + (int) this.MNTTOTAL;

							result = prime * result + (int) this.MNTTOTNET;

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.NUMSNT == null) {
							if (other.NUMSNT != null)
								return false;

						} else if (!this.NUMSNT.equals(other.NUMSNT))

							return false;

						if (this.GRNTSINI == null) {
							if (other.GRNTSINI != null)
								return false;

						} else if (!this.GRNTSINI.equals(other.GRNTSINI))

							return false;

						if (this.MNTPROVIS != other.MNTPROVIS)
							return false;

						if (this.MNTPAIGRN != other.MNTPAIGRN)
							return false;

						if (this.MNTTOTAL != other.MNTTOTAL)
							return false;

						if (this.MNTTOTNET != other.MNTTOTNET)
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				row2Struct row2_tmp = new row2Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "STGPFE01";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:UEyFBTcmnRY0KGJteY6jr4CwX57hDfb2mbTx3mQ7LLCbAbQ=");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  SITB02.NUMSNT, \n  SITB02.GRNTSINI, \n  SITB02.EVAL_INIT, \n  SITB02.MNTPROVIS, \n  SITB02.MNTPAIGRN, \n  SITB02.M"
						+ "NTAGGRAV, \n  SITB02.MNTAMELIO, \n  SITB02.MNTRECUPC, \n  SITB02.MNTBONIS, \n  SITB02.FRANCHIS, \n  SITB02.MNTDECLAR, \n  SITB"
						+ "02.MNTPREVIS, \n  SITB02.MNTRECOUR, \n  SITB02.MNTTOTAL, \n  SITB02.MNTTOTNET, \n  SITB02.ETATGRNT, \n  SITB02.MOTIFCLOT, \n  "
						+ "SITB02.DATCLTGRN, \n  SITB02.UPDATE_IDENT\nFROM SITB02";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.NUMSNT = null;
						} else {

							row1.NUMSNT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.GRNTSINI = null;
						} else {

							row1.GRNTSINI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.EVAL_INIT = 0;
						} else {

							row1.EVAL_INIT = rs_tDBInput_1.getFloat(3);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.MNTPROVIS = 0;
						} else {

							row1.MNTPROVIS = rs_tDBInput_1.getFloat(4);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.MNTPAIGRN = 0;
						} else {

							row1.MNTPAIGRN = rs_tDBInput_1.getFloat(5);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.MNTAGGRAV = 0;
						} else {

							row1.MNTAGGRAV = rs_tDBInput_1.getFloat(6);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.MNTAMELIO = 0;
						} else {

							row1.MNTAMELIO = rs_tDBInput_1.getFloat(7);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.MNTRECUPC = 0;
						} else {

							row1.MNTRECUPC = rs_tDBInput_1.getFloat(8);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.MNTBONIS = 0;
						} else {

							row1.MNTBONIS = rs_tDBInput_1.getFloat(9);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.FRANCHIS = 0;
						} else {

							row1.FRANCHIS = rs_tDBInput_1.getFloat(10);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.MNTDECLAR = 0;
						} else {

							row1.MNTDECLAR = rs_tDBInput_1.getFloat(11);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.MNTPREVIS = 0;
						} else {

							row1.MNTPREVIS = rs_tDBInput_1.getFloat(12);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.MNTRECOUR = 0;
						} else {

							row1.MNTRECOUR = rs_tDBInput_1.getFloat(13);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.MNTTOTAL = 0;
						} else {

							row1.MNTTOTAL = rs_tDBInput_1.getFloat(14);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.MNTTOTNET = 0;
						} else {

							row1.MNTTOTNET = rs_tDBInput_1.getFloat(15);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.ETATGRNT = null;
						} else {

							row1.ETATGRNT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.MOTIFCLOT = null;
						} else {

							row1.MOTIFCLOT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.DATCLTGRN = 0;
						} else {

							row1.DATCLTGRN = rs_tDBInput_1.getInt(18);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.UPDATE_IDENT = null;
						} else {

							row1.UPDATE_IDENT = rs_tDBInput_1.getBigDecimal(19);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row4"
						///////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row4HashKey.NUMSNT = row1.NUMSNT;

							row4HashKey.hashCodeDirty = true;

							tHash_Lookup_row4.lookup(row4HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
							// and it contains more one result from keys : row4.NUMSNT = '" +
							// row4HashKey.NUMSNT + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row5"
						///////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row5HashKey.CODPROD = row4.CODPROD;

							row5HashKey.CODFORMU = row4.CODFORMU;

							row5HashKey.hashCodeDirty = true;

							tHash_Lookup_row5.lookup(row5HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5'
							// and it contains more one result from keys : row5.CODPROD = '" +
							// row5HashKey.CODPROD + "', row5.CODFORMU = '" + row5HashKey.CODFORMU + "'");
						} // G 071

						row5Struct row5 = null;

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) { // G 099

							fromLookup_row5 = tHash_Lookup_row5.next();

						} // G 099

						if (fromLookup_row5 != null) {
							row5 = fromLookup_row5;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							row2 = null;

// # Output table : 'row2'
							row2_tmp.NUMSNT = row4.NUMSNT;
							row2_tmp.GRNTSINI = row5.GRNTSINI;
							row2_tmp.MNTPROVIS = row1.MNTPROVIS;
							row2_tmp.MNTPAIGRN = row1.MNTPAIGRN;
							row2_tmp.MNTTOTAL = row1.MNTTOTAL;
							row2_tmp.MNTTOTNET = row1.MNTTOTNET;
							row2_tmp.MNTAGGRAV = row1.MNTAGGRAV;
							row2_tmp.MNTAMELIO = row1.MNTAMELIO;
							row2_tmp.LIBGRNSIN = row5.LIBGRNSIN;
							row2 = row2_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tUniqRow_1 main ] start
							 */

							currentComponent = "tUniqRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							row3 = null;
							if (row2.NUMSNT == null) {
								finder_tUniqRow_1.NUMSNT = null;
							} else {
								finder_tUniqRow_1.NUMSNT = row2.NUMSNT.toLowerCase();
							}
							if (row2.GRNTSINI == null) {
								finder_tUniqRow_1.GRNTSINI = null;
							} else {
								finder_tUniqRow_1.GRNTSINI = row2.GRNTSINI.toLowerCase();
							}
							finder_tUniqRow_1.MNTPROVIS = row2.MNTPROVIS;
							finder_tUniqRow_1.MNTPAIGRN = row2.MNTPAIGRN;
							finder_tUniqRow_1.MNTTOTAL = row2.MNTTOTAL;
							finder_tUniqRow_1.MNTTOTNET = row2.MNTTOTNET;
							finder_tUniqRow_1.hashCodeDirty = true;
							if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
								KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

								if (row2.NUMSNT == null) {
									new_tUniqRow_1.NUMSNT = null;
								} else {
									new_tUniqRow_1.NUMSNT = row2.NUMSNT.toLowerCase();
								}
								if (row2.GRNTSINI == null) {
									new_tUniqRow_1.GRNTSINI = null;
								} else {
									new_tUniqRow_1.GRNTSINI = row2.GRNTSINI.toLowerCase();
								}
								new_tUniqRow_1.MNTPROVIS = row2.MNTPROVIS;
								new_tUniqRow_1.MNTPAIGRN = row2.MNTPAIGRN;
								new_tUniqRow_1.MNTTOTAL = row2.MNTTOTAL;
								new_tUniqRow_1.MNTTOTNET = row2.MNTTOTNET;

								keystUniqRow_1.add(new_tUniqRow_1);
								if (row3 == null) {

									row3 = new row3Struct();
								}
								row3.NUMSNT = row2.NUMSNT;
								row3.GRNTSINI = row2.GRNTSINI;
								row3.MNTPROVIS = row2.MNTPROVIS;
								row3.MNTPAIGRN = row2.MNTPAIGRN;
								row3.MNTTOTAL = row2.MNTTOTAL;
								row3.MNTTOTNET = row2.MNTTOTNET;
								row3.MNTAGGRAV = row2.MNTAGGRAV;
								row3.MNTAMELIO = row2.MNTAMELIO;
								row3.LIBGRNSIN = row2.LIBGRNSIN;
								nb_uniques_tUniqRow_1++;
							} else {
								nb_duplicates_tUniqRow_1++;
							}

							tos_count_tUniqRow_1++;

							/**
							 * [tUniqRow_1 main ] stop
							 */

							/**
							 * [tUniqRow_1 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
								}

								whetherReject_tDBOutput_1 = false;
								if (row3.NUMSNT == null) {
									pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(1, row3.NUMSNT);
								}

								if (row3.GRNTSINI == null) {
									pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(2, row3.GRNTSINI);
								}

								pstmt_tDBOutput_1.setFloat(3, row3.MNTPROVIS);

								pstmt_tDBOutput_1.setFloat(4, row3.MNTPAIGRN);

								pstmt_tDBOutput_1.setFloat(5, row3.MNTTOTAL);

								pstmt_tDBOutput_1.setFloat(6, row3.MNTTOTNET);

								pstmt_tDBOutput_1.setFloat(7, row3.MNTAGGRAV);

								pstmt_tDBOutput_1.setFloat(8, row3.MNTAMELIO);

								if (row3.LIBGRNSIN == null) {
									pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(9, row3.LIBGRNSIN);
								}

								pstmt_tDBOutput_1.addBatch();
								nb_line_tDBOutput_1++;

								batchSizeCounter_tDBOutput_1++;

								if ((batchSize_tDBOutput_1 > 0)
										&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {

									int[] status_tDBOutput_1 = null;
									int countSum_tDBOutput_1 = 0;
									try {
										batchSizeCounter_tDBOutput_1 = 0;
										status_tDBOutput_1 = pstmt_tDBOutput_1.executeBatch();
										for (int countEach_tDBOutput_1 : status_tDBOutput_1) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}
									} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
										for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}
										System.err.println(e_tDBOutput_1.getMessage());
									}
									try {
										tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
									} catch (java.sql.SQLException e_tDBOutput_1) {
										System.err.println(e_tDBOutput_1.getMessage());
									}
									tmp_batchUpdateCount_tDBOutput_1 = tmp_batchUpdateCount_tDBOutput_1 > countSum_tDBOutput_1
											? tmp_batchUpdateCount_tDBOutput_1
											: countSum_tDBOutput_1;
									insertedCount_tDBOutput_1 += tmp_batchUpdateCount_tDBOutput_1;
								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tUniqRow_1 process_data_end ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

					int[] status_tDBOutput_1 = null;
					int countSum_tDBOutput_1 = 0;
					try {
						batchSizeCounter_tDBOutput_1 = 0;
						status_tDBOutput_1 = pstmt_tDBOutput_1.executeBatch();
						for (int countEach_tDBOutput_1 : status_tDBOutput_1) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
					} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
						for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						System.err.println(e_tDBOutput_1.getMessage());
					}
					try {
						tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
					} catch (java.sql.SQLException e_tDBOutput_1) {
						System.err.println(e_tDBOutput_1.getMessage());
					}
					tmp_batchUpdateCount_tDBOutput_1 = tmp_batchUpdateCount_tDBOutput_1 > countSum_tDBOutput_1
							? tmp_batchUpdateCount_tDBOutput_1
							: countSum_tDBOutput_1;
					insertedCount_tDBOutput_1 += tmp_batchUpdateCount_tDBOutput_1;
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				conn_tDBOutput_1.close();
				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CODPROD;

		public String getCODPROD() {
			return this.CODPROD;
		}

		public String CODFORMU;

		public String getCODFORMU() {
			return this.CODFORMU;
		}

		public String GRNTSINI;

		public String getGRNTSINI() {
			return this.GRNTSINI;
		}

		public String CODGRNT;

		public String getCODGRNT() {
			return this.CODGRNT;
		}

		public String LIBGRNSIN;

		public String getLIBGRNSIN() {
			return this.LIBGRNSIN;
		}

		public BigDecimal UPDATE_IDENT;

		public BigDecimal getUPDATE_IDENT() {
			return this.UPDATE_IDENT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CODPROD == null) ? 0 : this.CODPROD.hashCode());

				result = prime * result + ((this.CODFORMU == null) ? 0 : this.CODFORMU.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.CODPROD == null) {
				if (other.CODPROD != null)
					return false;

			} else if (!this.CODPROD.equals(other.CODPROD))

				return false;

			if (this.CODFORMU == null) {
				if (other.CODFORMU != null)
					return false;

			} else if (!this.CODFORMU.equals(other.CODFORMU))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.CODPROD = this.CODPROD;
			other.CODFORMU = this.CODFORMU;
			other.GRNTSINI = this.GRNTSINI;
			other.CODGRNT = this.CODGRNT;
			other.LIBGRNSIN = this.LIBGRNSIN;
			other.UPDATE_IDENT = this.UPDATE_IDENT;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.CODPROD = this.CODPROD;
			other.CODFORMU = this.CODFORMU;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_Details_As400) {

				try {

					int length = 0;

					this.CODPROD = readString(dis);

					this.CODFORMU = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODPROD, dos);

				// String

				writeString(this.CODFORMU, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.GRNTSINI = readString(dis, ois);

				this.CODGRNT = readString(dis, ois);

				this.LIBGRNSIN = readString(dis, ois);

				this.UPDATE_IDENT = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.GRNTSINI, dos, oos);

				writeString(this.CODGRNT, dos, oos);

				writeString(this.LIBGRNSIN, dos, oos);

				oos.writeObject(this.UPDATE_IDENT);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODPROD=" + CODPROD);
			sb.append(",CODFORMU=" + CODFORMU);
			sb.append(",GRNTSINI=" + GRNTSINI);
			sb.append(",CODGRNT=" + CODGRNT);
			sb.append(",LIBGRNSIN=" + LIBGRNSIN);
			sb.append(",UPDATE_IDENT=" + String.valueOf(UPDATE_IDENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CODPROD, other.CODPROD);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CODFORMU, other.CODFORMU);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row5,row5) |
				// target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_1 - inputs:(row1,row5,row4) outputs:(row2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "STGPFE01";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:IuZukgghaeSbjeyXoJdztsTu4Yr3WpaNzpJvj+ZeT8mxZls=");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  SI007.CODPROD, \n  SI007.CODFORMU, \n  SI007.GRNTSINI, \n  SI007.CODGRNT, \n  SI007.LIBGRNSIN, \n  SI007.UPDATE_ID"
						+ "ENT\nFROM SI007";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row5.CODPROD = null;
						} else {

							row5.CODPROD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row5.CODFORMU = null;
						} else {

							row5.CODFORMU = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row5.GRNTSINI = null;
						} else {

							row5.GRNTSINI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row5.CODGRNT = null;
						} else {

							row5.CODGRNT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row5.LIBGRNSIN = null;
						} else {

							row5.LIBGRNSIN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row5.UPDATE_IDENT = null;
						} else {

							row5.UPDATE_IDENT = rs_tDBInput_2.getBigDecimal(6);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.CODPROD = row5.CODPROD;

						row5_HashRow.CODFORMU = row5.CODFORMU;

						row5_HashRow.GRNTSINI = row5.GRNTSINI;

						row5_HashRow.CODGRNT = row5.CODGRNT;

						row5_HashRow.LIBGRNSIN = row5.LIBGRNSIN;

						row5_HashRow.UPDATE_IDENT = row5.UPDATE_IDENT;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String CAUSESINI;

		public String getCAUSESINI() {
			return this.CAUSESINI;
		}

		public String NATSINI;

		public String getNATSINI() {
			return this.NATSINI;
		}

		public float SOUNATSIN;

		public float getSOUNATSIN() {
			return this.SOUNATSIN;
		}

		public float DTSURV;

		public float getDTSURV() {
			return this.DTSURV;
		}

		public String NUMCNT;

		public String getNUMCNT() {
			return this.NUMCNT;
		}

		public float NUMAVT;

		public float getNUMAVT() {
			return this.NUMAVT;
		}

		public float NUMMAJ;

		public float getNUMMAJ() {
			return this.NUMMAJ;
		}

		public float NUMRISQ;

		public float getNUMRISQ() {
			return this.NUMRISQ;
		}

		public String NATCLT;

		public String getNATCLT() {
			return this.NATCLT;
		}

		public float IDCLT;

		public float getIDCLT() {
			return this.IDCLT;
		}

		public String NATINT;

		public String getNATINT() {
			return this.NATINT;
		}

		public float IDINT;

		public float getIDINT() {
			return this.IDINT;
		}

		public float IDDELEGA;

		public float getIDDELEGA() {
			return this.IDDELEGA;
		}

		public String CODFAM;

		public String getCODFAM() {
			return this.CODFAM;
		}

		public String CODPROD;

		public String getCODPROD() {
			return this.CODPROD;
		}

		public String CODFORMU;

		public String getCODFORMU() {
			return this.CODFORMU;
		}

		public float DEBEFFET;

		public float getDEBEFFET() {
			return this.DEBEFFET;
		}

		public float FINEFFET;

		public float getFINEFFET() {
			return this.FINEFFET;
		}

		public String IMMAT;

		public String getIMMAT() {
			return this.IMMAT;
		}

		public String REFEXTERN;

		public String getREFEXTERN() {
			return this.REFEXTERN;
		}

		public float DTDECSNT;

		public float getDTDECSNT() {
			return this.DTDECSNT;
		}

		public String INDFORCAG;

		public String getINDFORCAG() {
			return this.INDFORCAG;
		}

		public String CODE_ETAT;

		public String getCODE_ETAT() {
			return this.CODE_ETAT;
		}

		public float DATETASIN;

		public float getDATETASIN() {
			return this.DATETASIN;
		}

		public String TYPEPAVE;

		public String getTYPEPAVE() {
			return this.TYPEPAVE;
		}

		public String NOMCONDUC;

		public String getNOMCONDUC() {
			return this.NOMCONDUC;
		}

		public float DATNAICON;

		public float getDATNAICON() {
			return this.DATNAICON;
		}

		public String NUMPERMIS;

		public String getNUMPERMIS() {
			return this.NUMPERMIS;
		}

		public String CATEGPERM;

		public String getCATEGPERM() {
			return this.CATEGPERM;
		}

		public float DATEPERMI;

		public float getDATEPERMI() {
			return this.DATEPERMI;
		}

		public String RUE;

		public String getRUE() {
			return this.RUE;
		}

		public String CPOSTSINI;

		public String getCPOSTSINI() {
			return this.CPOSTSINI;
		}

		public String CITESINI;

		public String getCITESINI() {
			return this.CITESINI;
		}

		public String REGSINI;

		public String getREGSINI() {
			return this.REGSINI;
		}

		public String GOUVSINI;

		public String getGOUVSINI() {
			return this.GOUVSINI;
		}

		public String NATEXPERT;

		public String getNATEXPERT() {
			return this.NATEXPERT;
		}

		public float IDEXPERT;

		public float getIDEXPERT() {
			return this.IDEXPERT;
		}

		public String NOMTIERS;

		public String getNOMTIERS() {
			return this.NOMTIERS;
		}

		public String IMVEHTIER;

		public String getIMVEHTIER() {
			return this.IMVEHTIER;
		}

		public String NUMCNTTIE;

		public String getNUMCNTTIE() {
			return this.NUMCNTTIE;
		}

		public String NUMSNTTIE;

		public String getNUMSNTTIE() {
			return this.NUMSNTTIE;
		}

		public float CODPOSTIE;

		public float getCODPOSTIE() {
			return this.CODPOSTIE;
		}

		public String NATCAMTIE;

		public String getNATCAMTIE() {
			return this.NATCAMTIE;
		}

		public float IDCAMTIER;

		public float getIDCAMTIER() {
			return this.IDCAMTIER;
		}

		public float CAS_IDA;

		public float getCAS_IDA() {
			return this.CAS_IDA;
		}

		public float RESPIDA;

		public float getRESPIDA() {
			return this.RESPIDA;
		}

		public float DTOUVSNT;

		public float getDTOUVSNT() {
			return this.DTOUVSNT;
		}

		public float DTCLTSNT;

		public float getDTCLTSNT() {
			return this.DTCLTSNT;
		}

		public float DTREOUSNT;

		public float getDTREOUSNT() {
			return this.DTREOUSNT;
		}

		public String COASSUR;

		public String getCOASSUR() {
			return this.COASSUR;
		}

		public String REASSUR;

		public String getREASSUR() {
			return this.REASSUR;
		}

		public String RESPSNT;

		public String getRESPSNT() {
			return this.RESPSNT;
		}

		public float TAUX;

		public float getTAUX() {
			return this.TAUX;
		}

		public float DPECSIN;

		public float getDPECSIN() {
			return this.DPECSIN;
		}

		public String GESTIOSIN;

		public String getGESTIOSIN() {
			return this.GESTIOSIN;
		}

		public float HEURESINI;

		public float getHEURESINI() {
			return this.HEURESINI;
		}

		public String SOURCDEC;

		public String getSOURCDEC() {
			return this.SOURCDEC;
		}

		public String DDETRANSA;

		public String getDDETRANSA() {
			return this.DDETRANSA;
		}

		public BigDecimal UPDATE_IDENT;

		public BigDecimal getUPDATE_IDENT() {
			return this.UPDATE_IDENT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.NUMSNT == null) ? 0 : this.NUMSNT.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.NUMSNT == null) {
				if (other.NUMSNT != null)
					return false;

			} else if (!this.NUMSNT.equals(other.NUMSNT))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.NUMSNT = this.NUMSNT;
			other.CAUSESINI = this.CAUSESINI;
			other.NATSINI = this.NATSINI;
			other.SOUNATSIN = this.SOUNATSIN;
			other.DTSURV = this.DTSURV;
			other.NUMCNT = this.NUMCNT;
			other.NUMAVT = this.NUMAVT;
			other.NUMMAJ = this.NUMMAJ;
			other.NUMRISQ = this.NUMRISQ;
			other.NATCLT = this.NATCLT;
			other.IDCLT = this.IDCLT;
			other.NATINT = this.NATINT;
			other.IDINT = this.IDINT;
			other.IDDELEGA = this.IDDELEGA;
			other.CODFAM = this.CODFAM;
			other.CODPROD = this.CODPROD;
			other.CODFORMU = this.CODFORMU;
			other.DEBEFFET = this.DEBEFFET;
			other.FINEFFET = this.FINEFFET;
			other.IMMAT = this.IMMAT;
			other.REFEXTERN = this.REFEXTERN;
			other.DTDECSNT = this.DTDECSNT;
			other.INDFORCAG = this.INDFORCAG;
			other.CODE_ETAT = this.CODE_ETAT;
			other.DATETASIN = this.DATETASIN;
			other.TYPEPAVE = this.TYPEPAVE;
			other.NOMCONDUC = this.NOMCONDUC;
			other.DATNAICON = this.DATNAICON;
			other.NUMPERMIS = this.NUMPERMIS;
			other.CATEGPERM = this.CATEGPERM;
			other.DATEPERMI = this.DATEPERMI;
			other.RUE = this.RUE;
			other.CPOSTSINI = this.CPOSTSINI;
			other.CITESINI = this.CITESINI;
			other.REGSINI = this.REGSINI;
			other.GOUVSINI = this.GOUVSINI;
			other.NATEXPERT = this.NATEXPERT;
			other.IDEXPERT = this.IDEXPERT;
			other.NOMTIERS = this.NOMTIERS;
			other.IMVEHTIER = this.IMVEHTIER;
			other.NUMCNTTIE = this.NUMCNTTIE;
			other.NUMSNTTIE = this.NUMSNTTIE;
			other.CODPOSTIE = this.CODPOSTIE;
			other.NATCAMTIE = this.NATCAMTIE;
			other.IDCAMTIER = this.IDCAMTIER;
			other.CAS_IDA = this.CAS_IDA;
			other.RESPIDA = this.RESPIDA;
			other.DTOUVSNT = this.DTOUVSNT;
			other.DTCLTSNT = this.DTCLTSNT;
			other.DTREOUSNT = this.DTREOUSNT;
			other.COASSUR = this.COASSUR;
			other.REASSUR = this.REASSUR;
			other.RESPSNT = this.RESPSNT;
			other.TAUX = this.TAUX;
			other.DPECSIN = this.DPECSIN;
			other.GESTIOSIN = this.GESTIOSIN;
			other.HEURESINI = this.HEURESINI;
			other.SOURCDEC = this.SOURCDEC;
			other.DDETRANSA = this.DDETRANSA;
			other.UPDATE_IDENT = this.UPDATE_IDENT;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.NUMSNT = this.NUMSNT;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_Details_As400, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_Details_As400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CAUSESINI = readString(dis, ois);

				this.NATSINI = readString(dis, ois);

				this.SOUNATSIN = dis.readFloat();

				this.DTSURV = dis.readFloat();

				this.NUMCNT = readString(dis, ois);

				this.NUMAVT = dis.readFloat();

				this.NUMMAJ = dis.readFloat();

				this.NUMRISQ = dis.readFloat();

				this.NATCLT = readString(dis, ois);

				this.IDCLT = dis.readFloat();

				this.NATINT = readString(dis, ois);

				this.IDINT = dis.readFloat();

				this.IDDELEGA = dis.readFloat();

				this.CODFAM = readString(dis, ois);

				this.CODPROD = readString(dis, ois);

				this.CODFORMU = readString(dis, ois);

				this.DEBEFFET = dis.readFloat();

				this.FINEFFET = dis.readFloat();

				this.IMMAT = readString(dis, ois);

				this.REFEXTERN = readString(dis, ois);

				this.DTDECSNT = dis.readFloat();

				this.INDFORCAG = readString(dis, ois);

				this.CODE_ETAT = readString(dis, ois);

				this.DATETASIN = dis.readFloat();

				this.TYPEPAVE = readString(dis, ois);

				this.NOMCONDUC = readString(dis, ois);

				this.DATNAICON = dis.readFloat();

				this.NUMPERMIS = readString(dis, ois);

				this.CATEGPERM = readString(dis, ois);

				this.DATEPERMI = dis.readFloat();

				this.RUE = readString(dis, ois);

				this.CPOSTSINI = readString(dis, ois);

				this.CITESINI = readString(dis, ois);

				this.REGSINI = readString(dis, ois);

				this.GOUVSINI = readString(dis, ois);

				this.NATEXPERT = readString(dis, ois);

				this.IDEXPERT = dis.readFloat();

				this.NOMTIERS = readString(dis, ois);

				this.IMVEHTIER = readString(dis, ois);

				this.NUMCNTTIE = readString(dis, ois);

				this.NUMSNTTIE = readString(dis, ois);

				this.CODPOSTIE = dis.readFloat();

				this.NATCAMTIE = readString(dis, ois);

				this.IDCAMTIER = dis.readFloat();

				this.CAS_IDA = dis.readFloat();

				this.RESPIDA = dis.readFloat();

				this.DTOUVSNT = dis.readFloat();

				this.DTCLTSNT = dis.readFloat();

				this.DTREOUSNT = dis.readFloat();

				this.COASSUR = readString(dis, ois);

				this.REASSUR = readString(dis, ois);

				this.RESPSNT = readString(dis, ois);

				this.TAUX = dis.readFloat();

				this.DPECSIN = dis.readFloat();

				this.GESTIOSIN = readString(dis, ois);

				this.HEURESINI = dis.readFloat();

				this.SOURCDEC = readString(dis, ois);

				this.DDETRANSA = readString(dis, ois);

				this.UPDATE_IDENT = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CAUSESINI, dos, oos);

				writeString(this.NATSINI, dos, oos);

				dos.writeFloat(this.SOUNATSIN);

				dos.writeFloat(this.DTSURV);

				writeString(this.NUMCNT, dos, oos);

				dos.writeFloat(this.NUMAVT);

				dos.writeFloat(this.NUMMAJ);

				dos.writeFloat(this.NUMRISQ);

				writeString(this.NATCLT, dos, oos);

				dos.writeFloat(this.IDCLT);

				writeString(this.NATINT, dos, oos);

				dos.writeFloat(this.IDINT);

				dos.writeFloat(this.IDDELEGA);

				writeString(this.CODFAM, dos, oos);

				writeString(this.CODPROD, dos, oos);

				writeString(this.CODFORMU, dos, oos);

				dos.writeFloat(this.DEBEFFET);

				dos.writeFloat(this.FINEFFET);

				writeString(this.IMMAT, dos, oos);

				writeString(this.REFEXTERN, dos, oos);

				dos.writeFloat(this.DTDECSNT);

				writeString(this.INDFORCAG, dos, oos);

				writeString(this.CODE_ETAT, dos, oos);

				dos.writeFloat(this.DATETASIN);

				writeString(this.TYPEPAVE, dos, oos);

				writeString(this.NOMCONDUC, dos, oos);

				dos.writeFloat(this.DATNAICON);

				writeString(this.NUMPERMIS, dos, oos);

				writeString(this.CATEGPERM, dos, oos);

				dos.writeFloat(this.DATEPERMI);

				writeString(this.RUE, dos, oos);

				writeString(this.CPOSTSINI, dos, oos);

				writeString(this.CITESINI, dos, oos);

				writeString(this.REGSINI, dos, oos);

				writeString(this.GOUVSINI, dos, oos);

				writeString(this.NATEXPERT, dos, oos);

				dos.writeFloat(this.IDEXPERT);

				writeString(this.NOMTIERS, dos, oos);

				writeString(this.IMVEHTIER, dos, oos);

				writeString(this.NUMCNTTIE, dos, oos);

				writeString(this.NUMSNTTIE, dos, oos);

				dos.writeFloat(this.CODPOSTIE);

				writeString(this.NATCAMTIE, dos, oos);

				dos.writeFloat(this.IDCAMTIER);

				dos.writeFloat(this.CAS_IDA);

				dos.writeFloat(this.RESPIDA);

				dos.writeFloat(this.DTOUVSNT);

				dos.writeFloat(this.DTCLTSNT);

				dos.writeFloat(this.DTREOUSNT);

				writeString(this.COASSUR, dos, oos);

				writeString(this.REASSUR, dos, oos);

				writeString(this.RESPSNT, dos, oos);

				dos.writeFloat(this.TAUX);

				dos.writeFloat(this.DPECSIN);

				writeString(this.GESTIOSIN, dos, oos);

				dos.writeFloat(this.HEURESINI);

				writeString(this.SOURCDEC, dos, oos);

				writeString(this.DDETRANSA, dos, oos);

				oos.writeObject(this.UPDATE_IDENT);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",CAUSESINI=" + CAUSESINI);
			sb.append(",NATSINI=" + NATSINI);
			sb.append(",SOUNATSIN=" + String.valueOf(SOUNATSIN));
			sb.append(",DTSURV=" + String.valueOf(DTSURV));
			sb.append(",NUMCNT=" + NUMCNT);
			sb.append(",NUMAVT=" + String.valueOf(NUMAVT));
			sb.append(",NUMMAJ=" + String.valueOf(NUMMAJ));
			sb.append(",NUMRISQ=" + String.valueOf(NUMRISQ));
			sb.append(",NATCLT=" + NATCLT);
			sb.append(",IDCLT=" + String.valueOf(IDCLT));
			sb.append(",NATINT=" + NATINT);
			sb.append(",IDINT=" + String.valueOf(IDINT));
			sb.append(",IDDELEGA=" + String.valueOf(IDDELEGA));
			sb.append(",CODFAM=" + CODFAM);
			sb.append(",CODPROD=" + CODPROD);
			sb.append(",CODFORMU=" + CODFORMU);
			sb.append(",DEBEFFET=" + String.valueOf(DEBEFFET));
			sb.append(",FINEFFET=" + String.valueOf(FINEFFET));
			sb.append(",IMMAT=" + IMMAT);
			sb.append(",REFEXTERN=" + REFEXTERN);
			sb.append(",DTDECSNT=" + String.valueOf(DTDECSNT));
			sb.append(",INDFORCAG=" + INDFORCAG);
			sb.append(",CODE_ETAT=" + CODE_ETAT);
			sb.append(",DATETASIN=" + String.valueOf(DATETASIN));
			sb.append(",TYPEPAVE=" + TYPEPAVE);
			sb.append(",NOMCONDUC=" + NOMCONDUC);
			sb.append(",DATNAICON=" + String.valueOf(DATNAICON));
			sb.append(",NUMPERMIS=" + NUMPERMIS);
			sb.append(",CATEGPERM=" + CATEGPERM);
			sb.append(",DATEPERMI=" + String.valueOf(DATEPERMI));
			sb.append(",RUE=" + RUE);
			sb.append(",CPOSTSINI=" + CPOSTSINI);
			sb.append(",CITESINI=" + CITESINI);
			sb.append(",REGSINI=" + REGSINI);
			sb.append(",GOUVSINI=" + GOUVSINI);
			sb.append(",NATEXPERT=" + NATEXPERT);
			sb.append(",IDEXPERT=" + String.valueOf(IDEXPERT));
			sb.append(",NOMTIERS=" + NOMTIERS);
			sb.append(",IMVEHTIER=" + IMVEHTIER);
			sb.append(",NUMCNTTIE=" + NUMCNTTIE);
			sb.append(",NUMSNTTIE=" + NUMSNTTIE);
			sb.append(",CODPOSTIE=" + String.valueOf(CODPOSTIE));
			sb.append(",NATCAMTIE=" + NATCAMTIE);
			sb.append(",IDCAMTIER=" + String.valueOf(IDCAMTIER));
			sb.append(",CAS_IDA=" + String.valueOf(CAS_IDA));
			sb.append(",RESPIDA=" + String.valueOf(RESPIDA));
			sb.append(",DTOUVSNT=" + String.valueOf(DTOUVSNT));
			sb.append(",DTCLTSNT=" + String.valueOf(DTCLTSNT));
			sb.append(",DTREOUSNT=" + String.valueOf(DTREOUSNT));
			sb.append(",COASSUR=" + COASSUR);
			sb.append(",REASSUR=" + REASSUR);
			sb.append(",RESPSNT=" + RESPSNT);
			sb.append(",TAUX=" + String.valueOf(TAUX));
			sb.append(",DPECSIN=" + String.valueOf(DPECSIN));
			sb.append(",GESTIOSIN=" + GESTIOSIN);
			sb.append(",HEURESINI=" + String.valueOf(HEURESINI));
			sb.append(",SOURCDEC=" + SOURCDEC);
			sb.append(",DDETRANSA=" + DDETRANSA);
			sb.append(",UPDATE_IDENT=" + String.valueOf(UPDATE_IDENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NUMSNT, other.NUMSNT);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row1,row5,row4) outputs:(row2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "STGPFE01";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:aK2Sx+EnoVbbsz/VwDPMViGtOoC6JNvt1H73+nNXoSoTA9g=");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  SITB01.NUMSNT, \n  SITB01.CAUSESINI, \n  SITB01.NATSINI, \n  SITB01.SOUNATSIN, \n  SITB01.DTSURV, \n  SITB01.NUMCN"
						+ "T, \n  SITB01.NUMAVT, \n  SITB01.NUMMAJ, \n  SITB01.NUMRISQ, \n  SITB01.NATCLT, \n  SITB01.IDCLT, \n  SITB01.NATINT, \n  SITB01"
						+ ".IDINT, \n  SITB01.IDDELEGA, \n  SITB01.CODFAM, \n  SITB01.CODPROD, \n  SITB01.CODFORMU, \n  SITB01.DEBEFFET, \n  SITB01.FINEF"
						+ "FET, \n  SITB01.IMMAT, \n  SITB01.REFEXTERN, \n  SITB01.DTDECSNT, \n  SITB01.INDFORCAG, \n  SITB01.CODE_ETAT, \n  SITB01.DATET"
						+ "ASIN, \n  SITB01.TYPEPAVE, \n  SITB01.NOMCONDUC, \n  SITB01.DATNAICON, \n  SITB01.NUMPERMIS, \n  SITB01.CATEGPERM, \n  SITB01."
						+ "DATEPERMI, \n  SITB01.RUE, \n  SITB01.CPOSTSINI, \n  SITB01.CITESINI, \n  SITB01.REGSINI, \n  SITB01.GOUVSINI, \n  SITB01.NATE"
						+ "XPERT, \n  SITB01.IDEXPERT, \n  SITB01.NOMTIERS, \n  SITB01.IMVEHTIER, \n  SITB01.NUMCNTTIE, \n  SITB01.NUMSNTTIE, \n  SITB01."
						+ "CODPOSTIE, \n  SITB01.NATCAMTIE, \n  SITB01.IDCAMTIER, \n  SITB01.CAS_IDA, \n  SITB01.RESPIDA, \n  SITB01.DTOUVSNT, \n  SITB01"
						+ ".DTCLTSNT, \n  SITB01.DTREOUSNT, \n  SITB01.COASSUR, \n  SITB01.REASSUR, \n  SITB01.RESPSNT, \n  SITB01.TAUX, \n  SITB01.DPECS"
						+ "IN, \n  SITB01.GESTIOSIN, \n  SITB01.HEURESINI, \n  SITB01.SOURCDEC, \n  SITB01.DDETRANSA, \n  SITB01.UPDATE_IDENT\nFROM SITB0"
						+ "1";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row4.NUMSNT = null;
						} else {

							row4.NUMSNT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row4.CAUSESINI = null;
						} else {

							row4.CAUSESINI = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row4.NATSINI = null;
						} else {

							row4.NATSINI = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row4.SOUNATSIN = 0;
						} else {

							row4.SOUNATSIN = rs_tDBInput_3.getFloat(4);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row4.DTSURV = 0;
						} else {

							row4.DTSURV = rs_tDBInput_3.getFloat(5);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row4.NUMCNT = null;
						} else {

							row4.NUMCNT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row4.NUMAVT = 0;
						} else {

							row4.NUMAVT = rs_tDBInput_3.getFloat(7);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row4.NUMMAJ = 0;
						} else {

							row4.NUMMAJ = rs_tDBInput_3.getFloat(8);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row4.NUMRISQ = 0;
						} else {

							row4.NUMRISQ = rs_tDBInput_3.getFloat(9);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row4.NATCLT = null;
						} else {

							row4.NATCLT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row4.IDCLT = 0;
						} else {

							row4.IDCLT = rs_tDBInput_3.getFloat(11);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							row4.NATINT = null;
						} else {

							row4.NATINT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 12, false);
						}
						if (colQtyInRs_tDBInput_3 < 13) {
							row4.IDINT = 0;
						} else {

							row4.IDINT = rs_tDBInput_3.getFloat(13);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 14) {
							row4.IDDELEGA = 0;
						} else {

							row4.IDDELEGA = rs_tDBInput_3.getFloat(14);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 15) {
							row4.CODFAM = null;
						} else {

							row4.CODFAM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15, false);
						}
						if (colQtyInRs_tDBInput_3 < 16) {
							row4.CODPROD = null;
						} else {

							row4.CODPROD = routines.system.JDBCUtil.getString(rs_tDBInput_3, 16, false);
						}
						if (colQtyInRs_tDBInput_3 < 17) {
							row4.CODFORMU = null;
						} else {

							row4.CODFORMU = routines.system.JDBCUtil.getString(rs_tDBInput_3, 17, false);
						}
						if (colQtyInRs_tDBInput_3 < 18) {
							row4.DEBEFFET = 0;
						} else {

							row4.DEBEFFET = rs_tDBInput_3.getFloat(18);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 19) {
							row4.FINEFFET = 0;
						} else {

							row4.FINEFFET = rs_tDBInput_3.getFloat(19);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 20) {
							row4.IMMAT = null;
						} else {

							row4.IMMAT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 20, false);
						}
						if (colQtyInRs_tDBInput_3 < 21) {
							row4.REFEXTERN = null;
						} else {

							row4.REFEXTERN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 21, false);
						}
						if (colQtyInRs_tDBInput_3 < 22) {
							row4.DTDECSNT = 0;
						} else {

							row4.DTDECSNT = rs_tDBInput_3.getFloat(22);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 23) {
							row4.INDFORCAG = null;
						} else {

							row4.INDFORCAG = routines.system.JDBCUtil.getString(rs_tDBInput_3, 23, false);
						}
						if (colQtyInRs_tDBInput_3 < 24) {
							row4.CODE_ETAT = null;
						} else {

							row4.CODE_ETAT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 24, false);
						}
						if (colQtyInRs_tDBInput_3 < 25) {
							row4.DATETASIN = 0;
						} else {

							row4.DATETASIN = rs_tDBInput_3.getFloat(25);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 26) {
							row4.TYPEPAVE = null;
						} else {

							row4.TYPEPAVE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 26, false);
						}
						if (colQtyInRs_tDBInput_3 < 27) {
							row4.NOMCONDUC = null;
						} else {

							row4.NOMCONDUC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 27, false);
						}
						if (colQtyInRs_tDBInput_3 < 28) {
							row4.DATNAICON = 0;
						} else {

							row4.DATNAICON = rs_tDBInput_3.getFloat(28);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 29) {
							row4.NUMPERMIS = null;
						} else {

							row4.NUMPERMIS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 29, false);
						}
						if (colQtyInRs_tDBInput_3 < 30) {
							row4.CATEGPERM = null;
						} else {

							row4.CATEGPERM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 30, false);
						}
						if (colQtyInRs_tDBInput_3 < 31) {
							row4.DATEPERMI = 0;
						} else {

							row4.DATEPERMI = rs_tDBInput_3.getFloat(31);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 32) {
							row4.RUE = null;
						} else {

							row4.RUE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 32, false);
						}
						if (colQtyInRs_tDBInput_3 < 33) {
							row4.CPOSTSINI = null;
						} else {

							row4.CPOSTSINI = routines.system.JDBCUtil.getString(rs_tDBInput_3, 33, false);
						}
						if (colQtyInRs_tDBInput_3 < 34) {
							row4.CITESINI = null;
						} else {

							row4.CITESINI = routines.system.JDBCUtil.getString(rs_tDBInput_3, 34, false);
						}
						if (colQtyInRs_tDBInput_3 < 35) {
							row4.REGSINI = null;
						} else {

							row4.REGSINI = routines.system.JDBCUtil.getString(rs_tDBInput_3, 35, false);
						}
						if (colQtyInRs_tDBInput_3 < 36) {
							row4.GOUVSINI = null;
						} else {

							row4.GOUVSINI = routines.system.JDBCUtil.getString(rs_tDBInput_3, 36, false);
						}
						if (colQtyInRs_tDBInput_3 < 37) {
							row4.NATEXPERT = null;
						} else {

							row4.NATEXPERT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 37, false);
						}
						if (colQtyInRs_tDBInput_3 < 38) {
							row4.IDEXPERT = 0;
						} else {

							row4.IDEXPERT = rs_tDBInput_3.getFloat(38);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 39) {
							row4.NOMTIERS = null;
						} else {

							row4.NOMTIERS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 39, false);
						}
						if (colQtyInRs_tDBInput_3 < 40) {
							row4.IMVEHTIER = null;
						} else {

							row4.IMVEHTIER = routines.system.JDBCUtil.getString(rs_tDBInput_3, 40, false);
						}
						if (colQtyInRs_tDBInput_3 < 41) {
							row4.NUMCNTTIE = null;
						} else {

							row4.NUMCNTTIE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 41, false);
						}
						if (colQtyInRs_tDBInput_3 < 42) {
							row4.NUMSNTTIE = null;
						} else {

							row4.NUMSNTTIE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 42, false);
						}
						if (colQtyInRs_tDBInput_3 < 43) {
							row4.CODPOSTIE = 0;
						} else {

							row4.CODPOSTIE = rs_tDBInput_3.getFloat(43);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 44) {
							row4.NATCAMTIE = null;
						} else {

							row4.NATCAMTIE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 44, false);
						}
						if (colQtyInRs_tDBInput_3 < 45) {
							row4.IDCAMTIER = 0;
						} else {

							row4.IDCAMTIER = rs_tDBInput_3.getFloat(45);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 46) {
							row4.CAS_IDA = 0;
						} else {

							row4.CAS_IDA = rs_tDBInput_3.getFloat(46);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 47) {
							row4.RESPIDA = 0;
						} else {

							row4.RESPIDA = rs_tDBInput_3.getFloat(47);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 48) {
							row4.DTOUVSNT = 0;
						} else {

							row4.DTOUVSNT = rs_tDBInput_3.getFloat(48);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 49) {
							row4.DTCLTSNT = 0;
						} else {

							row4.DTCLTSNT = rs_tDBInput_3.getFloat(49);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 50) {
							row4.DTREOUSNT = 0;
						} else {

							row4.DTREOUSNT = rs_tDBInput_3.getFloat(50);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 51) {
							row4.COASSUR = null;
						} else {

							row4.COASSUR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 51, false);
						}
						if (colQtyInRs_tDBInput_3 < 52) {
							row4.REASSUR = null;
						} else {

							row4.REASSUR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 52, false);
						}
						if (colQtyInRs_tDBInput_3 < 53) {
							row4.RESPSNT = null;
						} else {

							row4.RESPSNT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 53, false);
						}
						if (colQtyInRs_tDBInput_3 < 54) {
							row4.TAUX = 0;
						} else {

							row4.TAUX = rs_tDBInput_3.getFloat(54);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 55) {
							row4.DPECSIN = 0;
						} else {

							row4.DPECSIN = rs_tDBInput_3.getFloat(55);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 56) {
							row4.GESTIOSIN = null;
						} else {

							row4.GESTIOSIN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 56, false);
						}
						if (colQtyInRs_tDBInput_3 < 57) {
							row4.HEURESINI = 0;
						} else {

							row4.HEURESINI = rs_tDBInput_3.getFloat(57);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 58) {
							row4.SOURCDEC = null;
						} else {

							row4.SOURCDEC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 58, false);
						}
						if (colQtyInRs_tDBInput_3 < 59) {
							row4.DDETRANSA = null;
						} else {

							row4.DDETRANSA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 59, false);
						}
						if (colQtyInRs_tDBInput_3 < 60) {
							row4.UPDATE_IDENT = null;
						} else {

							row4.UPDATE_IDENT = rs_tDBInput_3.getBigDecimal(60);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.NUMSNT = row4.NUMSNT;

						row4_HashRow.CAUSESINI = row4.CAUSESINI;

						row4_HashRow.NATSINI = row4.NATSINI;

						row4_HashRow.SOUNATSIN = row4.SOUNATSIN;

						row4_HashRow.DTSURV = row4.DTSURV;

						row4_HashRow.NUMCNT = row4.NUMCNT;

						row4_HashRow.NUMAVT = row4.NUMAVT;

						row4_HashRow.NUMMAJ = row4.NUMMAJ;

						row4_HashRow.NUMRISQ = row4.NUMRISQ;

						row4_HashRow.NATCLT = row4.NATCLT;

						row4_HashRow.IDCLT = row4.IDCLT;

						row4_HashRow.NATINT = row4.NATINT;

						row4_HashRow.IDINT = row4.IDINT;

						row4_HashRow.IDDELEGA = row4.IDDELEGA;

						row4_HashRow.CODFAM = row4.CODFAM;

						row4_HashRow.CODPROD = row4.CODPROD;

						row4_HashRow.CODFORMU = row4.CODFORMU;

						row4_HashRow.DEBEFFET = row4.DEBEFFET;

						row4_HashRow.FINEFFET = row4.FINEFFET;

						row4_HashRow.IMMAT = row4.IMMAT;

						row4_HashRow.REFEXTERN = row4.REFEXTERN;

						row4_HashRow.DTDECSNT = row4.DTDECSNT;

						row4_HashRow.INDFORCAG = row4.INDFORCAG;

						row4_HashRow.CODE_ETAT = row4.CODE_ETAT;

						row4_HashRow.DATETASIN = row4.DATETASIN;

						row4_HashRow.TYPEPAVE = row4.TYPEPAVE;

						row4_HashRow.NOMCONDUC = row4.NOMCONDUC;

						row4_HashRow.DATNAICON = row4.DATNAICON;

						row4_HashRow.NUMPERMIS = row4.NUMPERMIS;

						row4_HashRow.CATEGPERM = row4.CATEGPERM;

						row4_HashRow.DATEPERMI = row4.DATEPERMI;

						row4_HashRow.RUE = row4.RUE;

						row4_HashRow.CPOSTSINI = row4.CPOSTSINI;

						row4_HashRow.CITESINI = row4.CITESINI;

						row4_HashRow.REGSINI = row4.REGSINI;

						row4_HashRow.GOUVSINI = row4.GOUVSINI;

						row4_HashRow.NATEXPERT = row4.NATEXPERT;

						row4_HashRow.IDEXPERT = row4.IDEXPERT;

						row4_HashRow.NOMTIERS = row4.NOMTIERS;

						row4_HashRow.IMVEHTIER = row4.IMVEHTIER;

						row4_HashRow.NUMCNTTIE = row4.NUMCNTTIE;

						row4_HashRow.NUMSNTTIE = row4.NUMSNTTIE;

						row4_HashRow.CODPOSTIE = row4.CODPOSTIE;

						row4_HashRow.NATCAMTIE = row4.NATCAMTIE;

						row4_HashRow.IDCAMTIER = row4.IDCAMTIER;

						row4_HashRow.CAS_IDA = row4.CAS_IDA;

						row4_HashRow.RESPIDA = row4.RESPIDA;

						row4_HashRow.DTOUVSNT = row4.DTOUVSNT;

						row4_HashRow.DTCLTSNT = row4.DTCLTSNT;

						row4_HashRow.DTREOUSNT = row4.DTREOUSNT;

						row4_HashRow.COASSUR = row4.COASSUR;

						row4_HashRow.REASSUR = row4.REASSUR;

						row4_HashRow.RESPSNT = row4.RESPSNT;

						row4_HashRow.TAUX = row4.TAUX;

						row4_HashRow.DPECSIN = row4.DPECSIN;

						row4_HashRow.GESTIOSIN = row4.GESTIOSIN;

						row4_HashRow.HEURESINI = row4.HEURESINI;

						row4_HashRow.SOURCDEC = row4.SOURCDEC;

						row4_HashRow.DDETRANSA = row4.DDETRANSA;

						row4_HashRow.UPDATE_IDENT = row4.UPDATE_IDENT;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Table_Sinistre_Details_As400 Table_Sinistre_Details_As400Class = new Table_Sinistre_Details_As400();

		int exitCode = Table_Sinistre_Details_As400Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Table_Sinistre_Details_As400.class.getClassLoader().getResourceAsStream(
					"ami_assurances_1/table_sinistre_details_as400_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Table_Sinistre_Details_As400.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Table_Sinistre_Details_As400");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 158123 characters generated by Talend Open Studio for Data Integration on the
 * 5 septembre 2022 à 15:54:36 GMT+01:00
 ************************************************************************************************/