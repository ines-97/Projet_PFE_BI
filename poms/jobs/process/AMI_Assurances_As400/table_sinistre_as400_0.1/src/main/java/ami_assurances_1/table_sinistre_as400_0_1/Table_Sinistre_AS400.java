// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ami_assurances_1.table_sinistre_as400_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Table_Sinistre_AS400 Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Table_Sinistre_AS400 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Table_Sinistre_AS400";
	private final String projectName = "AMI_ASSURANCES_1";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Table_Sinistre_AS400.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Table_Sinistre_AS400.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJoin_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public float MNTPROVIS;

		public float getMNTPROVIS() {
			return this.MNTPROVIS;
		}

		public float MNTPAIGRN;

		public float getMNTPAIGRN() {
			return this.MNTPAIGRN;
		}

		public float MNTAGGRAV;

		public float getMNTAGGRAV() {
			return this.MNTAGGRAV;
		}

		public float MNTAMELIO;

		public float getMNTAMELIO() {
			return this.MNTAMELIO;
		}

		public float MNTTOTAL;

		public float getMNTTOTAL() {
			return this.MNTTOTAL;
		}

		public float MNTTOTNET;

		public float getMNTTOTNET() {
			return this.MNTTOTNET;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.NUMSNT == null) ? 0 : this.NUMSNT.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.NUMSNT == null) {
				if (other.NUMSNT != null)
					return false;

			} else if (!this.NUMSNT.equals(other.NUMSNT))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.NUMSNT = this.NUMSNT;
			other.MNTPROVIS = this.MNTPROVIS;
			other.MNTPAIGRN = this.MNTPAIGRN;
			other.MNTAGGRAV = this.MNTAGGRAV;
			other.MNTAMELIO = this.MNTAMELIO;
			other.MNTTOTAL = this.MNTTOTAL;
			other.MNTTOTNET = this.MNTTOTNET;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.NUMSNT = this.NUMSNT;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.MNTPROVIS = dis.readFloat();

				this.MNTPAIGRN = dis.readFloat();

				this.MNTAGGRAV = dis.readFloat();

				this.MNTAMELIO = dis.readFloat();

				this.MNTTOTAL = dis.readFloat();

				this.MNTTOTNET = dis.readFloat();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeFloat(this.MNTPROVIS);

				dos.writeFloat(this.MNTPAIGRN);

				dos.writeFloat(this.MNTAGGRAV);

				dos.writeFloat(this.MNTAMELIO);

				dos.writeFloat(this.MNTTOTAL);

				dos.writeFloat(this.MNTTOTNET);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",MNTPROVIS=" + String.valueOf(MNTPROVIS));
			sb.append(",MNTPAIGRN=" + String.valueOf(MNTPAIGRN));
			sb.append(",MNTAGGRAV=" + String.valueOf(MNTAGGRAV));
			sb.append(",MNTAMELIO=" + String.valueOf(MNTAMELIO));
			sb.append(",MNTTOTAL=" + String.valueOf(MNTTOTAL));
			sb.append(",MNTTOTNET=" + String.valueOf(MNTTOTNET));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NUMSNT, other.NUMSNT);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public float MNTPROVIS;

		public float getMNTPROVIS() {
			return this.MNTPROVIS;
		}

		public float MNTPAIGRN;

		public float getMNTPAIGRN() {
			return this.MNTPAIGRN;
		}

		public float MNTAGGRAV;

		public float getMNTAGGRAV() {
			return this.MNTAGGRAV;
		}

		public float MNTAMELIO;

		public float getMNTAMELIO() {
			return this.MNTAMELIO;
		}

		public float MNTTOTAL;

		public float getMNTTOTAL() {
			return this.MNTTOTAL;
		}

		public float MNTTOTNET;

		public float getMNTTOTNET() {
			return this.MNTTOTNET;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.MNTPROVIS = dis.readFloat();

					this.MNTPAIGRN = dis.readFloat();

					this.MNTAGGRAV = dis.readFloat();

					this.MNTAMELIO = dis.readFloat();

					this.MNTTOTAL = dis.readFloat();

					this.MNTTOTNET = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// float

				dos.writeFloat(this.MNTPROVIS);

				// float

				dos.writeFloat(this.MNTPAIGRN);

				// float

				dos.writeFloat(this.MNTAGGRAV);

				// float

				dos.writeFloat(this.MNTAMELIO);

				// float

				dos.writeFloat(this.MNTTOTAL);

				// float

				dos.writeFloat(this.MNTTOTNET);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",MNTPROVIS=" + String.valueOf(MNTPROVIS));
			sb.append(",MNTPAIGRN=" + String.valueOf(MNTPAIGRN));
			sb.append(",MNTAGGRAV=" + String.valueOf(MNTAGGRAV));
			sb.append(",MNTAMELIO=" + String.valueOf(MNTAMELIO));
			sb.append(",MNTTOTAL=" + String.valueOf(MNTTOTAL));
			sb.append(",MNTTOTNET=" + String.valueOf(MNTTOTNET));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public float MNTPROVIS;

		public float getMNTPROVIS() {
			return this.MNTPROVIS;
		}

		public float MNTPAIGRN;

		public float getMNTPAIGRN() {
			return this.MNTPAIGRN;
		}

		public float MNTAGGRAV;

		public float getMNTAGGRAV() {
			return this.MNTAGGRAV;
		}

		public float MNTAMELIO;

		public float getMNTAMELIO() {
			return this.MNTAMELIO;
		}

		public float MNTTOTAL;

		public float getMNTTOTAL() {
			return this.MNTTOTAL;
		}

		public float MNTTOTNET;

		public float getMNTTOTNET() {
			return this.MNTTOTNET;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.MNTPROVIS = dis.readFloat();

					this.MNTPAIGRN = dis.readFloat();

					this.MNTAGGRAV = dis.readFloat();

					this.MNTAMELIO = dis.readFloat();

					this.MNTTOTAL = dis.readFloat();

					this.MNTTOTNET = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// float

				dos.writeFloat(this.MNTPROVIS);

				// float

				dos.writeFloat(this.MNTPAIGRN);

				// float

				dos.writeFloat(this.MNTAGGRAV);

				// float

				dos.writeFloat(this.MNTAMELIO);

				// float

				dos.writeFloat(this.MNTTOTAL);

				// float

				dos.writeFloat(this.MNTTOTNET);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",MNTPROVIS=" + String.valueOf(MNTPROVIS));
			sb.append(",MNTPAIGRN=" + String.valueOf(MNTPAIGRN));
			sb.append(",MNTAGGRAV=" + String.valueOf(MNTAGGRAV));
			sb.append(",MNTAMELIO=" + String.valueOf(MNTAMELIO));
			sb.append(",MNTTOTAL=" + String.valueOf(MNTTOTAL));
			sb.append(",MNTTOTNET=" + String.valueOf(MNTTOTNET));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String GRNTSINI;

		public String getGRNTSINI() {
			return this.GRNTSINI;
		}

		public float EVAL_INIT;

		public float getEVAL_INIT() {
			return this.EVAL_INIT;
		}

		public float MNTPROVIS;

		public float getMNTPROVIS() {
			return this.MNTPROVIS;
		}

		public float MNTPAIGRN;

		public float getMNTPAIGRN() {
			return this.MNTPAIGRN;
		}

		public float MNTAGGRAV;

		public float getMNTAGGRAV() {
			return this.MNTAGGRAV;
		}

		public float MNTAMELIO;

		public float getMNTAMELIO() {
			return this.MNTAMELIO;
		}

		public float MNTRECUPC;

		public float getMNTRECUPC() {
			return this.MNTRECUPC;
		}

		public float MNTBONIS;

		public float getMNTBONIS() {
			return this.MNTBONIS;
		}

		public float FRANCHIS;

		public float getFRANCHIS() {
			return this.FRANCHIS;
		}

		public float MNTDECLAR;

		public float getMNTDECLAR() {
			return this.MNTDECLAR;
		}

		public float MNTPREVIS;

		public float getMNTPREVIS() {
			return this.MNTPREVIS;
		}

		public float MNTRECOUR;

		public float getMNTRECOUR() {
			return this.MNTRECOUR;
		}

		public float MNTTOTAL;

		public float getMNTTOTAL() {
			return this.MNTTOTAL;
		}

		public float MNTTOTNET;

		public float getMNTTOTNET() {
			return this.MNTTOTNET;
		}

		public String ETATGRNT;

		public String getETATGRNT() {
			return this.ETATGRNT;
		}

		public String MOTIFCLOT;

		public String getMOTIFCLOT() {
			return this.MOTIFCLOT;
		}

		public float DATCLTGRN;

		public float getDATCLTGRN() {
			return this.DATCLTGRN;
		}

		public BigDecimal UPDATE_IDENT;

		public BigDecimal getUPDATE_IDENT() {
			return this.UPDATE_IDENT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.GRNTSINI = readString(dis);

					this.EVAL_INIT = dis.readFloat();

					this.MNTPROVIS = dis.readFloat();

					this.MNTPAIGRN = dis.readFloat();

					this.MNTAGGRAV = dis.readFloat();

					this.MNTAMELIO = dis.readFloat();

					this.MNTRECUPC = dis.readFloat();

					this.MNTBONIS = dis.readFloat();

					this.FRANCHIS = dis.readFloat();

					this.MNTDECLAR = dis.readFloat();

					this.MNTPREVIS = dis.readFloat();

					this.MNTRECOUR = dis.readFloat();

					this.MNTTOTAL = dis.readFloat();

					this.MNTTOTNET = dis.readFloat();

					this.ETATGRNT = readString(dis);

					this.MOTIFCLOT = readString(dis);

					this.DATCLTGRN = dis.readFloat();

					this.UPDATE_IDENT = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.GRNTSINI, dos);

				// float

				dos.writeFloat(this.EVAL_INIT);

				// float

				dos.writeFloat(this.MNTPROVIS);

				// float

				dos.writeFloat(this.MNTPAIGRN);

				// float

				dos.writeFloat(this.MNTAGGRAV);

				// float

				dos.writeFloat(this.MNTAMELIO);

				// float

				dos.writeFloat(this.MNTRECUPC);

				// float

				dos.writeFloat(this.MNTBONIS);

				// float

				dos.writeFloat(this.FRANCHIS);

				// float

				dos.writeFloat(this.MNTDECLAR);

				// float

				dos.writeFloat(this.MNTPREVIS);

				// float

				dos.writeFloat(this.MNTRECOUR);

				// float

				dos.writeFloat(this.MNTTOTAL);

				// float

				dos.writeFloat(this.MNTTOTNET);

				// String

				writeString(this.ETATGRNT, dos);

				// String

				writeString(this.MOTIFCLOT, dos);

				// float

				dos.writeFloat(this.DATCLTGRN);

				// BigDecimal

				dos.writeObject(this.UPDATE_IDENT);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",GRNTSINI=" + GRNTSINI);
			sb.append(",EVAL_INIT=" + String.valueOf(EVAL_INIT));
			sb.append(",MNTPROVIS=" + String.valueOf(MNTPROVIS));
			sb.append(",MNTPAIGRN=" + String.valueOf(MNTPAIGRN));
			sb.append(",MNTAGGRAV=" + String.valueOf(MNTAGGRAV));
			sb.append(",MNTAMELIO=" + String.valueOf(MNTAMELIO));
			sb.append(",MNTRECUPC=" + String.valueOf(MNTRECUPC));
			sb.append(",MNTBONIS=" + String.valueOf(MNTBONIS));
			sb.append(",FRANCHIS=" + String.valueOf(FRANCHIS));
			sb.append(",MNTDECLAR=" + String.valueOf(MNTDECLAR));
			sb.append(",MNTPREVIS=" + String.valueOf(MNTPREVIS));
			sb.append(",MNTRECOUR=" + String.valueOf(MNTRECOUR));
			sb.append(",MNTTOTAL=" + String.valueOf(MNTTOTAL));
			sb.append(",MNTTOTNET=" + String.valueOf(MNTTOTNET));
			sb.append(",ETATGRNT=" + ETATGRNT);
			sb.append(",MOTIFCLOT=" + MOTIFCLOT);
			sb.append(",DATCLTGRN=" + String.valueOf(DATCLTGRN));
			sb.append(",UPDATE_IDENT=" + String.valueOf(UPDATE_IDENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				row12Struct row12 = new row12Struct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String NUMSNT;
					BigDecimal MNTPROVIS_sum;
					BigDecimal MNTPAIGRN_sum;
					BigDecimal MNTAGGRAV_sum;
					BigDecimal MNTAMELIO_sum;
					BigDecimal MNTTOTAL_sum;
					BigDecimal MNTTOTNET_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.NUMSNT == null) ? 0 : this.NUMSNT.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.NUMSNT == null) {
							if (other.NUMSNT != null)
								return false;
						} else if (!this.NUMSNT.equals(other.NUMSNT))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				row12Struct row12_tmp = new row12Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "STGPFE01";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:X72OxfumlRuEt536cyN4/X9agllMXv7oVSAwm1UNNftHSqU=");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  SITB02.NUMSNT, \n  SITB02.GRNTSINI, \n  SITB02.EVAL_INIT, \n  SITB02.MNTPROVIS, \n  SITB02.MNTPAIGRN, \n  SITB02.M"
						+ "NTAGGRAV, \n  SITB02.MNTAMELIO, \n  SITB02.MNTRECUPC, \n  SITB02.MNTBONIS, \n  SITB02.FRANCHIS, \n  SITB02.MNTDECLAR, \n  SITB"
						+ "02.MNTPREVIS, \n  SITB02.MNTRECOUR, \n  SITB02.MNTTOTAL, \n  SITB02.MNTTOTNET, \n  SITB02.ETATGRNT, \n  SITB02.MOTIFCLOT, \n  "
						+ "SITB02.DATCLTGRN, \n  SITB02.UPDATE_IDENT\nFROM SITB02";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row7.NUMSNT = null;
						} else {

							row7.NUMSNT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row7.GRNTSINI = null;
						} else {

							row7.GRNTSINI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row7.EVAL_INIT = 0;
						} else {

							row7.EVAL_INIT = rs_tDBInput_1.getFloat(3);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row7.MNTPROVIS = 0;
						} else {

							row7.MNTPROVIS = rs_tDBInput_1.getFloat(4);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row7.MNTPAIGRN = 0;
						} else {

							row7.MNTPAIGRN = rs_tDBInput_1.getFloat(5);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row7.MNTAGGRAV = 0;
						} else {

							row7.MNTAGGRAV = rs_tDBInput_1.getFloat(6);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row7.MNTAMELIO = 0;
						} else {

							row7.MNTAMELIO = rs_tDBInput_1.getFloat(7);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row7.MNTRECUPC = 0;
						} else {

							row7.MNTRECUPC = rs_tDBInput_1.getFloat(8);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row7.MNTBONIS = 0;
						} else {

							row7.MNTBONIS = rs_tDBInput_1.getFloat(9);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row7.FRANCHIS = 0;
						} else {

							row7.FRANCHIS = rs_tDBInput_1.getFloat(10);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row7.MNTDECLAR = 0;
						} else {

							row7.MNTDECLAR = rs_tDBInput_1.getFloat(11);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row7.MNTPREVIS = 0;
						} else {

							row7.MNTPREVIS = rs_tDBInput_1.getFloat(12);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row7.MNTRECOUR = 0;
						} else {

							row7.MNTRECOUR = rs_tDBInput_1.getFloat(13);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row7.MNTTOTAL = 0;
						} else {

							row7.MNTTOTAL = rs_tDBInput_1.getFloat(14);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row7.MNTTOTNET = 0;
						} else {

							row7.MNTTOTNET = rs_tDBInput_1.getFloat(15);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row7.ETATGRNT = null;
						} else {

							row7.ETATGRNT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row7.MOTIFCLOT = null;
						} else {

							row7.MOTIFCLOT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row7.DATCLTGRN = 0;
						} else {

							row7.DATCLTGRN = rs_tDBInput_1.getFloat(18);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row7.UPDATE_IDENT = null;
						} else {

							row7.UPDATE_IDENT = rs_tDBInput_1.getBigDecimal(19);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							row12 = null;

// # Output table : 'row12'
							row12_tmp.NUMSNT = row7.NUMSNT;
							row12_tmp.MNTPROVIS = row7.MNTPROVIS;
							row12_tmp.MNTPAIGRN = row7.MNTPAIGRN;
							row12_tmp.MNTAGGRAV = row7.MNTAGGRAV;
							row12_tmp.MNTAMELIO = row7.MNTAMELIO;
							row12_tmp.MNTTOTAL = row7.MNTTOTAL;
							row12_tmp.MNTTOTNET = row7.MNTTOTNET;
							row12 = row12_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "row12"
						if (row12 != null) {

							/**
							 * [tAggregateRow_1_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row12");
							}

							operation_finder_tAggregateRow_1.NUMSNT = row12.NUMSNT;

							operation_finder_tAggregateRow_1.hashCodeDirty = true;

							operation_result_tAggregateRow_1 = hash_tAggregateRow_1
									.get(operation_finder_tAggregateRow_1);

							if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

								operation_result_tAggregateRow_1.NUMSNT = operation_finder_tAggregateRow_1.NUMSNT;

								hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
										operation_result_tAggregateRow_1);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_1.MNTPROVIS_sum == null) {
								operation_result_tAggregateRow_1.MNTPROVIS_sum = new BigDecimal(0).setScale(3);
							}
							operation_result_tAggregateRow_1.MNTPROVIS_sum = operation_result_tAggregateRow_1.MNTPROVIS_sum
									.add(new BigDecimal(String.valueOf(row12.MNTPROVIS)));

							if (operation_result_tAggregateRow_1.MNTPAIGRN_sum == null) {
								operation_result_tAggregateRow_1.MNTPAIGRN_sum = new BigDecimal(0).setScale(3);
							}
							operation_result_tAggregateRow_1.MNTPAIGRN_sum = operation_result_tAggregateRow_1.MNTPAIGRN_sum
									.add(new BigDecimal(String.valueOf(row12.MNTPAIGRN)));

							if (operation_result_tAggregateRow_1.MNTAGGRAV_sum == null) {
								operation_result_tAggregateRow_1.MNTAGGRAV_sum = new BigDecimal(0).setScale(3);
							}
							operation_result_tAggregateRow_1.MNTAGGRAV_sum = operation_result_tAggregateRow_1.MNTAGGRAV_sum
									.add(new BigDecimal(String.valueOf(row12.MNTAGGRAV)));

							if (operation_result_tAggregateRow_1.MNTAMELIO_sum == null) {
								operation_result_tAggregateRow_1.MNTAMELIO_sum = new BigDecimal(0).setScale(3);
							}
							operation_result_tAggregateRow_1.MNTAMELIO_sum = operation_result_tAggregateRow_1.MNTAMELIO_sum
									.add(new BigDecimal(String.valueOf(row12.MNTAMELIO)));

							if (operation_result_tAggregateRow_1.MNTTOTAL_sum == null) {
								operation_result_tAggregateRow_1.MNTTOTAL_sum = new BigDecimal(0).setScale(3);
							}
							operation_result_tAggregateRow_1.MNTTOTAL_sum = operation_result_tAggregateRow_1.MNTTOTAL_sum
									.add(new BigDecimal(String.valueOf(row12.MNTTOTAL)));

							if (operation_result_tAggregateRow_1.MNTTOTNET_sum == null) {
								operation_result_tAggregateRow_1.MNTTOTNET_sum = new BigDecimal(0).setScale(3);
							}
							operation_result_tAggregateRow_1.MNTTOTNET_sum = operation_result_tAggregateRow_1.MNTTOTNET_sum
									.add(new BigDecimal(String.valueOf(row12.MNTTOTNET)));

							tos_count_tAggregateRow_1_AGGOUT++;

							/**
							 * [tAggregateRow_1_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] stop
							 */

						} // End of branch "row12"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tHash_row5 begin ] start
				 */

				ok_Hash.put("tHash_row5", false);
				start_Hash.put("tHash_row5", System.currentTimeMillis());

				currentComponent = "tHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tHash_row5 = 0;

				java.util.Map<row5Struct, row5Struct> tHash_row5 = new java.util.LinkedHashMap<row5Struct, row5Struct>();
				globalMap.put("tHash_row5", tHash_row5);

				/**
				 * [tHash_row5 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row5.NUMSNT = aggregated_row_tAggregateRow_1.NUMSNT;

					if (aggregated_row_tAggregateRow_1.MNTPROVIS_sum != null) {
						row5.MNTPROVIS = aggregated_row_tAggregateRow_1.MNTPROVIS_sum.floatValue();

					} else {

						row5.MNTPROVIS = 0;

					}

					if (aggregated_row_tAggregateRow_1.MNTPAIGRN_sum != null) {
						row5.MNTPAIGRN = aggregated_row_tAggregateRow_1.MNTPAIGRN_sum.floatValue();

					} else {

						row5.MNTPAIGRN = 0;

					}

					if (aggregated_row_tAggregateRow_1.MNTAGGRAV_sum != null) {
						row5.MNTAGGRAV = aggregated_row_tAggregateRow_1.MNTAGGRAV_sum.floatValue();

					} else {

						row5.MNTAGGRAV = 0;

					}

					if (aggregated_row_tAggregateRow_1.MNTAMELIO_sum != null) {
						row5.MNTAMELIO = aggregated_row_tAggregateRow_1.MNTAMELIO_sum.floatValue();

					} else {

						row5.MNTAMELIO = 0;

					}

					if (aggregated_row_tAggregateRow_1.MNTTOTAL_sum != null) {
						row5.MNTTOTAL = aggregated_row_tAggregateRow_1.MNTTOTAL_sum.floatValue();

					} else {

						row5.MNTTOTAL = 0;

					}

					if (aggregated_row_tAggregateRow_1.MNTTOTNET_sum != null) {
						row5.MNTTOTNET = aggregated_row_tAggregateRow_1.MNTTOTNET_sum.floatValue();

					} else {

						row5.MNTTOTNET = 0;

					}

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tHash_row5 main ] start
					 */

					currentComponent = "tHash_row5";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
					}

					row5Struct row5_HashRow = new row5Struct();

					row5_HashRow.NUMSNT = row5.NUMSNT;
					row5_HashRow.MNTPROVIS = row5.MNTPROVIS;
					row5_HashRow.MNTPAIGRN = row5.MNTPAIGRN;
					row5_HashRow.MNTAGGRAV = row5.MNTAGGRAV;
					row5_HashRow.MNTAMELIO = row5.MNTAMELIO;
					row5_HashRow.MNTTOTAL = row5.MNTTOTAL;
					row5_HashRow.MNTTOTNET = row5.MNTTOTNET;
					tHash_row5.put(row5_HashRow, row5_HashRow);

					tos_count_tHash_row5++;

					/**
					 * [tHash_row5 main ] stop
					 */

					/**
					 * [tHash_row5 process_data_begin ] start
					 */

					currentComponent = "tHash_row5";

					/**
					 * [tHash_row5 process_data_begin ] stop
					 */

					/**
					 * [tHash_row5 process_data_end ] start
					 */

					currentComponent = "tHash_row5";

					/**
					 * [tHash_row5 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tHash_row5 end ] start
				 */

				currentComponent = "tHash_row5";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tHash_row5", true);
				end_Hash.put("tHash_row5", System.currentTimeMillis());

				/**
				 * [tHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tHash_row5 finally ] start
				 */

				currentComponent = "tHash_row5";

				/**
				 * [tHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String CAUSESINI;

		public String getCAUSESINI() {
			return this.CAUSESINI;
		}

		public String NATSINI;

		public String getNATSINI() {
			return this.NATSINI;
		}

		public String NUMCNT;

		public String getNUMCNT() {
			return this.NUMCNT;
		}

		public float NUMAVT;

		public float getNUMAVT() {
			return this.NUMAVT;
		}

		public float NUMMAJ;

		public float getNUMMAJ() {
			return this.NUMMAJ;
		}

		public String NATINT;

		public String getNATINT() {
			return this.NATINT;
		}

		public String IDINT;

		public String getIDINT() {
			return this.IDINT;
		}

		public String CODFAM;

		public String getCODFAM() {
			return this.CODFAM;
		}

		public String CODPROD;

		public String getCODPROD() {
			return this.CODPROD;
		}

		public String CODFORMU;

		public String getCODFORMU() {
			return this.CODFORMU;
		}

		public String CODE_ETAT;

		public String getCODE_ETAT() {
			return this.CODE_ETAT;
		}

		public java.util.Date DATETASIN;

		public java.util.Date getDATETASIN() {
			return this.DATETASIN;
		}

		public String CPOSTSINI;

		public String getCPOSTSINI() {
			return this.CPOSTSINI;
		}

		public String CITESINI;

		public String getCITESINI() {
			return this.CITESINI;
		}

		public String REGSINI;

		public String getREGSINI() {
			return this.REGSINI;
		}

		public String GOUVSINI;

		public String getGOUVSINI() {
			return this.GOUVSINI;
		}

		public float IDCAMTIER;

		public float getIDCAMTIER() {
			return this.IDCAMTIER;
		}

		public float CAS_IDA;

		public float getCAS_IDA() {
			return this.CAS_IDA;
		}

		public java.util.Date DTOUVSNT;

		public java.util.Date getDTOUVSNT() {
			return this.DTOUVSNT;
		}

		public java.util.Date DTCLTSNT;

		public java.util.Date getDTCLTSNT() {
			return this.DTCLTSNT;
		}

		public float MNTPROVIS;

		public float getMNTPROVIS() {
			return this.MNTPROVIS;
		}

		public float MNTPAIGRN;

		public float getMNTPAIGRN() {
			return this.MNTPAIGRN;
		}

		public float MNTAGGRAV;

		public float getMNTAGGRAV() {
			return this.MNTAGGRAV;
		}

		public float MNTAMELIO;

		public float getMNTAMELIO() {
			return this.MNTAMELIO;
		}

		public float MNTTOTAL;

		public float getMNTTOTAL() {
			return this.MNTTOTAL;
		}

		public float MNTTOTNET;

		public float getMNTTOTNET() {
			return this.MNTTOTNET;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.NUMSNT == null) ? 0 : this.NUMSNT.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.NUMSNT == null) {
				if (other.NUMSNT != null)
					return false;

			} else if (!this.NUMSNT.equals(other.NUMSNT))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.NUMSNT = this.NUMSNT;
			other.CAUSESINI = this.CAUSESINI;
			other.NATSINI = this.NATSINI;
			other.NUMCNT = this.NUMCNT;
			other.NUMAVT = this.NUMAVT;
			other.NUMMAJ = this.NUMMAJ;
			other.NATINT = this.NATINT;
			other.IDINT = this.IDINT;
			other.CODFAM = this.CODFAM;
			other.CODPROD = this.CODPROD;
			other.CODFORMU = this.CODFORMU;
			other.CODE_ETAT = this.CODE_ETAT;
			other.DATETASIN = this.DATETASIN;
			other.CPOSTSINI = this.CPOSTSINI;
			other.CITESINI = this.CITESINI;
			other.REGSINI = this.REGSINI;
			other.GOUVSINI = this.GOUVSINI;
			other.IDCAMTIER = this.IDCAMTIER;
			other.CAS_IDA = this.CAS_IDA;
			other.DTOUVSNT = this.DTOUVSNT;
			other.DTCLTSNT = this.DTCLTSNT;
			other.MNTPROVIS = this.MNTPROVIS;
			other.MNTPAIGRN = this.MNTPAIGRN;
			other.MNTAGGRAV = this.MNTAGGRAV;
			other.MNTAMELIO = this.MNTAMELIO;
			other.MNTTOTAL = this.MNTTOTAL;
			other.MNTTOTNET = this.MNTTOTNET;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.NUMSNT = this.NUMSNT;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.CAUSESINI = readString(dis);

					this.NATSINI = readString(dis);

					this.NUMCNT = readString(dis);

					this.NUMAVT = dis.readFloat();

					this.NUMMAJ = dis.readFloat();

					this.NATINT = readString(dis);

					this.IDINT = readString(dis);

					this.CODFAM = readString(dis);

					this.CODPROD = readString(dis);

					this.CODFORMU = readString(dis);

					this.CODE_ETAT = readString(dis);

					this.DATETASIN = readDate(dis);

					this.CPOSTSINI = readString(dis);

					this.CITESINI = readString(dis);

					this.REGSINI = readString(dis);

					this.GOUVSINI = readString(dis);

					this.IDCAMTIER = dis.readFloat();

					this.CAS_IDA = dis.readFloat();

					this.DTOUVSNT = readDate(dis);

					this.DTCLTSNT = readDate(dis);

					this.MNTPROVIS = dis.readFloat();

					this.MNTPAIGRN = dis.readFloat();

					this.MNTAGGRAV = dis.readFloat();

					this.MNTAMELIO = dis.readFloat();

					this.MNTTOTAL = dis.readFloat();

					this.MNTTOTNET = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.CAUSESINI, dos);

				// String

				writeString(this.NATSINI, dos);

				// String

				writeString(this.NUMCNT, dos);

				// float

				dos.writeFloat(this.NUMAVT);

				// float

				dos.writeFloat(this.NUMMAJ);

				// String

				writeString(this.NATINT, dos);

				// String

				writeString(this.IDINT, dos);

				// String

				writeString(this.CODFAM, dos);

				// String

				writeString(this.CODPROD, dos);

				// String

				writeString(this.CODFORMU, dos);

				// String

				writeString(this.CODE_ETAT, dos);

				// java.util.Date

				writeDate(this.DATETASIN, dos);

				// String

				writeString(this.CPOSTSINI, dos);

				// String

				writeString(this.CITESINI, dos);

				// String

				writeString(this.REGSINI, dos);

				// String

				writeString(this.GOUVSINI, dos);

				// float

				dos.writeFloat(this.IDCAMTIER);

				// float

				dos.writeFloat(this.CAS_IDA);

				// java.util.Date

				writeDate(this.DTOUVSNT, dos);

				// java.util.Date

				writeDate(this.DTCLTSNT, dos);

				// float

				dos.writeFloat(this.MNTPROVIS);

				// float

				dos.writeFloat(this.MNTPAIGRN);

				// float

				dos.writeFloat(this.MNTAGGRAV);

				// float

				dos.writeFloat(this.MNTAMELIO);

				// float

				dos.writeFloat(this.MNTTOTAL);

				// float

				dos.writeFloat(this.MNTTOTNET);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",CAUSESINI=" + CAUSESINI);
			sb.append(",NATSINI=" + NATSINI);
			sb.append(",NUMCNT=" + NUMCNT);
			sb.append(",NUMAVT=" + String.valueOf(NUMAVT));
			sb.append(",NUMMAJ=" + String.valueOf(NUMMAJ));
			sb.append(",NATINT=" + NATINT);
			sb.append(",IDINT=" + IDINT);
			sb.append(",CODFAM=" + CODFAM);
			sb.append(",CODPROD=" + CODPROD);
			sb.append(",CODFORMU=" + CODFORMU);
			sb.append(",CODE_ETAT=" + CODE_ETAT);
			sb.append(",DATETASIN=" + String.valueOf(DATETASIN));
			sb.append(",CPOSTSINI=" + CPOSTSINI);
			sb.append(",CITESINI=" + CITESINI);
			sb.append(",REGSINI=" + REGSINI);
			sb.append(",GOUVSINI=" + GOUVSINI);
			sb.append(",IDCAMTIER=" + String.valueOf(IDCAMTIER));
			sb.append(",CAS_IDA=" + String.valueOf(CAS_IDA));
			sb.append(",DTOUVSNT=" + String.valueOf(DTOUVSNT));
			sb.append(",DTCLTSNT=" + String.valueOf(DTCLTSNT));
			sb.append(",MNTPROVIS=" + String.valueOf(MNTPROVIS));
			sb.append(",MNTPAIGRN=" + String.valueOf(MNTPAIGRN));
			sb.append(",MNTAGGRAV=" + String.valueOf(MNTAGGRAV));
			sb.append(",MNTAMELIO=" + String.valueOf(MNTAMELIO));
			sb.append(",MNTTOTAL=" + String.valueOf(MNTTOTAL));
			sb.append(",MNTTOTNET=" + String.valueOf(MNTTOTNET));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NUMSNT, other.NUMSNT);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String CAUSESINI;

		public String getCAUSESINI() {
			return this.CAUSESINI;
		}

		public String NATSINI;

		public String getNATSINI() {
			return this.NATSINI;
		}

		public String NUMCNT;

		public String getNUMCNT() {
			return this.NUMCNT;
		}

		public float NUMAVT;

		public float getNUMAVT() {
			return this.NUMAVT;
		}

		public float NUMMAJ;

		public float getNUMMAJ() {
			return this.NUMMAJ;
		}

		public String NATINT;

		public String getNATINT() {
			return this.NATINT;
		}

		public String IDINT;

		public String getIDINT() {
			return this.IDINT;
		}

		public String CODFAM;

		public String getCODFAM() {
			return this.CODFAM;
		}

		public String CODPROD;

		public String getCODPROD() {
			return this.CODPROD;
		}

		public String CODFORMU;

		public String getCODFORMU() {
			return this.CODFORMU;
		}

		public String CODE_ETAT;

		public String getCODE_ETAT() {
			return this.CODE_ETAT;
		}

		public java.util.Date DATETASIN;

		public java.util.Date getDATETASIN() {
			return this.DATETASIN;
		}

		public String CPOSTSINI;

		public String getCPOSTSINI() {
			return this.CPOSTSINI;
		}

		public String CITESINI;

		public String getCITESINI() {
			return this.CITESINI;
		}

		public String REGSINI;

		public String getREGSINI() {
			return this.REGSINI;
		}

		public String GOUVSINI;

		public String getGOUVSINI() {
			return this.GOUVSINI;
		}

		public float IDCAMTIER;

		public float getIDCAMTIER() {
			return this.IDCAMTIER;
		}

		public float CAS_IDA;

		public float getCAS_IDA() {
			return this.CAS_IDA;
		}

		public java.util.Date DTOUVSNT;

		public java.util.Date getDTOUVSNT() {
			return this.DTOUVSNT;
		}

		public java.util.Date DTCLTSNT;

		public java.util.Date getDTCLTSNT() {
			return this.DTCLTSNT;
		}

		public float MNTPROVIS;

		public float getMNTPROVIS() {
			return this.MNTPROVIS;
		}

		public float MNTPAIGRN;

		public float getMNTPAIGRN() {
			return this.MNTPAIGRN;
		}

		public float MNTAGGRAV;

		public float getMNTAGGRAV() {
			return this.MNTAGGRAV;
		}

		public float MNTAMELIO;

		public float getMNTAMELIO() {
			return this.MNTAMELIO;
		}

		public float MNTTOTAL;

		public float getMNTTOTAL() {
			return this.MNTTOTAL;
		}

		public float MNTTOTNET;

		public float getMNTTOTNET() {
			return this.MNTTOTNET;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.NUMSNT == null) ? 0 : this.NUMSNT.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.NUMSNT == null) {
				if (other.NUMSNT != null)
					return false;

			} else if (!this.NUMSNT.equals(other.NUMSNT))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.NUMSNT = this.NUMSNT;
			other.CAUSESINI = this.CAUSESINI;
			other.NATSINI = this.NATSINI;
			other.NUMCNT = this.NUMCNT;
			other.NUMAVT = this.NUMAVT;
			other.NUMMAJ = this.NUMMAJ;
			other.NATINT = this.NATINT;
			other.IDINT = this.IDINT;
			other.CODFAM = this.CODFAM;
			other.CODPROD = this.CODPROD;
			other.CODFORMU = this.CODFORMU;
			other.CODE_ETAT = this.CODE_ETAT;
			other.DATETASIN = this.DATETASIN;
			other.CPOSTSINI = this.CPOSTSINI;
			other.CITESINI = this.CITESINI;
			other.REGSINI = this.REGSINI;
			other.GOUVSINI = this.GOUVSINI;
			other.IDCAMTIER = this.IDCAMTIER;
			other.CAS_IDA = this.CAS_IDA;
			other.DTOUVSNT = this.DTOUVSNT;
			other.DTCLTSNT = this.DTCLTSNT;
			other.MNTPROVIS = this.MNTPROVIS;
			other.MNTPAIGRN = this.MNTPAIGRN;
			other.MNTAGGRAV = this.MNTAGGRAV;
			other.MNTAMELIO = this.MNTAMELIO;
			other.MNTTOTAL = this.MNTTOTAL;
			other.MNTTOTNET = this.MNTTOTNET;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.NUMSNT = this.NUMSNT;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.CAUSESINI = readString(dis);

					this.NATSINI = readString(dis);

					this.NUMCNT = readString(dis);

					this.NUMAVT = dis.readFloat();

					this.NUMMAJ = dis.readFloat();

					this.NATINT = readString(dis);

					this.IDINT = readString(dis);

					this.CODFAM = readString(dis);

					this.CODPROD = readString(dis);

					this.CODFORMU = readString(dis);

					this.CODE_ETAT = readString(dis);

					this.DATETASIN = readDate(dis);

					this.CPOSTSINI = readString(dis);

					this.CITESINI = readString(dis);

					this.REGSINI = readString(dis);

					this.GOUVSINI = readString(dis);

					this.IDCAMTIER = dis.readFloat();

					this.CAS_IDA = dis.readFloat();

					this.DTOUVSNT = readDate(dis);

					this.DTCLTSNT = readDate(dis);

					this.MNTPROVIS = dis.readFloat();

					this.MNTPAIGRN = dis.readFloat();

					this.MNTAGGRAV = dis.readFloat();

					this.MNTAMELIO = dis.readFloat();

					this.MNTTOTAL = dis.readFloat();

					this.MNTTOTNET = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.CAUSESINI, dos);

				// String

				writeString(this.NATSINI, dos);

				// String

				writeString(this.NUMCNT, dos);

				// float

				dos.writeFloat(this.NUMAVT);

				// float

				dos.writeFloat(this.NUMMAJ);

				// String

				writeString(this.NATINT, dos);

				// String

				writeString(this.IDINT, dos);

				// String

				writeString(this.CODFAM, dos);

				// String

				writeString(this.CODPROD, dos);

				// String

				writeString(this.CODFORMU, dos);

				// String

				writeString(this.CODE_ETAT, dos);

				// java.util.Date

				writeDate(this.DATETASIN, dos);

				// String

				writeString(this.CPOSTSINI, dos);

				// String

				writeString(this.CITESINI, dos);

				// String

				writeString(this.REGSINI, dos);

				// String

				writeString(this.GOUVSINI, dos);

				// float

				dos.writeFloat(this.IDCAMTIER);

				// float

				dos.writeFloat(this.CAS_IDA);

				// java.util.Date

				writeDate(this.DTOUVSNT, dos);

				// java.util.Date

				writeDate(this.DTCLTSNT, dos);

				// float

				dos.writeFloat(this.MNTPROVIS);

				// float

				dos.writeFloat(this.MNTPAIGRN);

				// float

				dos.writeFloat(this.MNTAGGRAV);

				// float

				dos.writeFloat(this.MNTAMELIO);

				// float

				dos.writeFloat(this.MNTTOTAL);

				// float

				dos.writeFloat(this.MNTTOTNET);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",CAUSESINI=" + CAUSESINI);
			sb.append(",NATSINI=" + NATSINI);
			sb.append(",NUMCNT=" + NUMCNT);
			sb.append(",NUMAVT=" + String.valueOf(NUMAVT));
			sb.append(",NUMMAJ=" + String.valueOf(NUMMAJ));
			sb.append(",NATINT=" + NATINT);
			sb.append(",IDINT=" + IDINT);
			sb.append(",CODFAM=" + CODFAM);
			sb.append(",CODPROD=" + CODPROD);
			sb.append(",CODFORMU=" + CODFORMU);
			sb.append(",CODE_ETAT=" + CODE_ETAT);
			sb.append(",DATETASIN=" + String.valueOf(DATETASIN));
			sb.append(",CPOSTSINI=" + CPOSTSINI);
			sb.append(",CITESINI=" + CITESINI);
			sb.append(",REGSINI=" + REGSINI);
			sb.append(",GOUVSINI=" + GOUVSINI);
			sb.append(",IDCAMTIER=" + String.valueOf(IDCAMTIER));
			sb.append(",CAS_IDA=" + String.valueOf(CAS_IDA));
			sb.append(",DTOUVSNT=" + String.valueOf(DTOUVSNT));
			sb.append(",DTCLTSNT=" + String.valueOf(DTCLTSNT));
			sb.append(",MNTPROVIS=" + String.valueOf(MNTPROVIS));
			sb.append(",MNTPAIGRN=" + String.valueOf(MNTPAIGRN));
			sb.append(",MNTAGGRAV=" + String.valueOf(MNTAGGRAV));
			sb.append(",MNTAMELIO=" + String.valueOf(MNTAMELIO));
			sb.append(",MNTTOTAL=" + String.valueOf(MNTTOTAL));
			sb.append(",MNTTOTNET=" + String.valueOf(MNTTOTNET));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NUMSNT, other.NUMSNT);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String CAUSESINI;

		public String getCAUSESINI() {
			return this.CAUSESINI;
		}

		public String NATSINI;

		public String getNATSINI() {
			return this.NATSINI;
		}

		public String NUMCNT;

		public String getNUMCNT() {
			return this.NUMCNT;
		}

		public float NUMAVT;

		public float getNUMAVT() {
			return this.NUMAVT;
		}

		public float NUMMAJ;

		public float getNUMMAJ() {
			return this.NUMMAJ;
		}

		public String NATINT;

		public String getNATINT() {
			return this.NATINT;
		}

		public String IDINT;

		public String getIDINT() {
			return this.IDINT;
		}

		public String CODFAM;

		public String getCODFAM() {
			return this.CODFAM;
		}

		public String CODPROD;

		public String getCODPROD() {
			return this.CODPROD;
		}

		public String CODFORMU;

		public String getCODFORMU() {
			return this.CODFORMU;
		}

		public String CODE_ETAT;

		public String getCODE_ETAT() {
			return this.CODE_ETAT;
		}

		public java.util.Date DATETASIN;

		public java.util.Date getDATETASIN() {
			return this.DATETASIN;
		}

		public String CPOSTSINI;

		public String getCPOSTSINI() {
			return this.CPOSTSINI;
		}

		public String CITESINI;

		public String getCITESINI() {
			return this.CITESINI;
		}

		public String REGSINI;

		public String getREGSINI() {
			return this.REGSINI;
		}

		public String GOUVSINI;

		public String getGOUVSINI() {
			return this.GOUVSINI;
		}

		public float IDCAMTIER;

		public float getIDCAMTIER() {
			return this.IDCAMTIER;
		}

		public float CAS_IDA;

		public float getCAS_IDA() {
			return this.CAS_IDA;
		}

		public java.util.Date DTOUVSNT;

		public java.util.Date getDTOUVSNT() {
			return this.DTOUVSNT;
		}

		public java.util.Date DTCLTSNT;

		public java.util.Date getDTCLTSNT() {
			return this.DTCLTSNT;
		}

		public float MNTPROVIS;

		public float getMNTPROVIS() {
			return this.MNTPROVIS;
		}

		public float MNTPAIGRN;

		public float getMNTPAIGRN() {
			return this.MNTPAIGRN;
		}

		public float MNTAGGRAV;

		public float getMNTAGGRAV() {
			return this.MNTAGGRAV;
		}

		public float MNTAMELIO;

		public float getMNTAMELIO() {
			return this.MNTAMELIO;
		}

		public float MNTTOTAL;

		public float getMNTTOTAL() {
			return this.MNTTOTAL;
		}

		public float MNTTOTNET;

		public float getMNTTOTNET() {
			return this.MNTTOTNET;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.NUMSNT == null) ? 0 : this.NUMSNT.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.NUMSNT == null) {
				if (other.NUMSNT != null)
					return false;

			} else if (!this.NUMSNT.equals(other.NUMSNT))

				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.NUMSNT = this.NUMSNT;
			other.CAUSESINI = this.CAUSESINI;
			other.NATSINI = this.NATSINI;
			other.NUMCNT = this.NUMCNT;
			other.NUMAVT = this.NUMAVT;
			other.NUMMAJ = this.NUMMAJ;
			other.NATINT = this.NATINT;
			other.IDINT = this.IDINT;
			other.CODFAM = this.CODFAM;
			other.CODPROD = this.CODPROD;
			other.CODFORMU = this.CODFORMU;
			other.CODE_ETAT = this.CODE_ETAT;
			other.DATETASIN = this.DATETASIN;
			other.CPOSTSINI = this.CPOSTSINI;
			other.CITESINI = this.CITESINI;
			other.REGSINI = this.REGSINI;
			other.GOUVSINI = this.GOUVSINI;
			other.IDCAMTIER = this.IDCAMTIER;
			other.CAS_IDA = this.CAS_IDA;
			other.DTOUVSNT = this.DTOUVSNT;
			other.DTCLTSNT = this.DTCLTSNT;
			other.MNTPROVIS = this.MNTPROVIS;
			other.MNTPAIGRN = this.MNTPAIGRN;
			other.MNTAGGRAV = this.MNTAGGRAV;
			other.MNTAMELIO = this.MNTAMELIO;
			other.MNTTOTAL = this.MNTTOTAL;
			other.MNTTOTNET = this.MNTTOTNET;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.NUMSNT = this.NUMSNT;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.CAUSESINI = readString(dis);

					this.NATSINI = readString(dis);

					this.NUMCNT = readString(dis);

					this.NUMAVT = dis.readFloat();

					this.NUMMAJ = dis.readFloat();

					this.NATINT = readString(dis);

					this.IDINT = readString(dis);

					this.CODFAM = readString(dis);

					this.CODPROD = readString(dis);

					this.CODFORMU = readString(dis);

					this.CODE_ETAT = readString(dis);

					this.DATETASIN = readDate(dis);

					this.CPOSTSINI = readString(dis);

					this.CITESINI = readString(dis);

					this.REGSINI = readString(dis);

					this.GOUVSINI = readString(dis);

					this.IDCAMTIER = dis.readFloat();

					this.CAS_IDA = dis.readFloat();

					this.DTOUVSNT = readDate(dis);

					this.DTCLTSNT = readDate(dis);

					this.MNTPROVIS = dis.readFloat();

					this.MNTPAIGRN = dis.readFloat();

					this.MNTAGGRAV = dis.readFloat();

					this.MNTAMELIO = dis.readFloat();

					this.MNTTOTAL = dis.readFloat();

					this.MNTTOTNET = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.CAUSESINI, dos);

				// String

				writeString(this.NATSINI, dos);

				// String

				writeString(this.NUMCNT, dos);

				// float

				dos.writeFloat(this.NUMAVT);

				// float

				dos.writeFloat(this.NUMMAJ);

				// String

				writeString(this.NATINT, dos);

				// String

				writeString(this.IDINT, dos);

				// String

				writeString(this.CODFAM, dos);

				// String

				writeString(this.CODPROD, dos);

				// String

				writeString(this.CODFORMU, dos);

				// String

				writeString(this.CODE_ETAT, dos);

				// java.util.Date

				writeDate(this.DATETASIN, dos);

				// String

				writeString(this.CPOSTSINI, dos);

				// String

				writeString(this.CITESINI, dos);

				// String

				writeString(this.REGSINI, dos);

				// String

				writeString(this.GOUVSINI, dos);

				// float

				dos.writeFloat(this.IDCAMTIER);

				// float

				dos.writeFloat(this.CAS_IDA);

				// java.util.Date

				writeDate(this.DTOUVSNT, dos);

				// java.util.Date

				writeDate(this.DTCLTSNT, dos);

				// float

				dos.writeFloat(this.MNTPROVIS);

				// float

				dos.writeFloat(this.MNTPAIGRN);

				// float

				dos.writeFloat(this.MNTAGGRAV);

				// float

				dos.writeFloat(this.MNTAMELIO);

				// float

				dos.writeFloat(this.MNTTOTAL);

				// float

				dos.writeFloat(this.MNTTOTNET);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",CAUSESINI=" + CAUSESINI);
			sb.append(",NATSINI=" + NATSINI);
			sb.append(",NUMCNT=" + NUMCNT);
			sb.append(",NUMAVT=" + String.valueOf(NUMAVT));
			sb.append(",NUMMAJ=" + String.valueOf(NUMMAJ));
			sb.append(",NATINT=" + NATINT);
			sb.append(",IDINT=" + IDINT);
			sb.append(",CODFAM=" + CODFAM);
			sb.append(",CODPROD=" + CODPROD);
			sb.append(",CODFORMU=" + CODFORMU);
			sb.append(",CODE_ETAT=" + CODE_ETAT);
			sb.append(",DATETASIN=" + String.valueOf(DATETASIN));
			sb.append(",CPOSTSINI=" + CPOSTSINI);
			sb.append(",CITESINI=" + CITESINI);
			sb.append(",REGSINI=" + REGSINI);
			sb.append(",GOUVSINI=" + GOUVSINI);
			sb.append(",IDCAMTIER=" + String.valueOf(IDCAMTIER));
			sb.append(",CAS_IDA=" + String.valueOf(CAS_IDA));
			sb.append(",DTOUVSNT=" + String.valueOf(DTOUVSNT));
			sb.append(",DTCLTSNT=" + String.valueOf(DTCLTSNT));
			sb.append(",MNTPROVIS=" + String.valueOf(MNTPROVIS));
			sb.append(",MNTPAIGRN=" + String.valueOf(MNTPAIGRN));
			sb.append(",MNTAGGRAV=" + String.valueOf(MNTAGGRAV));
			sb.append(",MNTAMELIO=" + String.valueOf(MNTAMELIO));
			sb.append(",MNTTOTAL=" + String.valueOf(MNTTOTAL));
			sb.append(",MNTTOTNET=" + String.valueOf(MNTTOTNET));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NUMSNT, other.NUMSNT);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String CAUSESINI;

		public String getCAUSESINI() {
			return this.CAUSESINI;
		}

		public String NATSINI;

		public String getNATSINI() {
			return this.NATSINI;
		}

		public float SOUNATSIN;

		public float getSOUNATSIN() {
			return this.SOUNATSIN;
		}

		public float DTSURV;

		public float getDTSURV() {
			return this.DTSURV;
		}

		public String NUMCNT;

		public String getNUMCNT() {
			return this.NUMCNT;
		}

		public float NUMAVT;

		public float getNUMAVT() {
			return this.NUMAVT;
		}

		public float NUMMAJ;

		public float getNUMMAJ() {
			return this.NUMMAJ;
		}

		public float NUMRISQ;

		public float getNUMRISQ() {
			return this.NUMRISQ;
		}

		public String NATCLT;

		public String getNATCLT() {
			return this.NATCLT;
		}

		public float IDCLT;

		public float getIDCLT() {
			return this.IDCLT;
		}

		public String NATINT;

		public String getNATINT() {
			return this.NATINT;
		}

		public float IDINT;

		public float getIDINT() {
			return this.IDINT;
		}

		public float IDDELEGA;

		public float getIDDELEGA() {
			return this.IDDELEGA;
		}

		public String CODFAM;

		public String getCODFAM() {
			return this.CODFAM;
		}

		public String CODPROD;

		public String getCODPROD() {
			return this.CODPROD;
		}

		public String CODFORMU;

		public String getCODFORMU() {
			return this.CODFORMU;
		}

		public float DEBEFFET;

		public float getDEBEFFET() {
			return this.DEBEFFET;
		}

		public float FINEFFET;

		public float getFINEFFET() {
			return this.FINEFFET;
		}

		public String IMMAT;

		public String getIMMAT() {
			return this.IMMAT;
		}

		public String REFEXTERN;

		public String getREFEXTERN() {
			return this.REFEXTERN;
		}

		public float DTDECSNT;

		public float getDTDECSNT() {
			return this.DTDECSNT;
		}

		public String INDFORCAG;

		public String getINDFORCAG() {
			return this.INDFORCAG;
		}

		public String CODE_ETAT;

		public String getCODE_ETAT() {
			return this.CODE_ETAT;
		}

		public String DATETASIN;

		public String getDATETASIN() {
			return this.DATETASIN;
		}

		public String TYPEPAVE;

		public String getTYPEPAVE() {
			return this.TYPEPAVE;
		}

		public String NOMCONDUC;

		public String getNOMCONDUC() {
			return this.NOMCONDUC;
		}

		public float DATNAICON;

		public float getDATNAICON() {
			return this.DATNAICON;
		}

		public String NUMPERMIS;

		public String getNUMPERMIS() {
			return this.NUMPERMIS;
		}

		public String CATEGPERM;

		public String getCATEGPERM() {
			return this.CATEGPERM;
		}

		public float DATEPERMI;

		public float getDATEPERMI() {
			return this.DATEPERMI;
		}

		public String RUE;

		public String getRUE() {
			return this.RUE;
		}

		public String CPOSTSINI;

		public String getCPOSTSINI() {
			return this.CPOSTSINI;
		}

		public String CITESINI;

		public String getCITESINI() {
			return this.CITESINI;
		}

		public String REGSINI;

		public String getREGSINI() {
			return this.REGSINI;
		}

		public String GOUVSINI;

		public String getGOUVSINI() {
			return this.GOUVSINI;
		}

		public String NATEXPERT;

		public String getNATEXPERT() {
			return this.NATEXPERT;
		}

		public float IDEXPERT;

		public float getIDEXPERT() {
			return this.IDEXPERT;
		}

		public String NOMTIERS;

		public String getNOMTIERS() {
			return this.NOMTIERS;
		}

		public String IMVEHTIER;

		public String getIMVEHTIER() {
			return this.IMVEHTIER;
		}

		public String NUMCNTTIE;

		public String getNUMCNTTIE() {
			return this.NUMCNTTIE;
		}

		public String NUMSNTTIE;

		public String getNUMSNTTIE() {
			return this.NUMSNTTIE;
		}

		public float CODPOSTIE;

		public float getCODPOSTIE() {
			return this.CODPOSTIE;
		}

		public String NATCAMTIE;

		public String getNATCAMTIE() {
			return this.NATCAMTIE;
		}

		public float IDCAMTIER;

		public float getIDCAMTIER() {
			return this.IDCAMTIER;
		}

		public float CAS_IDA;

		public float getCAS_IDA() {
			return this.CAS_IDA;
		}

		public float RESPIDA;

		public float getRESPIDA() {
			return this.RESPIDA;
		}

		public String DTOUVSNT;

		public String getDTOUVSNT() {
			return this.DTOUVSNT;
		}

		public String DTCLTSNT;

		public String getDTCLTSNT() {
			return this.DTCLTSNT;
		}

		public float DTREOUSNT;

		public float getDTREOUSNT() {
			return this.DTREOUSNT;
		}

		public String COASSUR;

		public String getCOASSUR() {
			return this.COASSUR;
		}

		public String REASSUR;

		public String getREASSUR() {
			return this.REASSUR;
		}

		public String RESPSNT;

		public String getRESPSNT() {
			return this.RESPSNT;
		}

		public float TAUX;

		public float getTAUX() {
			return this.TAUX;
		}

		public float DPECSIN;

		public float getDPECSIN() {
			return this.DPECSIN;
		}

		public String GESTIOSIN;

		public String getGESTIOSIN() {
			return this.GESTIOSIN;
		}

		public float HEURESINI;

		public float getHEURESINI() {
			return this.HEURESINI;
		}

		public String SOURCDEC;

		public String getSOURCDEC() {
			return this.SOURCDEC;
		}

		public String DDETRANSA;

		public String getDDETRANSA() {
			return this.DDETRANSA;
		}

		public BigDecimal UPDATE_IDENT;

		public BigDecimal getUPDATE_IDENT() {
			return this.UPDATE_IDENT;
		}

		public float MNTPROVIS;

		public float getMNTPROVIS() {
			return this.MNTPROVIS;
		}

		public float MNTPAIGRN;

		public float getMNTPAIGRN() {
			return this.MNTPAIGRN;
		}

		public float MNTAGGRAV;

		public float getMNTAGGRAV() {
			return this.MNTAGGRAV;
		}

		public float MNTAMELIO;

		public float getMNTAMELIO() {
			return this.MNTAMELIO;
		}

		public float MNTTOTAL;

		public float getMNTTOTAL() {
			return this.MNTTOTAL;
		}

		public float MNTTOTNET;

		public float getMNTTOTNET() {
			return this.MNTTOTNET;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.CAUSESINI = readString(dis);

					this.NATSINI = readString(dis);

					this.SOUNATSIN = dis.readFloat();

					this.DTSURV = dis.readFloat();

					this.NUMCNT = readString(dis);

					this.NUMAVT = dis.readFloat();

					this.NUMMAJ = dis.readFloat();

					this.NUMRISQ = dis.readFloat();

					this.NATCLT = readString(dis);

					this.IDCLT = dis.readFloat();

					this.NATINT = readString(dis);

					this.IDINT = dis.readFloat();

					this.IDDELEGA = dis.readFloat();

					this.CODFAM = readString(dis);

					this.CODPROD = readString(dis);

					this.CODFORMU = readString(dis);

					this.DEBEFFET = dis.readFloat();

					this.FINEFFET = dis.readFloat();

					this.IMMAT = readString(dis);

					this.REFEXTERN = readString(dis);

					this.DTDECSNT = dis.readFloat();

					this.INDFORCAG = readString(dis);

					this.CODE_ETAT = readString(dis);

					this.DATETASIN = readString(dis);

					this.TYPEPAVE = readString(dis);

					this.NOMCONDUC = readString(dis);

					this.DATNAICON = dis.readFloat();

					this.NUMPERMIS = readString(dis);

					this.CATEGPERM = readString(dis);

					this.DATEPERMI = dis.readFloat();

					this.RUE = readString(dis);

					this.CPOSTSINI = readString(dis);

					this.CITESINI = readString(dis);

					this.REGSINI = readString(dis);

					this.GOUVSINI = readString(dis);

					this.NATEXPERT = readString(dis);

					this.IDEXPERT = dis.readFloat();

					this.NOMTIERS = readString(dis);

					this.IMVEHTIER = readString(dis);

					this.NUMCNTTIE = readString(dis);

					this.NUMSNTTIE = readString(dis);

					this.CODPOSTIE = dis.readFloat();

					this.NATCAMTIE = readString(dis);

					this.IDCAMTIER = dis.readFloat();

					this.CAS_IDA = dis.readFloat();

					this.RESPIDA = dis.readFloat();

					this.DTOUVSNT = readString(dis);

					this.DTCLTSNT = readString(dis);

					this.DTREOUSNT = dis.readFloat();

					this.COASSUR = readString(dis);

					this.REASSUR = readString(dis);

					this.RESPSNT = readString(dis);

					this.TAUX = dis.readFloat();

					this.DPECSIN = dis.readFloat();

					this.GESTIOSIN = readString(dis);

					this.HEURESINI = dis.readFloat();

					this.SOURCDEC = readString(dis);

					this.DDETRANSA = readString(dis);

					this.UPDATE_IDENT = (BigDecimal) dis.readObject();

					this.MNTPROVIS = dis.readFloat();

					this.MNTPAIGRN = dis.readFloat();

					this.MNTAGGRAV = dis.readFloat();

					this.MNTAMELIO = dis.readFloat();

					this.MNTTOTAL = dis.readFloat();

					this.MNTTOTNET = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.CAUSESINI, dos);

				// String

				writeString(this.NATSINI, dos);

				// float

				dos.writeFloat(this.SOUNATSIN);

				// float

				dos.writeFloat(this.DTSURV);

				// String

				writeString(this.NUMCNT, dos);

				// float

				dos.writeFloat(this.NUMAVT);

				// float

				dos.writeFloat(this.NUMMAJ);

				// float

				dos.writeFloat(this.NUMRISQ);

				// String

				writeString(this.NATCLT, dos);

				// float

				dos.writeFloat(this.IDCLT);

				// String

				writeString(this.NATINT, dos);

				// float

				dos.writeFloat(this.IDINT);

				// float

				dos.writeFloat(this.IDDELEGA);

				// String

				writeString(this.CODFAM, dos);

				// String

				writeString(this.CODPROD, dos);

				// String

				writeString(this.CODFORMU, dos);

				// float

				dos.writeFloat(this.DEBEFFET);

				// float

				dos.writeFloat(this.FINEFFET);

				// String

				writeString(this.IMMAT, dos);

				// String

				writeString(this.REFEXTERN, dos);

				// float

				dos.writeFloat(this.DTDECSNT);

				// String

				writeString(this.INDFORCAG, dos);

				// String

				writeString(this.CODE_ETAT, dos);

				// String

				writeString(this.DATETASIN, dos);

				// String

				writeString(this.TYPEPAVE, dos);

				// String

				writeString(this.NOMCONDUC, dos);

				// float

				dos.writeFloat(this.DATNAICON);

				// String

				writeString(this.NUMPERMIS, dos);

				// String

				writeString(this.CATEGPERM, dos);

				// float

				dos.writeFloat(this.DATEPERMI);

				// String

				writeString(this.RUE, dos);

				// String

				writeString(this.CPOSTSINI, dos);

				// String

				writeString(this.CITESINI, dos);

				// String

				writeString(this.REGSINI, dos);

				// String

				writeString(this.GOUVSINI, dos);

				// String

				writeString(this.NATEXPERT, dos);

				// float

				dos.writeFloat(this.IDEXPERT);

				// String

				writeString(this.NOMTIERS, dos);

				// String

				writeString(this.IMVEHTIER, dos);

				// String

				writeString(this.NUMCNTTIE, dos);

				// String

				writeString(this.NUMSNTTIE, dos);

				// float

				dos.writeFloat(this.CODPOSTIE);

				// String

				writeString(this.NATCAMTIE, dos);

				// float

				dos.writeFloat(this.IDCAMTIER);

				// float

				dos.writeFloat(this.CAS_IDA);

				// float

				dos.writeFloat(this.RESPIDA);

				// String

				writeString(this.DTOUVSNT, dos);

				// String

				writeString(this.DTCLTSNT, dos);

				// float

				dos.writeFloat(this.DTREOUSNT);

				// String

				writeString(this.COASSUR, dos);

				// String

				writeString(this.REASSUR, dos);

				// String

				writeString(this.RESPSNT, dos);

				// float

				dos.writeFloat(this.TAUX);

				// float

				dos.writeFloat(this.DPECSIN);

				// String

				writeString(this.GESTIOSIN, dos);

				// float

				dos.writeFloat(this.HEURESINI);

				// String

				writeString(this.SOURCDEC, dos);

				// String

				writeString(this.DDETRANSA, dos);

				// BigDecimal

				dos.writeObject(this.UPDATE_IDENT);

				// float

				dos.writeFloat(this.MNTPROVIS);

				// float

				dos.writeFloat(this.MNTPAIGRN);

				// float

				dos.writeFloat(this.MNTAGGRAV);

				// float

				dos.writeFloat(this.MNTAMELIO);

				// float

				dos.writeFloat(this.MNTTOTAL);

				// float

				dos.writeFloat(this.MNTTOTNET);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",CAUSESINI=" + CAUSESINI);
			sb.append(",NATSINI=" + NATSINI);
			sb.append(",SOUNATSIN=" + String.valueOf(SOUNATSIN));
			sb.append(",DTSURV=" + String.valueOf(DTSURV));
			sb.append(",NUMCNT=" + NUMCNT);
			sb.append(",NUMAVT=" + String.valueOf(NUMAVT));
			sb.append(",NUMMAJ=" + String.valueOf(NUMMAJ));
			sb.append(",NUMRISQ=" + String.valueOf(NUMRISQ));
			sb.append(",NATCLT=" + NATCLT);
			sb.append(",IDCLT=" + String.valueOf(IDCLT));
			sb.append(",NATINT=" + NATINT);
			sb.append(",IDINT=" + String.valueOf(IDINT));
			sb.append(",IDDELEGA=" + String.valueOf(IDDELEGA));
			sb.append(",CODFAM=" + CODFAM);
			sb.append(",CODPROD=" + CODPROD);
			sb.append(",CODFORMU=" + CODFORMU);
			sb.append(",DEBEFFET=" + String.valueOf(DEBEFFET));
			sb.append(",FINEFFET=" + String.valueOf(FINEFFET));
			sb.append(",IMMAT=" + IMMAT);
			sb.append(",REFEXTERN=" + REFEXTERN);
			sb.append(",DTDECSNT=" + String.valueOf(DTDECSNT));
			sb.append(",INDFORCAG=" + INDFORCAG);
			sb.append(",CODE_ETAT=" + CODE_ETAT);
			sb.append(",DATETASIN=" + DATETASIN);
			sb.append(",TYPEPAVE=" + TYPEPAVE);
			sb.append(",NOMCONDUC=" + NOMCONDUC);
			sb.append(",DATNAICON=" + String.valueOf(DATNAICON));
			sb.append(",NUMPERMIS=" + NUMPERMIS);
			sb.append(",CATEGPERM=" + CATEGPERM);
			sb.append(",DATEPERMI=" + String.valueOf(DATEPERMI));
			sb.append(",RUE=" + RUE);
			sb.append(",CPOSTSINI=" + CPOSTSINI);
			sb.append(",CITESINI=" + CITESINI);
			sb.append(",REGSINI=" + REGSINI);
			sb.append(",GOUVSINI=" + GOUVSINI);
			sb.append(",NATEXPERT=" + NATEXPERT);
			sb.append(",IDEXPERT=" + String.valueOf(IDEXPERT));
			sb.append(",NOMTIERS=" + NOMTIERS);
			sb.append(",IMVEHTIER=" + IMVEHTIER);
			sb.append(",NUMCNTTIE=" + NUMCNTTIE);
			sb.append(",NUMSNTTIE=" + NUMSNTTIE);
			sb.append(",CODPOSTIE=" + String.valueOf(CODPOSTIE));
			sb.append(",NATCAMTIE=" + NATCAMTIE);
			sb.append(",IDCAMTIER=" + String.valueOf(IDCAMTIER));
			sb.append(",CAS_IDA=" + String.valueOf(CAS_IDA));
			sb.append(",RESPIDA=" + String.valueOf(RESPIDA));
			sb.append(",DTOUVSNT=" + DTOUVSNT);
			sb.append(",DTCLTSNT=" + DTCLTSNT);
			sb.append(",DTREOUSNT=" + String.valueOf(DTREOUSNT));
			sb.append(",COASSUR=" + COASSUR);
			sb.append(",REASSUR=" + REASSUR);
			sb.append(",RESPSNT=" + RESPSNT);
			sb.append(",TAUX=" + String.valueOf(TAUX));
			sb.append(",DPECSIN=" + String.valueOf(DPECSIN));
			sb.append(",GESTIOSIN=" + GESTIOSIN);
			sb.append(",HEURESINI=" + String.valueOf(HEURESINI));
			sb.append(",SOURCDEC=" + SOURCDEC);
			sb.append(",DDETRANSA=" + DDETRANSA);
			sb.append(",UPDATE_IDENT=" + String.valueOf(UPDATE_IDENT));
			sb.append(",MNTPROVIS=" + String.valueOf(MNTPROVIS));
			sb.append(",MNTPAIGRN=" + String.valueOf(MNTPAIGRN));
			sb.append(",MNTAGGRAV=" + String.valueOf(MNTAGGRAV));
			sb.append(",MNTAMELIO=" + String.valueOf(MNTAMELIO));
			sb.append(",MNTTOTAL=" + String.valueOf(MNTTOTAL));
			sb.append(",MNTTOTNET=" + String.valueOf(MNTTOTNET));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String CAUSESINI;

		public String getCAUSESINI() {
			return this.CAUSESINI;
		}

		public String NATSINI;

		public String getNATSINI() {
			return this.NATSINI;
		}

		public float SOUNATSIN;

		public float getSOUNATSIN() {
			return this.SOUNATSIN;
		}

		public float DTSURV;

		public float getDTSURV() {
			return this.DTSURV;
		}

		public String NUMCNT;

		public String getNUMCNT() {
			return this.NUMCNT;
		}

		public float NUMAVT;

		public float getNUMAVT() {
			return this.NUMAVT;
		}

		public float NUMMAJ;

		public float getNUMMAJ() {
			return this.NUMMAJ;
		}

		public float NUMRISQ;

		public float getNUMRISQ() {
			return this.NUMRISQ;
		}

		public String NATCLT;

		public String getNATCLT() {
			return this.NATCLT;
		}

		public float IDCLT;

		public float getIDCLT() {
			return this.IDCLT;
		}

		public String NATINT;

		public String getNATINT() {
			return this.NATINT;
		}

		public float IDINT;

		public float getIDINT() {
			return this.IDINT;
		}

		public float IDDELEGA;

		public float getIDDELEGA() {
			return this.IDDELEGA;
		}

		public String CODFAM;

		public String getCODFAM() {
			return this.CODFAM;
		}

		public String CODPROD;

		public String getCODPROD() {
			return this.CODPROD;
		}

		public String CODFORMU;

		public String getCODFORMU() {
			return this.CODFORMU;
		}

		public float DEBEFFET;

		public float getDEBEFFET() {
			return this.DEBEFFET;
		}

		public float FINEFFET;

		public float getFINEFFET() {
			return this.FINEFFET;
		}

		public String IMMAT;

		public String getIMMAT() {
			return this.IMMAT;
		}

		public String REFEXTERN;

		public String getREFEXTERN() {
			return this.REFEXTERN;
		}

		public float DTDECSNT;

		public float getDTDECSNT() {
			return this.DTDECSNT;
		}

		public String INDFORCAG;

		public String getINDFORCAG() {
			return this.INDFORCAG;
		}

		public String CODE_ETAT;

		public String getCODE_ETAT() {
			return this.CODE_ETAT;
		}

		public String DATETASIN;

		public String getDATETASIN() {
			return this.DATETASIN;
		}

		public String TYPEPAVE;

		public String getTYPEPAVE() {
			return this.TYPEPAVE;
		}

		public String NOMCONDUC;

		public String getNOMCONDUC() {
			return this.NOMCONDUC;
		}

		public float DATNAICON;

		public float getDATNAICON() {
			return this.DATNAICON;
		}

		public String NUMPERMIS;

		public String getNUMPERMIS() {
			return this.NUMPERMIS;
		}

		public String CATEGPERM;

		public String getCATEGPERM() {
			return this.CATEGPERM;
		}

		public float DATEPERMI;

		public float getDATEPERMI() {
			return this.DATEPERMI;
		}

		public String RUE;

		public String getRUE() {
			return this.RUE;
		}

		public String CPOSTSINI;

		public String getCPOSTSINI() {
			return this.CPOSTSINI;
		}

		public String CITESINI;

		public String getCITESINI() {
			return this.CITESINI;
		}

		public String REGSINI;

		public String getREGSINI() {
			return this.REGSINI;
		}

		public String GOUVSINI;

		public String getGOUVSINI() {
			return this.GOUVSINI;
		}

		public String NATEXPERT;

		public String getNATEXPERT() {
			return this.NATEXPERT;
		}

		public float IDEXPERT;

		public float getIDEXPERT() {
			return this.IDEXPERT;
		}

		public String NOMTIERS;

		public String getNOMTIERS() {
			return this.NOMTIERS;
		}

		public String IMVEHTIER;

		public String getIMVEHTIER() {
			return this.IMVEHTIER;
		}

		public String NUMCNTTIE;

		public String getNUMCNTTIE() {
			return this.NUMCNTTIE;
		}

		public String NUMSNTTIE;

		public String getNUMSNTTIE() {
			return this.NUMSNTTIE;
		}

		public float CODPOSTIE;

		public float getCODPOSTIE() {
			return this.CODPOSTIE;
		}

		public String NATCAMTIE;

		public String getNATCAMTIE() {
			return this.NATCAMTIE;
		}

		public float IDCAMTIER;

		public float getIDCAMTIER() {
			return this.IDCAMTIER;
		}

		public float CAS_IDA;

		public float getCAS_IDA() {
			return this.CAS_IDA;
		}

		public float RESPIDA;

		public float getRESPIDA() {
			return this.RESPIDA;
		}

		public String DTOUVSNT;

		public String getDTOUVSNT() {
			return this.DTOUVSNT;
		}

		public String DTCLTSNT;

		public String getDTCLTSNT() {
			return this.DTCLTSNT;
		}

		public float DTREOUSNT;

		public float getDTREOUSNT() {
			return this.DTREOUSNT;
		}

		public String COASSUR;

		public String getCOASSUR() {
			return this.COASSUR;
		}

		public String REASSUR;

		public String getREASSUR() {
			return this.REASSUR;
		}

		public String RESPSNT;

		public String getRESPSNT() {
			return this.RESPSNT;
		}

		public float TAUX;

		public float getTAUX() {
			return this.TAUX;
		}

		public float DPECSIN;

		public float getDPECSIN() {
			return this.DPECSIN;
		}

		public String GESTIOSIN;

		public String getGESTIOSIN() {
			return this.GESTIOSIN;
		}

		public float HEURESINI;

		public float getHEURESINI() {
			return this.HEURESINI;
		}

		public String SOURCDEC;

		public String getSOURCDEC() {
			return this.SOURCDEC;
		}

		public String DDETRANSA;

		public String getDDETRANSA() {
			return this.DDETRANSA;
		}

		public BigDecimal UPDATE_IDENT;

		public BigDecimal getUPDATE_IDENT() {
			return this.UPDATE_IDENT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.CAUSESINI = readString(dis);

					this.NATSINI = readString(dis);

					this.SOUNATSIN = dis.readFloat();

					this.DTSURV = dis.readFloat();

					this.NUMCNT = readString(dis);

					this.NUMAVT = dis.readFloat();

					this.NUMMAJ = dis.readFloat();

					this.NUMRISQ = dis.readFloat();

					this.NATCLT = readString(dis);

					this.IDCLT = dis.readFloat();

					this.NATINT = readString(dis);

					this.IDINT = dis.readFloat();

					this.IDDELEGA = dis.readFloat();

					this.CODFAM = readString(dis);

					this.CODPROD = readString(dis);

					this.CODFORMU = readString(dis);

					this.DEBEFFET = dis.readFloat();

					this.FINEFFET = dis.readFloat();

					this.IMMAT = readString(dis);

					this.REFEXTERN = readString(dis);

					this.DTDECSNT = dis.readFloat();

					this.INDFORCAG = readString(dis);

					this.CODE_ETAT = readString(dis);

					this.DATETASIN = readString(dis);

					this.TYPEPAVE = readString(dis);

					this.NOMCONDUC = readString(dis);

					this.DATNAICON = dis.readFloat();

					this.NUMPERMIS = readString(dis);

					this.CATEGPERM = readString(dis);

					this.DATEPERMI = dis.readFloat();

					this.RUE = readString(dis);

					this.CPOSTSINI = readString(dis);

					this.CITESINI = readString(dis);

					this.REGSINI = readString(dis);

					this.GOUVSINI = readString(dis);

					this.NATEXPERT = readString(dis);

					this.IDEXPERT = dis.readFloat();

					this.NOMTIERS = readString(dis);

					this.IMVEHTIER = readString(dis);

					this.NUMCNTTIE = readString(dis);

					this.NUMSNTTIE = readString(dis);

					this.CODPOSTIE = dis.readFloat();

					this.NATCAMTIE = readString(dis);

					this.IDCAMTIER = dis.readFloat();

					this.CAS_IDA = dis.readFloat();

					this.RESPIDA = dis.readFloat();

					this.DTOUVSNT = readString(dis);

					this.DTCLTSNT = readString(dis);

					this.DTREOUSNT = dis.readFloat();

					this.COASSUR = readString(dis);

					this.REASSUR = readString(dis);

					this.RESPSNT = readString(dis);

					this.TAUX = dis.readFloat();

					this.DPECSIN = dis.readFloat();

					this.GESTIOSIN = readString(dis);

					this.HEURESINI = dis.readFloat();

					this.SOURCDEC = readString(dis);

					this.DDETRANSA = readString(dis);

					this.UPDATE_IDENT = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.CAUSESINI, dos);

				// String

				writeString(this.NATSINI, dos);

				// float

				dos.writeFloat(this.SOUNATSIN);

				// float

				dos.writeFloat(this.DTSURV);

				// String

				writeString(this.NUMCNT, dos);

				// float

				dos.writeFloat(this.NUMAVT);

				// float

				dos.writeFloat(this.NUMMAJ);

				// float

				dos.writeFloat(this.NUMRISQ);

				// String

				writeString(this.NATCLT, dos);

				// float

				dos.writeFloat(this.IDCLT);

				// String

				writeString(this.NATINT, dos);

				// float

				dos.writeFloat(this.IDINT);

				// float

				dos.writeFloat(this.IDDELEGA);

				// String

				writeString(this.CODFAM, dos);

				// String

				writeString(this.CODPROD, dos);

				// String

				writeString(this.CODFORMU, dos);

				// float

				dos.writeFloat(this.DEBEFFET);

				// float

				dos.writeFloat(this.FINEFFET);

				// String

				writeString(this.IMMAT, dos);

				// String

				writeString(this.REFEXTERN, dos);

				// float

				dos.writeFloat(this.DTDECSNT);

				// String

				writeString(this.INDFORCAG, dos);

				// String

				writeString(this.CODE_ETAT, dos);

				// String

				writeString(this.DATETASIN, dos);

				// String

				writeString(this.TYPEPAVE, dos);

				// String

				writeString(this.NOMCONDUC, dos);

				// float

				dos.writeFloat(this.DATNAICON);

				// String

				writeString(this.NUMPERMIS, dos);

				// String

				writeString(this.CATEGPERM, dos);

				// float

				dos.writeFloat(this.DATEPERMI);

				// String

				writeString(this.RUE, dos);

				// String

				writeString(this.CPOSTSINI, dos);

				// String

				writeString(this.CITESINI, dos);

				// String

				writeString(this.REGSINI, dos);

				// String

				writeString(this.GOUVSINI, dos);

				// String

				writeString(this.NATEXPERT, dos);

				// float

				dos.writeFloat(this.IDEXPERT);

				// String

				writeString(this.NOMTIERS, dos);

				// String

				writeString(this.IMVEHTIER, dos);

				// String

				writeString(this.NUMCNTTIE, dos);

				// String

				writeString(this.NUMSNTTIE, dos);

				// float

				dos.writeFloat(this.CODPOSTIE);

				// String

				writeString(this.NATCAMTIE, dos);

				// float

				dos.writeFloat(this.IDCAMTIER);

				// float

				dos.writeFloat(this.CAS_IDA);

				// float

				dos.writeFloat(this.RESPIDA);

				// String

				writeString(this.DTOUVSNT, dos);

				// String

				writeString(this.DTCLTSNT, dos);

				// float

				dos.writeFloat(this.DTREOUSNT);

				// String

				writeString(this.COASSUR, dos);

				// String

				writeString(this.REASSUR, dos);

				// String

				writeString(this.RESPSNT, dos);

				// float

				dos.writeFloat(this.TAUX);

				// float

				dos.writeFloat(this.DPECSIN);

				// String

				writeString(this.GESTIOSIN, dos);

				// float

				dos.writeFloat(this.HEURESINI);

				// String

				writeString(this.SOURCDEC, dos);

				// String

				writeString(this.DDETRANSA, dos);

				// BigDecimal

				dos.writeObject(this.UPDATE_IDENT);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",CAUSESINI=" + CAUSESINI);
			sb.append(",NATSINI=" + NATSINI);
			sb.append(",SOUNATSIN=" + String.valueOf(SOUNATSIN));
			sb.append(",DTSURV=" + String.valueOf(DTSURV));
			sb.append(",NUMCNT=" + NUMCNT);
			sb.append(",NUMAVT=" + String.valueOf(NUMAVT));
			sb.append(",NUMMAJ=" + String.valueOf(NUMMAJ));
			sb.append(",NUMRISQ=" + String.valueOf(NUMRISQ));
			sb.append(",NATCLT=" + NATCLT);
			sb.append(",IDCLT=" + String.valueOf(IDCLT));
			sb.append(",NATINT=" + NATINT);
			sb.append(",IDINT=" + String.valueOf(IDINT));
			sb.append(",IDDELEGA=" + String.valueOf(IDDELEGA));
			sb.append(",CODFAM=" + CODFAM);
			sb.append(",CODPROD=" + CODPROD);
			sb.append(",CODFORMU=" + CODFORMU);
			sb.append(",DEBEFFET=" + String.valueOf(DEBEFFET));
			sb.append(",FINEFFET=" + String.valueOf(FINEFFET));
			sb.append(",IMMAT=" + IMMAT);
			sb.append(",REFEXTERN=" + REFEXTERN);
			sb.append(",DTDECSNT=" + String.valueOf(DTDECSNT));
			sb.append(",INDFORCAG=" + INDFORCAG);
			sb.append(",CODE_ETAT=" + CODE_ETAT);
			sb.append(",DATETASIN=" + DATETASIN);
			sb.append(",TYPEPAVE=" + TYPEPAVE);
			sb.append(",NOMCONDUC=" + NOMCONDUC);
			sb.append(",DATNAICON=" + String.valueOf(DATNAICON));
			sb.append(",NUMPERMIS=" + NUMPERMIS);
			sb.append(",CATEGPERM=" + CATEGPERM);
			sb.append(",DATEPERMI=" + String.valueOf(DATEPERMI));
			sb.append(",RUE=" + RUE);
			sb.append(",CPOSTSINI=" + CPOSTSINI);
			sb.append(",CITESINI=" + CITESINI);
			sb.append(",REGSINI=" + REGSINI);
			sb.append(",GOUVSINI=" + GOUVSINI);
			sb.append(",NATEXPERT=" + NATEXPERT);
			sb.append(",IDEXPERT=" + String.valueOf(IDEXPERT));
			sb.append(",NOMTIERS=" + NOMTIERS);
			sb.append(",IMVEHTIER=" + IMVEHTIER);
			sb.append(",NUMCNTTIE=" + NUMCNTTIE);
			sb.append(",NUMSNTTIE=" + NUMSNTTIE);
			sb.append(",CODPOSTIE=" + String.valueOf(CODPOSTIE));
			sb.append(",NATCAMTIE=" + NATCAMTIE);
			sb.append(",IDCAMTIER=" + String.valueOf(IDCAMTIER));
			sb.append(",CAS_IDA=" + String.valueOf(CAS_IDA));
			sb.append(",RESPIDA=" + String.valueOf(RESPIDA));
			sb.append(",DTOUVSNT=" + DTOUVSNT);
			sb.append(",DTCLTSNT=" + DTCLTSNT);
			sb.append(",DTREOUSNT=" + String.valueOf(DTREOUSNT));
			sb.append(",COASSUR=" + COASSUR);
			sb.append(",REASSUR=" + REASSUR);
			sb.append(",RESPSNT=" + RESPSNT);
			sb.append(",TAUX=" + String.valueOf(TAUX));
			sb.append(",DPECSIN=" + String.valueOf(DPECSIN));
			sb.append(",GESTIOSIN=" + GESTIOSIN);
			sb.append(",HEURESINI=" + String.valueOf(HEURESINI));
			sb.append(",SOURCDEC=" + SOURCDEC);
			sb.append(",DDETRANSA=" + DDETRANSA);
			sb.append(",UPDATE_IDENT=" + String.valueOf(UPDATE_IDENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];

		public String NUMSNT;

		public String getNUMSNT() {
			return this.NUMSNT;
		}

		public String CAUSESINI;

		public String getCAUSESINI() {
			return this.CAUSESINI;
		}

		public String NATSINI;

		public String getNATSINI() {
			return this.NATSINI;
		}

		public float SOUNATSIN;

		public float getSOUNATSIN() {
			return this.SOUNATSIN;
		}

		public float DTSURV;

		public float getDTSURV() {
			return this.DTSURV;
		}

		public String NUMCNT;

		public String getNUMCNT() {
			return this.NUMCNT;
		}

		public float NUMAVT;

		public float getNUMAVT() {
			return this.NUMAVT;
		}

		public float NUMMAJ;

		public float getNUMMAJ() {
			return this.NUMMAJ;
		}

		public float NUMRISQ;

		public float getNUMRISQ() {
			return this.NUMRISQ;
		}

		public String NATCLT;

		public String getNATCLT() {
			return this.NATCLT;
		}

		public float IDCLT;

		public float getIDCLT() {
			return this.IDCLT;
		}

		public String NATINT;

		public String getNATINT() {
			return this.NATINT;
		}

		public float IDINT;

		public float getIDINT() {
			return this.IDINT;
		}

		public float IDDELEGA;

		public float getIDDELEGA() {
			return this.IDDELEGA;
		}

		public String CODFAM;

		public String getCODFAM() {
			return this.CODFAM;
		}

		public String CODPROD;

		public String getCODPROD() {
			return this.CODPROD;
		}

		public String CODFORMU;

		public String getCODFORMU() {
			return this.CODFORMU;
		}

		public float DEBEFFET;

		public float getDEBEFFET() {
			return this.DEBEFFET;
		}

		public float FINEFFET;

		public float getFINEFFET() {
			return this.FINEFFET;
		}

		public String IMMAT;

		public String getIMMAT() {
			return this.IMMAT;
		}

		public String REFEXTERN;

		public String getREFEXTERN() {
			return this.REFEXTERN;
		}

		public float DTDECSNT;

		public float getDTDECSNT() {
			return this.DTDECSNT;
		}

		public String INDFORCAG;

		public String getINDFORCAG() {
			return this.INDFORCAG;
		}

		public String CODE_ETAT;

		public String getCODE_ETAT() {
			return this.CODE_ETAT;
		}

		public String DATETASIN;

		public String getDATETASIN() {
			return this.DATETASIN;
		}

		public String TYPEPAVE;

		public String getTYPEPAVE() {
			return this.TYPEPAVE;
		}

		public String NOMCONDUC;

		public String getNOMCONDUC() {
			return this.NOMCONDUC;
		}

		public float DATNAICON;

		public float getDATNAICON() {
			return this.DATNAICON;
		}

		public String NUMPERMIS;

		public String getNUMPERMIS() {
			return this.NUMPERMIS;
		}

		public String CATEGPERM;

		public String getCATEGPERM() {
			return this.CATEGPERM;
		}

		public float DATEPERMI;

		public float getDATEPERMI() {
			return this.DATEPERMI;
		}

		public String RUE;

		public String getRUE() {
			return this.RUE;
		}

		public String CPOSTSINI;

		public String getCPOSTSINI() {
			return this.CPOSTSINI;
		}

		public String CITESINI;

		public String getCITESINI() {
			return this.CITESINI;
		}

		public String REGSINI;

		public String getREGSINI() {
			return this.REGSINI;
		}

		public String GOUVSINI;

		public String getGOUVSINI() {
			return this.GOUVSINI;
		}

		public String NATEXPERT;

		public String getNATEXPERT() {
			return this.NATEXPERT;
		}

		public float IDEXPERT;

		public float getIDEXPERT() {
			return this.IDEXPERT;
		}

		public String NOMTIERS;

		public String getNOMTIERS() {
			return this.NOMTIERS;
		}

		public String IMVEHTIER;

		public String getIMVEHTIER() {
			return this.IMVEHTIER;
		}

		public String NUMCNTTIE;

		public String getNUMCNTTIE() {
			return this.NUMCNTTIE;
		}

		public String NUMSNTTIE;

		public String getNUMSNTTIE() {
			return this.NUMSNTTIE;
		}

		public float CODPOSTIE;

		public float getCODPOSTIE() {
			return this.CODPOSTIE;
		}

		public String NATCAMTIE;

		public String getNATCAMTIE() {
			return this.NATCAMTIE;
		}

		public float IDCAMTIER;

		public float getIDCAMTIER() {
			return this.IDCAMTIER;
		}

		public float CAS_IDA;

		public float getCAS_IDA() {
			return this.CAS_IDA;
		}

		public float RESPIDA;

		public float getRESPIDA() {
			return this.RESPIDA;
		}

		public String DTOUVSNT;

		public String getDTOUVSNT() {
			return this.DTOUVSNT;
		}

		public String DTCLTSNT;

		public String getDTCLTSNT() {
			return this.DTCLTSNT;
		}

		public float DTREOUSNT;

		public float getDTREOUSNT() {
			return this.DTREOUSNT;
		}

		public String COASSUR;

		public String getCOASSUR() {
			return this.COASSUR;
		}

		public String REASSUR;

		public String getREASSUR() {
			return this.REASSUR;
		}

		public String RESPSNT;

		public String getRESPSNT() {
			return this.RESPSNT;
		}

		public float TAUX;

		public float getTAUX() {
			return this.TAUX;
		}

		public float DPECSIN;

		public float getDPECSIN() {
			return this.DPECSIN;
		}

		public String GESTIOSIN;

		public String getGESTIOSIN() {
			return this.GESTIOSIN;
		}

		public float HEURESINI;

		public float getHEURESINI() {
			return this.HEURESINI;
		}

		public String SOURCDEC;

		public String getSOURCDEC() {
			return this.SOURCDEC;
		}

		public String DDETRANSA;

		public String getDDETRANSA() {
			return this.DDETRANSA;
		}

		public BigDecimal UPDATE_IDENT;

		public BigDecimal getUPDATE_IDENT() {
			return this.UPDATE_IDENT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400) {

				try {

					int length = 0;

					this.NUMSNT = readString(dis);

					this.CAUSESINI = readString(dis);

					this.NATSINI = readString(dis);

					this.SOUNATSIN = dis.readFloat();

					this.DTSURV = dis.readFloat();

					this.NUMCNT = readString(dis);

					this.NUMAVT = dis.readFloat();

					this.NUMMAJ = dis.readFloat();

					this.NUMRISQ = dis.readFloat();

					this.NATCLT = readString(dis);

					this.IDCLT = dis.readFloat();

					this.NATINT = readString(dis);

					this.IDINT = dis.readFloat();

					this.IDDELEGA = dis.readFloat();

					this.CODFAM = readString(dis);

					this.CODPROD = readString(dis);

					this.CODFORMU = readString(dis);

					this.DEBEFFET = dis.readFloat();

					this.FINEFFET = dis.readFloat();

					this.IMMAT = readString(dis);

					this.REFEXTERN = readString(dis);

					this.DTDECSNT = dis.readFloat();

					this.INDFORCAG = readString(dis);

					this.CODE_ETAT = readString(dis);

					this.DATETASIN = readString(dis);

					this.TYPEPAVE = readString(dis);

					this.NOMCONDUC = readString(dis);

					this.DATNAICON = dis.readFloat();

					this.NUMPERMIS = readString(dis);

					this.CATEGPERM = readString(dis);

					this.DATEPERMI = dis.readFloat();

					this.RUE = readString(dis);

					this.CPOSTSINI = readString(dis);

					this.CITESINI = readString(dis);

					this.REGSINI = readString(dis);

					this.GOUVSINI = readString(dis);

					this.NATEXPERT = readString(dis);

					this.IDEXPERT = dis.readFloat();

					this.NOMTIERS = readString(dis);

					this.IMVEHTIER = readString(dis);

					this.NUMCNTTIE = readString(dis);

					this.NUMSNTTIE = readString(dis);

					this.CODPOSTIE = dis.readFloat();

					this.NATCAMTIE = readString(dis);

					this.IDCAMTIER = dis.readFloat();

					this.CAS_IDA = dis.readFloat();

					this.RESPIDA = dis.readFloat();

					this.DTOUVSNT = readString(dis);

					this.DTCLTSNT = readString(dis);

					this.DTREOUSNT = dis.readFloat();

					this.COASSUR = readString(dis);

					this.REASSUR = readString(dis);

					this.RESPSNT = readString(dis);

					this.TAUX = dis.readFloat();

					this.DPECSIN = dis.readFloat();

					this.GESTIOSIN = readString(dis);

					this.HEURESINI = dis.readFloat();

					this.SOURCDEC = readString(dis);

					this.DDETRANSA = readString(dis);

					this.UPDATE_IDENT = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NUMSNT, dos);

				// String

				writeString(this.CAUSESINI, dos);

				// String

				writeString(this.NATSINI, dos);

				// float

				dos.writeFloat(this.SOUNATSIN);

				// float

				dos.writeFloat(this.DTSURV);

				// String

				writeString(this.NUMCNT, dos);

				// float

				dos.writeFloat(this.NUMAVT);

				// float

				dos.writeFloat(this.NUMMAJ);

				// float

				dos.writeFloat(this.NUMRISQ);

				// String

				writeString(this.NATCLT, dos);

				// float

				dos.writeFloat(this.IDCLT);

				// String

				writeString(this.NATINT, dos);

				// float

				dos.writeFloat(this.IDINT);

				// float

				dos.writeFloat(this.IDDELEGA);

				// String

				writeString(this.CODFAM, dos);

				// String

				writeString(this.CODPROD, dos);

				// String

				writeString(this.CODFORMU, dos);

				// float

				dos.writeFloat(this.DEBEFFET);

				// float

				dos.writeFloat(this.FINEFFET);

				// String

				writeString(this.IMMAT, dos);

				// String

				writeString(this.REFEXTERN, dos);

				// float

				dos.writeFloat(this.DTDECSNT);

				// String

				writeString(this.INDFORCAG, dos);

				// String

				writeString(this.CODE_ETAT, dos);

				// String

				writeString(this.DATETASIN, dos);

				// String

				writeString(this.TYPEPAVE, dos);

				// String

				writeString(this.NOMCONDUC, dos);

				// float

				dos.writeFloat(this.DATNAICON);

				// String

				writeString(this.NUMPERMIS, dos);

				// String

				writeString(this.CATEGPERM, dos);

				// float

				dos.writeFloat(this.DATEPERMI);

				// String

				writeString(this.RUE, dos);

				// String

				writeString(this.CPOSTSINI, dos);

				// String

				writeString(this.CITESINI, dos);

				// String

				writeString(this.REGSINI, dos);

				// String

				writeString(this.GOUVSINI, dos);

				// String

				writeString(this.NATEXPERT, dos);

				// float

				dos.writeFloat(this.IDEXPERT);

				// String

				writeString(this.NOMTIERS, dos);

				// String

				writeString(this.IMVEHTIER, dos);

				// String

				writeString(this.NUMCNTTIE, dos);

				// String

				writeString(this.NUMSNTTIE, dos);

				// float

				dos.writeFloat(this.CODPOSTIE);

				// String

				writeString(this.NATCAMTIE, dos);

				// float

				dos.writeFloat(this.IDCAMTIER);

				// float

				dos.writeFloat(this.CAS_IDA);

				// float

				dos.writeFloat(this.RESPIDA);

				// String

				writeString(this.DTOUVSNT, dos);

				// String

				writeString(this.DTCLTSNT, dos);

				// float

				dos.writeFloat(this.DTREOUSNT);

				// String

				writeString(this.COASSUR, dos);

				// String

				writeString(this.REASSUR, dos);

				// String

				writeString(this.RESPSNT, dos);

				// float

				dos.writeFloat(this.TAUX);

				// float

				dos.writeFloat(this.DPECSIN);

				// String

				writeString(this.GESTIOSIN, dos);

				// float

				dos.writeFloat(this.HEURESINI);

				// String

				writeString(this.SOURCDEC, dos);

				// String

				writeString(this.DDETRANSA, dos);

				// BigDecimal

				dos.writeObject(this.UPDATE_IDENT);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUMSNT=" + NUMSNT);
			sb.append(",CAUSESINI=" + CAUSESINI);
			sb.append(",NATSINI=" + NATSINI);
			sb.append(",SOUNATSIN=" + String.valueOf(SOUNATSIN));
			sb.append(",DTSURV=" + String.valueOf(DTSURV));
			sb.append(",NUMCNT=" + NUMCNT);
			sb.append(",NUMAVT=" + String.valueOf(NUMAVT));
			sb.append(",NUMMAJ=" + String.valueOf(NUMMAJ));
			sb.append(",NUMRISQ=" + String.valueOf(NUMRISQ));
			sb.append(",NATCLT=" + NATCLT);
			sb.append(",IDCLT=" + String.valueOf(IDCLT));
			sb.append(",NATINT=" + NATINT);
			sb.append(",IDINT=" + String.valueOf(IDINT));
			sb.append(",IDDELEGA=" + String.valueOf(IDDELEGA));
			sb.append(",CODFAM=" + CODFAM);
			sb.append(",CODPROD=" + CODPROD);
			sb.append(",CODFORMU=" + CODFORMU);
			sb.append(",DEBEFFET=" + String.valueOf(DEBEFFET));
			sb.append(",FINEFFET=" + String.valueOf(FINEFFET));
			sb.append(",IMMAT=" + IMMAT);
			sb.append(",REFEXTERN=" + REFEXTERN);
			sb.append(",DTDECSNT=" + String.valueOf(DTDECSNT));
			sb.append(",INDFORCAG=" + INDFORCAG);
			sb.append(",CODE_ETAT=" + CODE_ETAT);
			sb.append(",DATETASIN=" + DATETASIN);
			sb.append(",TYPEPAVE=" + TYPEPAVE);
			sb.append(",NOMCONDUC=" + NOMCONDUC);
			sb.append(",DATNAICON=" + String.valueOf(DATNAICON));
			sb.append(",NUMPERMIS=" + NUMPERMIS);
			sb.append(",CATEGPERM=" + CATEGPERM);
			sb.append(",DATEPERMI=" + String.valueOf(DATEPERMI));
			sb.append(",RUE=" + RUE);
			sb.append(",CPOSTSINI=" + CPOSTSINI);
			sb.append(",CITESINI=" + CITESINI);
			sb.append(",REGSINI=" + REGSINI);
			sb.append(",GOUVSINI=" + GOUVSINI);
			sb.append(",NATEXPERT=" + NATEXPERT);
			sb.append(",IDEXPERT=" + String.valueOf(IDEXPERT));
			sb.append(",NOMTIERS=" + NOMTIERS);
			sb.append(",IMVEHTIER=" + IMVEHTIER);
			sb.append(",NUMCNTTIE=" + NUMCNTTIE);
			sb.append(",NUMSNTTIE=" + NUMSNTTIE);
			sb.append(",CODPOSTIE=" + String.valueOf(CODPOSTIE));
			sb.append(",NATCAMTIE=" + NATCAMTIE);
			sb.append(",IDCAMTIER=" + String.valueOf(IDCAMTIER));
			sb.append(",CAS_IDA=" + String.valueOf(CAS_IDA));
			sb.append(",RESPIDA=" + String.valueOf(RESPIDA));
			sb.append(",DTOUVSNT=" + DTOUVSNT);
			sb.append(",DTCLTSNT=" + DTCLTSNT);
			sb.append(",DTREOUSNT=" + String.valueOf(DTREOUSNT));
			sb.append(",COASSUR=" + COASSUR);
			sb.append(",REASSUR=" + REASSUR);
			sb.append(",RESPSNT=" + RESPSNT);
			sb.append(",TAUX=" + String.valueOf(TAUX));
			sb.append(",DPECSIN=" + String.valueOf(DPECSIN));
			sb.append(",GESTIOSIN=" + GESTIOSIN);
			sb.append(",HEURESINI=" + String.valueOf(HEURESINI));
			sb.append(",SOURCDEC=" + SOURCDEC);
			sb.append(",DDETRANSA=" + DDETRANSA);
			sb.append(",UPDATE_IDENT=" + String.valueOf(UPDATE_IDENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_1Process(globalMap);
				tDBInput_3Process(globalMap);

				row3Struct row3 = new row3Struct();
				row2Struct row2 = new row2Struct();
				out1Struct out1 = new out1Struct();
				row4Struct row4 = new row4Struct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;

				int nb_line_rejected_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;
				int tmp_batchUpdateCount_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "SINISTRE_AS400";
				boolean whetherReject_tDBOutput_1 = false;

				String dbProperties_tDBOutput_1 = "prompt=false";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI";
				} else {
					url_tDBOutput_1 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";
				}
				String dbUser_tDBOutput_1 = "STGPFE01";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:sX3VZix6laFsv/WSCzQHyByx9kA/JzvGrK+hcvfnBE2Kswk=");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				java.lang.Class.forName("com.ibm.as400.access.AS400JDBCDriver");
				java.sql.Connection conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,
						dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;
				int count_tDBOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
						if (table_tDBOutput_1.equalsIgnoreCase("SINISTRE_AS400")) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE " + tableName_tDBOutput_1 + "");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE " + tableName_tDBOutput_1
							+ "(NUMSNT VARCHAR(15)   not null ,CAUSESINI VARCHAR(2)   not null ,NATSINI VARCHAR(1)   not null ,NUMCNT VARCHAR(15)   not null ,NUMAVT NUMERIC(3,0)   not null ,NUMMAJ NUMERIC(3,0)   not null ,NATINT VARCHAR(2)   not null ,IDINT VARCHAR(10)   not null ,CODFAM VARCHAR(3)   not null ,CODPROD VARCHAR(3)   not null ,CODFORMU VARCHAR(2)   not null ,CODE_ETAT VARCHAR(1)   not null ,DATETASIN DATE  not null ,CPOSTSINI VARCHAR(5)   not null ,CITESINI VARCHAR(30)   not null ,REGSINI VARCHAR(20)  ,GOUVSINI VARCHAR(12)  ,IDCAMTIER NUMERIC(10,0)   not null ,CAS_IDA NUMERIC(2,0)   not null ,DTOUVSNT DATE  not null ,DTCLTSNT DATE ,MNTPROVIS NUMERIC(12,3)   not null ,MNTPAIGRN NUMERIC(12,3)   not null ,MNTAGGRAV NUMERIC(12,3)   not null ,MNTAMELIO NUMERIC(12,3)   not null ,MNTTOTAL NUMERIC(12,3)   not null ,MNTTOTNET NUMERIC(12,3)   not null ,primary key(NUMSNT))");
				}
				String insert_tDBOutput_1 = "INSERT INTO " + "SINISTRE_AS400"
						+ " (NUMSNT,CAUSESINI,NATSINI,NUMCNT,NUMAVT,NUMMAJ,NATINT,IDINT,CODFAM,CODPROD,CODFORMU,CODE_ETAT,DATETASIN,CPOSTSINI,CITESINI,REGSINI,GOUVSINI,IDCAMTIER,CAS_IDA,DTOUVSNT,DTCLTSNT,MNTPROVIS,MNTPAIGRN,MNTAGGRAV,MNTAMELIO,MNTTOTAL,MNTTOTNET) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1,
						java.sql.Statement.RETURN_GENERATED_KEYS);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String NUMSNT;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.NUMSNT == null) ? 0 : this.NUMSNT.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.NUMSNT == null) {
							if (other.NUMSNT != null)
								return false;

						} else if (!this.NUMSNT.equals(other.NUMSNT))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) globalMap
						.get("tHash_Lookup_row1"));

				row1Struct row1HashKey = new row1Struct();
				row1Struct row1Default = new row1Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
					int var1;
					String var2;
					String var3;
					java.util.Date var4;
					int var5;
					String var6;
					String var7;
					java.util.Date var8;
					int var9;
					String var10;
					String var11;
					java.util.Date var12;
					int var13;
					String var14;
					String var15;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tJoin_1 begin ] start
				 */

				ok_Hash.put("tJoin_1", false);
				start_Hash.put("tJoin_1", System.currentTimeMillis());

				currentComponent = "tJoin_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tJoin_1 = 0;

				final java.util.Map<row5Struct, row5Struct> tHash_tJoin_1 = (java.util.Map<row5Struct, row5Struct>) globalMap
						.get("tHash_row5");

				class Util_tJoin_1 {
					row5Struct lookupValue = null;
					row5Struct row5HashKey = new row5Struct();

					public boolean isJoined(row3Struct mainRow) {
						row5HashKey.NUMSNT = mainRow.NUMSNT;

						row5HashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_1.get(row5HashKey);
						if (lookupValue != null) {
							return true;
						} else {
						}
						return false;
					}
				}

				Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();

				int nb_line_tJoin_1 = 0;

				/**
				 * [tJoin_1 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "STGPFE01";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:1PSbt2MEcxnE6iMgPsX2X1SA0T8NUIJzSF5PV4LLU7XZx18=");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  SITB01.NUMSNT, \n  SITB01.CAUSESINI, \n  SITB01.NATSINI, \n  SITB01.SOUNATSIN, \n  SITB01.DTSURV, \n  SITB01.NUMCN"
						+ "T, \n  SITB01.NUMAVT, \n  SITB01.NUMMAJ, \n  SITB01.NUMRISQ, \n  SITB01.NATCLT, \n  SITB01.IDCLT, \n  SITB01.NATINT, \n  SITB01"
						+ ".IDINT, \n  SITB01.IDDELEGA, \n  SITB01.CODFAM, \n  SITB01.CODPROD, \n  SITB01.CODFORMU, \n  SITB01.DEBEFFET, \n  SITB01.FINEF"
						+ "FET, \n  SITB01.IMMAT, \n  SITB01.REFEXTERN, \n  SITB01.DTDECSNT, \n  SITB01.INDFORCAG, \n  SITB01.CODE_ETAT, \n  SITB01.DATET"
						+ "ASIN, \n  SITB01.TYPEPAVE, \n  SITB01.NOMCONDUC, \n  SITB01.DATNAICON, \n  SITB01.NUMPERMIS, \n  SITB01.CATEGPERM, \n  SITB01."
						+ "DATEPERMI, \n  SITB01.RUE, \n  SITB01.CPOSTSINI, \n  SITB01.CITESINI, \n  SITB01.REGSINI, \n  SITB01.GOUVSINI, \n  SITB01.NATE"
						+ "XPERT, \n  SITB01.IDEXPERT, \n  SITB01.NOMTIERS, \n  SITB01.IMVEHTIER, \n  SITB01.NUMCNTTIE, \n  SITB01.NUMSNTTIE, \n  SITB01."
						+ "CODPOSTIE, \n  SITB01.NATCAMTIE, \n  SITB01.IDCAMTIER, \n  SITB01.CAS_IDA, \n  SITB01.RESPIDA, \n  SITB01.DTOUVSNT, \n  SITB01"
						+ ".DTCLTSNT, \n  SITB01.DTREOUSNT, \n  SITB01.COASSUR, \n  SITB01.REASSUR, \n  SITB01.RESPSNT, \n  SITB01.TAUX, \n  SITB01.DPECS"
						+ "IN, \n  SITB01.GESTIOSIN, \n  SITB01.HEURESINI, \n  SITB01.SOURCDEC, \n  SITB01.DDETRANSA, \n  SITB01.UPDATE_IDENT\nFROM SITB0"
						+ "1";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row3.NUMSNT = null;
						} else {

							row3.NUMSNT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row3.CAUSESINI = null;
						} else {

							row3.CAUSESINI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row3.NATSINI = null;
						} else {

							row3.NATSINI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row3.SOUNATSIN = 0;
						} else {

							row3.SOUNATSIN = rs_tDBInput_2.getFloat(4);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row3.DTSURV = 0;
						} else {

							row3.DTSURV = rs_tDBInput_2.getFloat(5);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row3.NUMCNT = null;
						} else {

							row3.NUMCNT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row3.NUMAVT = 0;
						} else {

							row3.NUMAVT = rs_tDBInput_2.getFloat(7);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row3.NUMMAJ = 0;
						} else {

							row3.NUMMAJ = rs_tDBInput_2.getFloat(8);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row3.NUMRISQ = 0;
						} else {

							row3.NUMRISQ = rs_tDBInput_2.getFloat(9);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row3.NATCLT = null;
						} else {

							row3.NATCLT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row3.IDCLT = 0;
						} else {

							row3.IDCLT = rs_tDBInput_2.getFloat(11);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row3.NATINT = null;
						} else {

							row3.NATINT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row3.IDINT = 0;
						} else {

							row3.IDINT = rs_tDBInput_2.getFloat(13);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row3.IDDELEGA = 0;
						} else {

							row3.IDDELEGA = rs_tDBInput_2.getFloat(14);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row3.CODFAM = null;
						} else {

							row3.CODFAM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, false);
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row3.CODPROD = null;
						} else {

							row3.CODPROD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, false);
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row3.CODFORMU = null;
						} else {

							row3.CODFORMU = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, false);
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row3.DEBEFFET = 0;
						} else {

							row3.DEBEFFET = rs_tDBInput_2.getFloat(18);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row3.FINEFFET = 0;
						} else {

							row3.FINEFFET = rs_tDBInput_2.getFloat(19);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row3.IMMAT = null;
						} else {

							row3.IMMAT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, false);
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row3.REFEXTERN = null;
						} else {

							row3.REFEXTERN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 21, false);
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row3.DTDECSNT = 0;
						} else {

							row3.DTDECSNT = rs_tDBInput_2.getFloat(22);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row3.INDFORCAG = null;
						} else {

							row3.INDFORCAG = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, false);
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row3.CODE_ETAT = null;
						} else {

							row3.CODE_ETAT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 24, false);
						}
						if (colQtyInRs_tDBInput_2 < 25) {
							row3.DATETASIN = null;
						} else {

							row3.DATETASIN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 25, false);
						}
						if (colQtyInRs_tDBInput_2 < 26) {
							row3.TYPEPAVE = null;
						} else {

							row3.TYPEPAVE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 26, false);
						}
						if (colQtyInRs_tDBInput_2 < 27) {
							row3.NOMCONDUC = null;
						} else {

							row3.NOMCONDUC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 27, false);
						}
						if (colQtyInRs_tDBInput_2 < 28) {
							row3.DATNAICON = 0;
						} else {

							row3.DATNAICON = rs_tDBInput_2.getFloat(28);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 29) {
							row3.NUMPERMIS = null;
						} else {

							row3.NUMPERMIS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 29, false);
						}
						if (colQtyInRs_tDBInput_2 < 30) {
							row3.CATEGPERM = null;
						} else {

							row3.CATEGPERM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 30, false);
						}
						if (colQtyInRs_tDBInput_2 < 31) {
							row3.DATEPERMI = 0;
						} else {

							row3.DATEPERMI = rs_tDBInput_2.getFloat(31);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 32) {
							row3.RUE = null;
						} else {

							row3.RUE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 32, false);
						}
						if (colQtyInRs_tDBInput_2 < 33) {
							row3.CPOSTSINI = null;
						} else {

							row3.CPOSTSINI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 33, false);
						}
						if (colQtyInRs_tDBInput_2 < 34) {
							row3.CITESINI = null;
						} else {

							row3.CITESINI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 34, false);
						}
						if (colQtyInRs_tDBInput_2 < 35) {
							row3.REGSINI = null;
						} else {

							row3.REGSINI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 35, false);
						}
						if (colQtyInRs_tDBInput_2 < 36) {
							row3.GOUVSINI = null;
						} else {

							row3.GOUVSINI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 36, false);
						}
						if (colQtyInRs_tDBInput_2 < 37) {
							row3.NATEXPERT = null;
						} else {

							row3.NATEXPERT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 37, false);
						}
						if (colQtyInRs_tDBInput_2 < 38) {
							row3.IDEXPERT = 0;
						} else {

							row3.IDEXPERT = rs_tDBInput_2.getFloat(38);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 39) {
							row3.NOMTIERS = null;
						} else {

							row3.NOMTIERS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 39, false);
						}
						if (colQtyInRs_tDBInput_2 < 40) {
							row3.IMVEHTIER = null;
						} else {

							row3.IMVEHTIER = routines.system.JDBCUtil.getString(rs_tDBInput_2, 40, false);
						}
						if (colQtyInRs_tDBInput_2 < 41) {
							row3.NUMCNTTIE = null;
						} else {

							row3.NUMCNTTIE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 41, false);
						}
						if (colQtyInRs_tDBInput_2 < 42) {
							row3.NUMSNTTIE = null;
						} else {

							row3.NUMSNTTIE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 42, false);
						}
						if (colQtyInRs_tDBInput_2 < 43) {
							row3.CODPOSTIE = 0;
						} else {

							row3.CODPOSTIE = rs_tDBInput_2.getFloat(43);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 44) {
							row3.NATCAMTIE = null;
						} else {

							row3.NATCAMTIE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 44, false);
						}
						if (colQtyInRs_tDBInput_2 < 45) {
							row3.IDCAMTIER = 0;
						} else {

							row3.IDCAMTIER = rs_tDBInput_2.getFloat(45);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 46) {
							row3.CAS_IDA = 0;
						} else {

							row3.CAS_IDA = rs_tDBInput_2.getFloat(46);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 47) {
							row3.RESPIDA = 0;
						} else {

							row3.RESPIDA = rs_tDBInput_2.getFloat(47);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 48) {
							row3.DTOUVSNT = null;
						} else {

							row3.DTOUVSNT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 48, false);
						}
						if (colQtyInRs_tDBInput_2 < 49) {
							row3.DTCLTSNT = null;
						} else {

							row3.DTCLTSNT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 49, false);
						}
						if (colQtyInRs_tDBInput_2 < 50) {
							row3.DTREOUSNT = 0;
						} else {

							row3.DTREOUSNT = rs_tDBInput_2.getFloat(50);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 51) {
							row3.COASSUR = null;
						} else {

							row3.COASSUR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 51, false);
						}
						if (colQtyInRs_tDBInput_2 < 52) {
							row3.REASSUR = null;
						} else {

							row3.REASSUR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 52, false);
						}
						if (colQtyInRs_tDBInput_2 < 53) {
							row3.RESPSNT = null;
						} else {

							row3.RESPSNT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 53, false);
						}
						if (colQtyInRs_tDBInput_2 < 54) {
							row3.TAUX = 0;
						} else {

							row3.TAUX = rs_tDBInput_2.getFloat(54);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 55) {
							row3.DPECSIN = 0;
						} else {

							row3.DPECSIN = rs_tDBInput_2.getFloat(55);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 56) {
							row3.GESTIOSIN = null;
						} else {

							row3.GESTIOSIN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 56, false);
						}
						if (colQtyInRs_tDBInput_2 < 57) {
							row3.HEURESINI = 0;
						} else {

							row3.HEURESINI = rs_tDBInput_2.getFloat(57);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 58) {
							row3.SOURCDEC = null;
						} else {

							row3.SOURCDEC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 58, false);
						}
						if (colQtyInRs_tDBInput_2 < 59) {
							row3.DDETRANSA = null;
						} else {

							row3.DDETRANSA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 59, false);
						}
						if (colQtyInRs_tDBInput_2 < 60) {
							row3.UPDATE_IDENT = null;
						} else {

							row3.UPDATE_IDENT = rs_tDBInput_2.getBigDecimal(60);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tJoin_1 main ] start
						 */

						currentComponent = "tJoin_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

						row2 = null;

						row2 = new row2Struct();
						row2.NUMSNT = row3.NUMSNT;
						row2.CAUSESINI = row3.CAUSESINI;
						row2.NATSINI = row3.NATSINI;
						row2.SOUNATSIN = row3.SOUNATSIN;
						row2.DTSURV = row3.DTSURV;
						row2.NUMCNT = row3.NUMCNT;
						row2.NUMAVT = row3.NUMAVT;
						row2.NUMMAJ = row3.NUMMAJ;
						row2.NUMRISQ = row3.NUMRISQ;
						row2.NATCLT = row3.NATCLT;
						row2.IDCLT = row3.IDCLT;
						row2.NATINT = row3.NATINT;
						row2.IDINT = row3.IDINT;
						row2.IDDELEGA = row3.IDDELEGA;
						row2.CODFAM = row3.CODFAM;
						row2.CODPROD = row3.CODPROD;
						row2.CODFORMU = row3.CODFORMU;
						row2.DEBEFFET = row3.DEBEFFET;
						row2.FINEFFET = row3.FINEFFET;
						row2.IMMAT = row3.IMMAT;
						row2.REFEXTERN = row3.REFEXTERN;
						row2.DTDECSNT = row3.DTDECSNT;
						row2.INDFORCAG = row3.INDFORCAG;
						row2.CODE_ETAT = row3.CODE_ETAT;
						row2.DATETASIN = row3.DATETASIN;
						row2.TYPEPAVE = row3.TYPEPAVE;
						row2.NOMCONDUC = row3.NOMCONDUC;
						row2.DATNAICON = row3.DATNAICON;
						row2.NUMPERMIS = row3.NUMPERMIS;
						row2.CATEGPERM = row3.CATEGPERM;
						row2.DATEPERMI = row3.DATEPERMI;
						row2.RUE = row3.RUE;
						row2.CPOSTSINI = row3.CPOSTSINI;
						row2.CITESINI = row3.CITESINI;
						row2.REGSINI = row3.REGSINI;
						row2.GOUVSINI = row3.GOUVSINI;
						row2.NATEXPERT = row3.NATEXPERT;
						row2.IDEXPERT = row3.IDEXPERT;
						row2.NOMTIERS = row3.NOMTIERS;
						row2.IMVEHTIER = row3.IMVEHTIER;
						row2.NUMCNTTIE = row3.NUMCNTTIE;
						row2.NUMSNTTIE = row3.NUMSNTTIE;
						row2.CODPOSTIE = row3.CODPOSTIE;
						row2.NATCAMTIE = row3.NATCAMTIE;
						row2.IDCAMTIER = row3.IDCAMTIER;
						row2.CAS_IDA = row3.CAS_IDA;
						row2.RESPIDA = row3.RESPIDA;
						row2.DTOUVSNT = row3.DTOUVSNT;
						row2.DTCLTSNT = row3.DTCLTSNT;
						row2.DTREOUSNT = row3.DTREOUSNT;
						row2.COASSUR = row3.COASSUR;
						row2.REASSUR = row3.REASSUR;
						row2.RESPSNT = row3.RESPSNT;
						row2.TAUX = row3.TAUX;
						row2.DPECSIN = row3.DPECSIN;
						row2.GESTIOSIN = row3.GESTIOSIN;
						row2.HEURESINI = row3.HEURESINI;
						row2.SOURCDEC = row3.SOURCDEC;
						row2.DDETRANSA = row3.DDETRANSA;
						row2.UPDATE_IDENT = row3.UPDATE_IDENT;

						if (util_tJoin_1.isJoined(row3)) {
							row2.MNTPROVIS = util_tJoin_1.lookupValue.MNTPROVIS;
							row2.MNTPAIGRN = util_tJoin_1.lookupValue.MNTPAIGRN;
							row2.MNTAGGRAV = util_tJoin_1.lookupValue.MNTAGGRAV;
							row2.MNTAMELIO = util_tJoin_1.lookupValue.MNTAMELIO;
							row2.MNTTOTAL = util_tJoin_1.lookupValue.MNTTOTAL;
							row2.MNTTOTNET = util_tJoin_1.lookupValue.MNTTOTNET;
						}

///////////////////////    			

						tos_count_tJoin_1++;

						/**
						 * [tJoin_1 main ] stop
						 */

						/**
						 * [tJoin_1 process_data_begin ] start
						 */

						currentComponent = "tJoin_1";

						/**
						 * [tJoin_1 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row1"
							///////////////////////////////////////////////

							boolean forceLooprow1 = false;

							row1Struct row1ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_2 = false;

								row1HashKey.CPOST = row2.CPOSTSINI;

								row1HashKey.CITE = row2.CITESINI;

								row1HashKey.hashCodeDirty = true;

								tHash_Lookup_row1.lookup(row1HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row1 != null && tHash_Lookup_row1.getCount(row1HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1'
								// and it contains more one result from keys : row1.CPOST = '" +
								// row1HashKey.CPOST + "', row1.CITE = '" + row1HashKey.CITE + "'");
							} // G 071

							row1Struct row1 = null;

							row1Struct fromLookup_row1 = null;
							row1 = row1Default;

							if (tHash_Lookup_row1 != null && tHash_Lookup_row1.hasNext()) { // G 099

								fromLookup_row1 = tHash_Lookup_row1.next();

							} // G 099

							if (fromLookup_row1 != null) {
								row1 = fromLookup_row1;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;
								Var.var1 = StringHandling.LEN(row2.DATETASIN);
								Var.var2 = Var.var1 != 8 ? "0" : row2.DATETASIN;
								Var.var3 = Var.var2.equals("0") ? null : Var.var2;
								Var.var4 = Var.var3 == null ? null : TalendDate.parseDate("yyyyMMdd", Var.var3);
								Var.var5 = StringHandling.LEN(row2.DTOUVSNT);
								Var.var6 = Var.var5 != 8 ? "0" : row2.DTOUVSNT;
								Var.var7 = Var.var6.equals("0") ? null : Var.var6;
								Var.var8 = Var.var7 == null ? null : TalendDate.parseDate("yyyyMMdd", Var.var7);
								Var.var9 = StringHandling.LEN(row2.DTCLTSNT);
								Var.var10 = Var.var9 != 8 ? "0" : row2.DTCLTSNT;
								Var.var11 = Var.var10.equals("0") ? null : Var.var10;
								Var.var12 = Var.var11 == null ? null : TalendDate.parseDate("yyyyMMdd", Var.var11);
								Var.var13 = (int) row2.IDINT;
								Var.var14 = Var.var13 + "";
								Var.var15 = StringHandling.EREPLACE(Var.var14, " ", "");// ###############################
								// ###############################
								// # Output tables

								out1 = null;

// # Output table : 'out1'
								out1_tmp.NUMSNT = row2.NUMSNT;
								out1_tmp.CAUSESINI = row2.CAUSESINI;
								out1_tmp.NATSINI = row2.NATSINI;
								out1_tmp.NUMCNT = row2.NUMCNT;
								out1_tmp.NUMAVT = row2.NUMAVT;
								out1_tmp.NUMMAJ = row2.NUMMAJ;
								out1_tmp.NATINT = row2.NATINT;
								out1_tmp.IDINT = Var.var15;
								out1_tmp.CODFAM = row2.CODFAM;
								out1_tmp.CODPROD = row2.CODPROD;
								out1_tmp.CODFORMU = row2.CODFORMU;
								out1_tmp.CODE_ETAT = row2.CODE_ETAT;
								out1_tmp.DATETASIN = Var.var4;
								out1_tmp.CPOSTSINI = row2.CPOSTSINI;
								out1_tmp.CITESINI = row2.CITESINI;
								out1_tmp.REGSINI = row1.REG;
								out1_tmp.GOUVSINI = row1.GOUVERNOR;
								out1_tmp.IDCAMTIER = row2.IDCAMTIER;
								out1_tmp.CAS_IDA = row2.CAS_IDA;
								out1_tmp.DTOUVSNT = Var.var8;
								out1_tmp.DTCLTSNT = Var.var12;
								out1_tmp.MNTPROVIS = row2.MNTPROVIS;
								out1_tmp.MNTPAIGRN = row2.MNTPAIGRN;
								out1_tmp.MNTAGGRAV = row2.MNTAGGRAV;
								out1_tmp.MNTAMELIO = row2.MNTAMELIO;
								out1_tmp.MNTTOTAL = row2.MNTTOTAL;
								out1_tmp.MNTTOTNET = row2.MNTTOTNET;
								out1 = out1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tUniqRow_1 main ] start
								 */

								currentComponent = "tUniqRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
								}

								row4 = null;
								if (out1.NUMSNT == null) {
									finder_tUniqRow_1.NUMSNT = null;
								} else {
									finder_tUniqRow_1.NUMSNT = out1.NUMSNT.toLowerCase();
								}
								finder_tUniqRow_1.hashCodeDirty = true;
								if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
									KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

									if (out1.NUMSNT == null) {
										new_tUniqRow_1.NUMSNT = null;
									} else {
										new_tUniqRow_1.NUMSNT = out1.NUMSNT.toLowerCase();
									}

									keystUniqRow_1.add(new_tUniqRow_1);
									if (row4 == null) {

										row4 = new row4Struct();
									}
									row4.NUMSNT = out1.NUMSNT;
									row4.CAUSESINI = out1.CAUSESINI;
									row4.NATSINI = out1.NATSINI;
									row4.NUMCNT = out1.NUMCNT;
									row4.NUMAVT = out1.NUMAVT;
									row4.NUMMAJ = out1.NUMMAJ;
									row4.NATINT = out1.NATINT;
									row4.IDINT = out1.IDINT;
									row4.CODFAM = out1.CODFAM;
									row4.CODPROD = out1.CODPROD;
									row4.CODFORMU = out1.CODFORMU;
									row4.CODE_ETAT = out1.CODE_ETAT;
									row4.DATETASIN = out1.DATETASIN;
									row4.CPOSTSINI = out1.CPOSTSINI;
									row4.CITESINI = out1.CITESINI;
									row4.REGSINI = out1.REGSINI;
									row4.GOUVSINI = out1.GOUVSINI;
									row4.IDCAMTIER = out1.IDCAMTIER;
									row4.CAS_IDA = out1.CAS_IDA;
									row4.DTOUVSNT = out1.DTOUVSNT;
									row4.DTCLTSNT = out1.DTCLTSNT;
									row4.MNTPROVIS = out1.MNTPROVIS;
									row4.MNTPAIGRN = out1.MNTPAIGRN;
									row4.MNTAGGRAV = out1.MNTAGGRAV;
									row4.MNTAMELIO = out1.MNTAMELIO;
									row4.MNTTOTAL = out1.MNTTOTAL;
									row4.MNTTOTNET = out1.MNTTOTNET;
									nb_uniques_tUniqRow_1++;
								} else {
									nb_duplicates_tUniqRow_1++;
								}

								tos_count_tUniqRow_1++;

								/**
								 * [tUniqRow_1 main ] stop
								 */

								/**
								 * [tUniqRow_1 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_1";

								/**
								 * [tUniqRow_1 process_data_begin ] stop
								 */
// Start of branch "row4"
								if (row4 != null) {

									/**
									 * [tDBOutput_1 main ] start
									 */

									currentComponent = "tDBOutput_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
									}

									row6 = null;
									whetherReject_tDBOutput_1 = false;
									if (row4.NUMSNT == null) {
										pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(1, row4.NUMSNT);
									}

									if (row4.CAUSESINI == null) {
										pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(2, row4.CAUSESINI);
									}

									if (row4.NATSINI == null) {
										pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(3, row4.NATSINI);
									}

									if (row4.NUMCNT == null) {
										pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(4, row4.NUMCNT);
									}

									pstmt_tDBOutput_1.setFloat(5, row4.NUMAVT);

									pstmt_tDBOutput_1.setFloat(6, row4.NUMMAJ);

									if (row4.NATINT == null) {
										pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(7, row4.NATINT);
									}

									if (row4.IDINT == null) {
										pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(8, row4.IDINT);
									}

									if (row4.CODFAM == null) {
										pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(9, row4.CODFAM);
									}

									if (row4.CODPROD == null) {
										pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(10, row4.CODPROD);
									}

									if (row4.CODFORMU == null) {
										pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(11, row4.CODFORMU);
									}

									if (row4.CODE_ETAT == null) {
										pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(12, row4.CODE_ETAT);
									}

									if (row4.DATETASIN != null) {
										pstmt_tDBOutput_1.setTimestamp(13,
												new java.sql.Timestamp(row4.DATETASIN.getTime()));
									} else {
										pstmt_tDBOutput_1.setNull(13, java.sql.Types.TIMESTAMP);
									}

									if (row4.CPOSTSINI == null) {
										pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(14, row4.CPOSTSINI);
									}

									if (row4.CITESINI == null) {
										pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(15, row4.CITESINI);
									}

									if (row4.REGSINI == null) {
										pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(16, row4.REGSINI);
									}

									if (row4.GOUVSINI == null) {
										pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(17, row4.GOUVSINI);
									}

									pstmt_tDBOutput_1.setFloat(18, row4.IDCAMTIER);

									pstmt_tDBOutput_1.setFloat(19, row4.CAS_IDA);

									if (row4.DTOUVSNT != null) {
										pstmt_tDBOutput_1.setTimestamp(20,
												new java.sql.Timestamp(row4.DTOUVSNT.getTime()));
									} else {
										pstmt_tDBOutput_1.setNull(20, java.sql.Types.TIMESTAMP);
									}

									if (row4.DTCLTSNT != null) {
										pstmt_tDBOutput_1.setTimestamp(21,
												new java.sql.Timestamp(row4.DTCLTSNT.getTime()));
									} else {
										pstmt_tDBOutput_1.setNull(21, java.sql.Types.TIMESTAMP);
									}

									pstmt_tDBOutput_1.setFloat(22, row4.MNTPROVIS);

									pstmt_tDBOutput_1.setFloat(23, row4.MNTPAIGRN);

									pstmt_tDBOutput_1.setFloat(24, row4.MNTAGGRAV);

									pstmt_tDBOutput_1.setFloat(25, row4.MNTAMELIO);

									pstmt_tDBOutput_1.setFloat(26, row4.MNTTOTAL);

									pstmt_tDBOutput_1.setFloat(27, row4.MNTTOTNET);

									pstmt_tDBOutput_1.addBatch();
									nb_line_tDBOutput_1++;

									batchSizeCounter_tDBOutput_1++;

									if (!whetherReject_tDBOutput_1) {
										row6 = new row6Struct();
										row6.NUMSNT = row4.NUMSNT;
										row6.CAUSESINI = row4.CAUSESINI;
										row6.NATSINI = row4.NATSINI;
										row6.NUMCNT = row4.NUMCNT;
										row6.NUMAVT = row4.NUMAVT;
										row6.NUMMAJ = row4.NUMMAJ;
										row6.NATINT = row4.NATINT;
										row6.IDINT = row4.IDINT;
										row6.CODFAM = row4.CODFAM;
										row6.CODPROD = row4.CODPROD;
										row6.CODFORMU = row4.CODFORMU;
										row6.CODE_ETAT = row4.CODE_ETAT;
										row6.DATETASIN = row4.DATETASIN;
										row6.CPOSTSINI = row4.CPOSTSINI;
										row6.CITESINI = row4.CITESINI;
										row6.REGSINI = row4.REGSINI;
										row6.GOUVSINI = row4.GOUVSINI;
										row6.IDCAMTIER = row4.IDCAMTIER;
										row6.CAS_IDA = row4.CAS_IDA;
										row6.DTOUVSNT = row4.DTOUVSNT;
										row6.DTCLTSNT = row4.DTCLTSNT;
										row6.MNTPROVIS = row4.MNTPROVIS;
										row6.MNTPAIGRN = row4.MNTPAIGRN;
										row6.MNTAGGRAV = row4.MNTAGGRAV;
										row6.MNTAMELIO = row4.MNTAMELIO;
										row6.MNTTOTAL = row4.MNTTOTAL;
										row6.MNTTOTNET = row4.MNTTOTNET;
									}
									if ((batchSize_tDBOutput_1 > 0)
											&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {

										int[] status_tDBOutput_1 = null;
										int countSum_tDBOutput_1 = 0;
										try {
											batchSizeCounter_tDBOutput_1 = 0;
											status_tDBOutput_1 = pstmt_tDBOutput_1.executeBatch();
											for (int countEach_tDBOutput_1 : status_tDBOutput_1) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}
										} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
											for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}
											System.err.println(e_tDBOutput_1.getMessage());
										}
										try {
											tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
										} catch (java.sql.SQLException e_tDBOutput_1) {
											System.err.println(e_tDBOutput_1.getMessage());
										}
										tmp_batchUpdateCount_tDBOutput_1 = tmp_batchUpdateCount_tDBOutput_1 > countSum_tDBOutput_1
												? tmp_batchUpdateCount_tDBOutput_1
												: countSum_tDBOutput_1;
										insertedCount_tDBOutput_1 += tmp_batchUpdateCount_tDBOutput_1;
									}

									tos_count_tDBOutput_1++;

									/**
									 * [tDBOutput_1 main ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_begin ] stop
									 */
// Start of branch "row6"
									if (row6 != null) {

										/**
										 * [tLogRow_1 main ] start
										 */

										currentComponent = "tLogRow_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
										}

///////////////////////		

										strBuffer_tLogRow_1 = new StringBuilder();

										if (row6.NUMSNT != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.NUMSNT));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.CAUSESINI != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.CAUSESINI));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.NATSINI != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.NATSINI));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.NUMCNT != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.NUMCNT));

										} //

										strBuffer_tLogRow_1.append("|");

										strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row6.NUMAVT));

										strBuffer_tLogRow_1.append("|");

										strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row6.NUMMAJ));

										strBuffer_tLogRow_1.append("|");

										if (row6.NATINT != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.NATINT));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.IDINT != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.IDINT));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.CODFAM != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.CODFAM));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.CODPROD != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.CODPROD));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.CODFORMU != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.CODFORMU));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.CODE_ETAT != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.CODE_ETAT));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.DATETASIN != null) { //

											strBuffer_tLogRow_1
													.append(FormatterUtils.format_Date(row6.DATETASIN, "yyyy-MM-dd"));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.CPOSTSINI != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.CPOSTSINI));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.CITESINI != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.CITESINI));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.REGSINI != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.REGSINI));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.GOUVSINI != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row6.GOUVSINI));

										} //

										strBuffer_tLogRow_1.append("|");

										strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row6.IDCAMTIER));

										strBuffer_tLogRow_1.append("|");

										strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row6.CAS_IDA));

										strBuffer_tLogRow_1.append("|");

										if (row6.DTOUVSNT != null) { //

											strBuffer_tLogRow_1
													.append(FormatterUtils.format_Date(row6.DTOUVSNT, "yyyy-MM-dd"));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row6.DTCLTSNT != null) { //

											strBuffer_tLogRow_1
													.append(FormatterUtils.format_Date(row6.DTCLTSNT, "yyyy-MM-dd"));

										} //

										strBuffer_tLogRow_1.append("|");

										strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row6.MNTPROVIS));

										strBuffer_tLogRow_1.append("|");

										strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row6.MNTPAIGRN));

										strBuffer_tLogRow_1.append("|");

										strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row6.MNTAGGRAV));

										strBuffer_tLogRow_1.append("|");

										strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row6.MNTAMELIO));

										strBuffer_tLogRow_1.append("|");

										strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row6.MNTTOTAL));

										strBuffer_tLogRow_1.append("|");

										strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row6.MNTTOTNET));

										if (globalMap.get("tLogRow_CONSOLE") != null) {
											consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
													.get("tLogRow_CONSOLE");
										} else {
											consoleOut_tLogRow_1 = new java.io.PrintStream(
													new java.io.BufferedOutputStream(System.out));
											globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
										}
										consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
										consoleOut_tLogRow_1.flush();
										nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

										tos_count_tLogRow_1++;

										/**
										 * [tLogRow_1 main ] stop
										 */

										/**
										 * [tLogRow_1 process_data_begin ] start
										 */

										currentComponent = "tLogRow_1";

										/**
										 * [tLogRow_1 process_data_begin ] stop
										 */

										/**
										 * [tLogRow_1 process_data_end ] start
										 */

										currentComponent = "tLogRow_1";

										/**
										 * [tLogRow_1 process_data_end ] stop
										 */

									} // End of branch "row6"

									/**
									 * [tDBOutput_1 process_data_end ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_end ] stop
									 */

								} // End of branch "row4"

								/**
								 * [tUniqRow_1 process_data_end ] start
								 */

								currentComponent = "tUniqRow_1";

								/**
								 * [tUniqRow_1 process_data_end ] stop
								 */

							} // End of branch "out1"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tJoin_1 process_data_end ] start
						 */

						currentComponent = "tJoin_1";

						/**
						 * [tJoin_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tJoin_1 end ] start
				 */

				currentComponent = "tJoin_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tJoin_1", true);
				end_Hash.put("tJoin_1", System.currentTimeMillis());

				/**
				 * [tJoin_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row1 != null) {
					tHash_Lookup_row1.endGet();
				}
				globalMap.remove("tHash_Lookup_row1");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

					int[] status_tDBOutput_1 = null;
					int countSum_tDBOutput_1 = 0;
					try {
						batchSizeCounter_tDBOutput_1 = 0;
						status_tDBOutput_1 = pstmt_tDBOutput_1.executeBatch();
						for (int countEach_tDBOutput_1 : status_tDBOutput_1) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
					} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
						for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						System.err.println(e_tDBOutput_1.getMessage());
					}
					try {
						tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
					} catch (java.sql.SQLException e_tDBOutput_1) {
						System.err.println(e_tDBOutput_1.getMessage());
					}
					tmp_batchUpdateCount_tDBOutput_1 = tmp_batchUpdateCount_tDBOutput_1 > countSum_tDBOutput_1
							? tmp_batchUpdateCount_tDBOutput_1
							: countSum_tDBOutput_1;
					insertedCount_tDBOutput_1 += tmp_batchUpdateCount_tDBOutput_1;
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				conn_tDBOutput_1.close();
				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row1");

			// free memory for "tJoin_1"
			globalMap.remove("tHash_row5");

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tJoin_1 finally ] start
				 */

				currentComponent = "tJoin_1";

				/**
				 * [tJoin_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableComparableLookupRow<row1Struct> {
		final static byte[] commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		static byte[] commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CPOST;

		public String getCPOST() {
			return this.CPOST;
		}

		public String CITE;

		public String getCITE() {
			return this.CITE;
		}

		public String REG;

		public String getREG() {
			return this.REG;
		}

		public String GOUVERNOR;

		public String getGOUVERNOR() {
			return this.GOUVERNOR;
		}

		public BigDecimal UPDATE_IDENT;

		public BigDecimal getUPDATE_IDENT() {
			return this.UPDATE_IDENT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CPOST == null) ? 0 : this.CPOST.hashCode());

				result = prime * result + ((this.CITE == null) ? 0 : this.CITE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.CPOST == null) {
				if (other.CPOST != null)
					return false;

			} else if (!this.CPOST.equals(other.CPOST))

				return false;

			if (this.CITE == null) {
				if (other.CITE != null)
					return false;

			} else if (!this.CITE.equals(other.CITE))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.CPOST = this.CPOST;
			other.CITE = this.CITE;
			other.REG = this.REG;
			other.GOUVERNOR = this.GOUVERNOR;
			other.UPDATE_IDENT = this.UPDATE_IDENT;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.CPOST = this.CPOST;
			other.CITE = this.CITE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length) {
					if (length < 1024 && commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400.length == 0) {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[1024];
					} else {
						commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length);
				strReturn = new String(commonByteArray_AMI_ASSURANCES_1_Table_Sinistre_AS400, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AMI_ASSURANCES_1_Table_Sinistre_AS400) {

				try {

					int length = 0;

					this.CPOST = readString(dis);

					this.CITE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CPOST, dos);

				// String

				writeString(this.CITE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.REG = readString(dis, ois);

				this.GOUVERNOR = readString(dis, ois);

				this.UPDATE_IDENT = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.REG, dos, oos);

				writeString(this.GOUVERNOR, dos, oos);

				oos.writeObject(this.UPDATE_IDENT);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CPOST=" + CPOST);
			sb.append(",CITE=" + CITE);
			sb.append(",REG=" + REG);
			sb.append(",GOUVERNOR=" + GOUVERNOR);
			sb.append(",UPDATE_IDENT=" + String.valueOf(UPDATE_IDENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CPOST, other.CPOST);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CITE, other.CITE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tAdvancedHash_row1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row1", false);
				start_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tAdvancedHash_row1 = 0;

				// connection name:row1
				// source node:tDBInput_3 - inputs:(after_tDBInput_2) outputs:(row1,row1) |
				// target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
				// linked node: tMap_2 - inputs:(row2,row1) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row1Struct>getLookup(matchingModeEnum_row1);

				globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);

				/**
				 * [tAdvancedHash_row1 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "STGPFE01";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:HwHBV+RfZ8PjwOTBEQPdNunyep4acXfC+m3UFi7RjBSo240=");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:as400://" + "192.168.10.60" + "/" + "STGDATABI" + ";" + "prompt=false";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  CPTB01.CPOST, \n  CPTB01.CITE, \n  CPTB01.REG, \n  CPTB01.GOUVERNOR, \n  CPTB01.UPDATE_IDENT\nFROM CPTB01";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row1.CPOST = null;
						} else {

							row1.CPOST = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row1.CITE = null;
						} else {

							row1.CITE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row1.REG = null;
						} else {

							row1.REG = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row1.GOUVERNOR = null;
						} else {

							row1.GOUVERNOR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row1.UPDATE_IDENT = null;
						} else {

							row1.UPDATE_IDENT = rs_tDBInput_3.getBigDecimal(5);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row1 main ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						row1Struct row1_HashRow = new row1Struct();

						row1_HashRow.CPOST = row1.CPOST;

						row1_HashRow.CITE = row1.CITE;

						row1_HashRow.REG = row1.REG;

						row1_HashRow.GOUVERNOR = row1.GOUVERNOR;

						row1_HashRow.UPDATE_IDENT = row1.UPDATE_IDENT;

						tHash_Lookup_row1.put(row1_HashRow);

						tos_count_tAdvancedHash_row1++;

						/**
						 * [tAdvancedHash_row1 main ] stop
						 */

						/**
						 * [tAdvancedHash_row1 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						/**
						 * [tAdvancedHash_row1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row1 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						/**
						 * [tAdvancedHash_row1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row1 end ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				tHash_Lookup_row1.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tAdvancedHash_row1", true);
				end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row1 finally ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				/**
				 * [tAdvancedHash_row1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Table_Sinistre_AS400 Table_Sinistre_AS400Class = new Table_Sinistre_AS400();

		int exitCode = Table_Sinistre_AS400Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Table_Sinistre_AS400.class.getClassLoader().getResourceAsStream(
					"ami_assurances_1/table_sinistre_as400_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Table_Sinistre_AS400.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_2) {
			globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

			e_tDBInput_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Table_Sinistre_AS400");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 268525 characters generated by Talend Open Studio for Data Integration on the
 * 5 septembre 2022 à 13:57:34 GMT+01:00
 ************************************************************************************************/